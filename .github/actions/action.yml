# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: "Test Template"
description: "Template for running NeMo tests in a containerized environment"

inputs:
  timeout:
    description: "Max runtime of test in minutes"
    required: false
    default: "30"
  script:
    description: "Test script to execute"
    required: true
  is-optional:
    description: "Pass this job on failure."
    required: false
    default: "false"
  is_unit_test:
    description: "Upload coverage as unit test"
    required: false
    default: "false"
  tag:
    description: Latest or legacy test suite
    required: true
  bucket:
    description: Unit test bucket to launch
    required: true
  PAT:
    description: "GitHub Personal Access Token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install curl, sudo
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y curl uuid-runtime

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: ${{ github.workspace }}/Megatron-LM

    - name: Cache uv
      uses: actions/cache@v4
      id: cache
      with:
        path: cache-mount
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Restore Docker cache mounts
      uses: reproducible-containers/buildkit-cache-dance@5b81f4d29dc8397a7d341dba3aeecc7ec54d6361
      with:
        cache-dir: cache-mount
        dockerfile: docker/Dockerfile.ci.dev
        skip-extraction: ${{ steps.cache.outputs.cache-hit }}

    - name: Download test data
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.PAT }}
        TIMEOUT: ${{ inputs.timeout }}
      run: |
        echo "::group::Download test data"
        docker run \
          --rm \
          -d \
          --name test-data-container \
          -v $(pwd):/workdir \
          -w /workdir \
          -e GH_TOKEN=$GH_TOKEN \
          python:3.10-slim \
          bash -c "sleep $(( $TIMEOUT * 60 + 60 ))"

        docker exec -t test-data-container pip install --no-cache-dir pygithub click
        docker exec -t test-data-container python tests/test_utils/python_scripts/download_unit_tests_dataset.py --assets-dir ./assets

        docker cp test-data-container:/workdir/assets ./assets
        docker container rm -f test-data-container || true
        echo "::endgroup::"

    - name: Build container
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.PAT }}
      run: |
        echo "::group::Build test container"
        docker build -f docker/Dockerfile.ci.dev --build-arg FROM_IMAGE_NAME="nvcr.io/nvidia/pytorch:25.05-py3" --target=main -t megatron-core .
        echo "::endgroup::"

    - name: Start container
      shell: bash
      env:
        MNT_PATH: ${{ steps.azure-fileshare.outputs.MNT_PATH }}
        MOUNT_FS: ${{ inputs.has-azure-credentials == 'true' && inputs.is_unit_test == 'false' }}
      run: |
        echo "::group::Start test container"
        if [[ "$MOUNT_FS" == "true" ]]; then
          VOLUME_ARGS="--volume /mnt/datadrive/TestData:/home/TestData"
        else
          VOLUME_ARGS=""
        fi

        cmd=$(cat <<RUN_TEST_EOF
        #!/bin/bash
        docker container rm -f test_container_${{ github.run_id }} || true
        docker run \
          --rm \
          -d \
          --name test_container_${{ github.run_id }} \
          --runtime=nvidia --gpus all \
          --shm-size=64g \
          --workdir /opt/megatron-lm/ \
          --volume ${{ github.workspace }}/Megatron-LM:/opt/megatron-lm/ \
          $VOLUME_ARGS \
          megatron-core \
          bash -c "sleep $(( ${{ inputs.timeout }} * 60 + 60 ))"
        RUN_TEST_EOF
        )

        echo "$cmd" | tee "retry_job.sh"
        bash retry_job.sh
        echo "::endgroup::"

    - name: Create run-script
      id: create
      shell: bash
      if: inputs.is_unit_test == 'true'
      run: |
        echo "::group::Create run-script"
        cmd=$(cat <<'RUN_TEST_EOF'
        #!/bin/bash

        docker exec -t test_container_${{ github.run_id }} bash -c '
          set -e
          bash /opt/megatron-lm/tests/unit_tests/run_ci_test.sh \
            --tag ${{ inputs.tag }} \
            --environment dev \
            --bucket ${{ inputs.bucket }}
        '

        RUN_TEST_EOF
        )
        echo "$cmd" | tee "job.sh"        
        echo "::endgroup::"

    - name: Set timeout
      shell: bash
      run: |
        echo "::group::Set timeout"
        echo "timeout_in_seconds=$(( ${{ inputs.timeout }} * 60 ))" | tee -a "$GITHUB_OUTPUT"
        echo "::endgroup::"

    - name: Run main script
      uses: nick-fields/retry@v3
      id: run-main-script
      with:
        timeout_seconds: ${{ steps.create.outputs.timeout_in_seconds }}
        max_attempts: 3
        shell: bash
        retry_on: timeout
        command: /bin/bash job.sh
        on_retry_command: /bin/bash retry_job.sh

    - name: Check result
      id: check
      shell: bash
      run: |
        echo "::group::Check result"

        docker exec test_container_${{ github.run_id }} /opt/venv/bin/coverage xml
        docker cp test_container_${{ github.run_id }}:/opt/megatron-lm/.coverage .coverage
        docker cp test_container_${{ github.run_id }}:/opt/megatron-lm/coverage.xml coverage.xml

        coverage_report=coverage-${{ inputs.is_unit_test == 'true' && 'unit-test' || 'e2e' }}-${{ github.run_id }}-$(uuidgen)
        echo "coverage_report=$coverage_report" | tee -a "$GITHUB_OUTPUT"

        EXIT_CODE=${{ steps.run-main-script.outputs.exit_code }}
        IS_SUCCESS=$([[ "$EXIT_CODE" -eq 0 ]] && echo "true" || echo "false")

        if [[ "$IS_SUCCESS" == "false" && "${{ inputs.is-optional }}" == "true" ]]; then
          echo "::warning:: Test failed, but displayed as successful because it is marked as optional."
          IS_SUCCESS=true
        fi

        if [[ "$IS_SUCCESS" == "false" ]]; then
          echo Test did not finish successfully.
          exit 1
        else
          docker exec -t test_container_${{ github.run_id }} /opt/venv/bin/coverage report -i
        fi

        exit $EXIT_CODE
        echo "::endgroup::"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: ${{ steps.check.outputs.coverage_report != 'none' }}
      with:
        name: ${{ steps.check.outputs.coverage_report }}
        path: |
          coverage.xml
          .coverage
        include-hidden-files: true

    - name: Container shutdown
      if: always()
      shell: bash
      run: |
        docker container rm -f test_container_${{ github.run_id }} || true
