# Copyright (c) 2019-2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build, test, and publish a PyPi wheel (to testpypi).

on:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"
      - "deploy-release/*"
  merge_group:
    types: [checks_requested]

defaults:
  run:
    shell: bash -x -e -u -o pipefail {0}

permissions:
  id-token: write
  contents: read

jobs:
  pre-flight:
    uses: NVIDIA-NeMo/FW-CI-templates/.github/workflows/_cicd_preflight.yml@v0.65.5
    if: github.repository == 'NVIDIA/Megatron-LM'

  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        include:
          - PACKAGE: megatron-core
            PLATFORM: arm64
            IMAGE: quay.io/pypa/manylinux_2_28_aarch64
          - PACKAGE: megatron-core
            PLATFORM: amd64
            IMAGE: quay.io/pypa/manylinux_2_28_x86_64
          - PACKAGE: megatron-fsdp
            IMAGE: quay.io/pypa/manylinux_2_28_x86_64
            PLATFORM: amd64
    runs-on: ${{ matrix.PLATFORM == 'amd64' && 'ubuntu-22.04' || 'ubuntu-22.04-arm' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build wheel
        env:
          PACKAGE: ${{ matrix.PACKAGE }}
          IMAGE: ${{ matrix.IMAGE }}
          PLATFORM: ${{ matrix.PLATFORM }}
        run: |
          PUBLISH_DRYRUN=yes

          if [ "$PACKAGE" = "megatron-core" ]; then
            ROOTDIR="megatron/core"
            BUILD_DIR="."
          elif [ "$PACKAGE" = "megatron-fsdp" ]; then
            ROOTDIR="megatron/core/distributed/fsdp/src/megatron_fsdp"
            BUILD_DIR="megatron/core/distributed/fsdp/src"
          else
            echo Unknown package: $PACKAGE
            exit 1
          fi

          if [ "$PUBLISH_DRYRUN" = "yes" ]; then
            PRE_RELEASE=$(sed -n "s/.*PRE_RELEASE = '\(.*\)'/\1/p" $ROOTDIR/package_info.py)
            sed -i "/^PRE_RELEASE/c\PRE_RELEASE = '${PRE_RELEASE}.dev$((RANDOM % 900000 + 100000))'" $ROOTDIR/package_info.py
          fi

          pushd $BUILD_DIR
            docker run --rm -v $(pwd):/workspace -w /workspace $IMAGE /opt/python/cp310-cp310/bin/python -m build
            docker run --rm -v $(pwd):/workspace -w /workspace $IMAGE /opt/python/cp311-cp311/bin/python -m build
            docker run --rm -v $(pwd):/workspace -w /workspace $IMAGE /opt/python/cp312-cp312/bin/python -m build
            docker run --rm -v $(pwd):/workspace -w /workspace $IMAGE /opt/python/cp313-cp313/bin/python -m build
            docker run --rm -v $(pwd):/workspace -w /workspace $IMAGE auditwheel repair dist/*.whl

            USE_DIST_DIR=0
            auditwheel repair dist/*.whl || USE_DIST_DIR=1
            docker run --rm -v $(pwd):/workspace -w /workspace $IMAGE auditwheel repair dist/*.whl || USE_DIST_DIR=1
            if [ "$USE_DIST_DIR" != "1" ]; then
              docker run --rm -v $(pwd):/workspace -w /workspace $IMAGE rm -rf dist/*.whl
            fi
          popd

          pushd $ROOTDIR
            EXPECTED_RELEASE_NUMBER=$(python -c "import package_info; print(package_info.__version__)")
          popd

          echo "EXPECTED_RELEASE_NUMBER_${PLATFORM}_${PACKAGE//-/_}=$EXPECTED_RELEASE_NUMBER" | tee -a "${GITHUB_OUTPUT}"
          mkdir -p wheelhouse/

          if [ "$PACKAGE" = "megatron-fsdp" ]; then
            cp -a megatron/core/distributed/fsdp/src/dist/* wheelhouse/
          fi

          ls -al wheelhouse/ || true
          ls -al dist/ || true

  build-test-publish-wheel-summary:
    needs: [pre-flight, build-wheels]
    if: |
      (
        needs.pre-flight.outputs.docs_only == 'true'
        || needs.pre-flight.outputs.is_merge_group == 'true'
        || needs.pre-flight.outputs.is_deployment_workflow == 'true'
        || always()
      )
      && github.repository == 'NVIDIA/Megatron-LM'
      && !cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Result
        run: |
          FAILED_JOBS=$(gh run view $GITHUB_RUN_ID --json jobs --jq '[.jobs[] | select(.status == "completed" and .conclusion != "success")] | length') || echo 0

          if [ "${FAILED_JOBS:-0}" -eq 0 ] || [ "$SKIPPING_IS_ALLOWED" == "true" ]; then
              echo "✅ All previous jobs completed successfully"
              exit 0
          else
              echo "❌ Found $FAILED_JOBS failed job(s)"
              # Show which jobs failed
              gh run view $GITHUB_RUN_ID --json jobs --jq '.jobs[] | select(.status == "completed" and .conclusion != "success") | .name'
              exit 1
          fi
