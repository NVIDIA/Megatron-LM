.test_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
      allow_failure: true
      when: always
    - when: always
  stage: test

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

test:build_image:
  extends: [.test_rules, .dind_rules]
  tags:
    - ${TAG}
  timeout: 45m
  parallel:
    matrix:
      - IMAGE: CI_MCORE_LTS_IMAGE
        FILE: Dockerfile.ci.lts
        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.01-py3
        TAG: mcore-docker-node-large
      - IMAGE: CI_MCORE_DEV_IMAGE
        FILE: Dockerfile.ci.dev
        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.07-py3
        TAG: mcore-docker-node-large
      - IMAGE: CI_NEMO_IMAGE
        FILE: Dockerfile.ci.lts
        BASE_IMAGE: nvcr.io/nvidian/nemo:nightly
        TAG: mcore-docker-node-large
      - IMAGE: LINTING_IMAGE
        FILE: Dockerfile.linting
        BASE_IMAGE: python:3.10
        TAG: mcore-docker-node-small
  variables:
    STAGE: main
  script:
    - apk add bash
    - |
      bash -c '
        set -x
        env
        eval "IMAGE=\$$IMAGE"
        
        docker buildx create --name container --driver=docker-container
      
        ADDITIONAL_PARAMS=()

        if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
          ADDITIONAL_PARAMS+=("--pull")
          ADDITIONAL_PARAMS+=("--cache-to type=registry,ref=${IMAGE}-buildcache:main")
        fi

        if [[ "$CI_COMMIT_BRANCH" == "ci-nightly-a100" ]]; then
          ADDITIONAL_PARAMS+=("-t ${IMAGE}:nightly")
        fi

        if [[ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]]; then
          MCORE_REF=$(echo ${CI_MERGE_REQUEST_REF_PATH} | sed 's/head$/merge/')
        else
          MCORE_REF=$CI_COMMIT_SHA
        fi

        DOCKER_BUILDKIT=1 docker build \
          --secret id=JET_INDEX_URLS \
          --target $STAGE \
          -f $FILE \
          -t ${IMAGE}:${CI_PIPELINE_ID} \
          --builder=container \
          --build-arg CACHEBUST=$(cat /proc/sys/kernel/random/uuid) \
          --build-arg MCORE_REPO=${CI_REPOSITORY_URL} \
          --build-arg MCORE_REF=${MCORE_REF} \
          --build-arg MCORE_BACKWARDS_REF="core_r0.9.0" \
          --cache-to type=registry,ref=${IMAGE}-buildcache:${CI_PIPELINE_ID} \
          --cache-to type=registry,ref=${IMAGE}-buildcache:${CI_MERGE_REQUEST_IID:-noop} \
          --cache-from type=registry,ref=${IMAGE}-buildcache:main \
          --cache-from type=registry,ref=${IMAGE}-buildcache:${CI_PIPELINE_ID} \
          --cache-from type=registry,ref=${IMAGE}-buildcache:${CI_MERGE_REQUEST_IID:-noop} \
          --build-arg FROM_IMAGE_NAME=$BASE_IMAGE \
          --push \
          ${ADDITIONAL_PARAMS[@]} .
        '
  retry:
    max: 2

.unit_tests:
  extends: [.test_rules, .dind_rules]
  needs: 
    - test:build_image
    - test:docs_build
    - test:formatting
    - test:copyright
    - test:secret_detection
  timeout: 180m
  tags: [8xL40S]
  variables:
    GIT_STRATEGY: none
  script:
    - if [ $UNIT_TEST_REPEAT -eq 0 ]; then exit 0; fi;
    - docker run --name mcore_ci_${CI_PIPELINE_ID} -d --rm -e TAG -e UNIT_TEST_REPEAT -e UNIT_TEST_TIMEOUT --gpus all --ipc=host --ulimit memlock=-1 --ulimit stack=67108864 ${IMAGE}:${CI_PIPELINE_ID} bash -c "sleep $(( ${UNIT_TEST_TIMEOUT} * 60 + 60 ))"
    - |
      docker exec mcore_ci_${CI_PIPELINE_ID} bash -c '
        set -e
        
        MCORE_DIR=$([[ "$TAG" == "latest" ]] && echo "" || echo "-$TAG/")

        cd /opt/megatron-lm$MCORE_DIR;

        for i in $(seq $UNIT_TEST_REPEAT); do
          SEED=$((RANDOM % 9000 + 1000));
          ARGS=()
          if [[ $TAG != latest ]]; then
            ARGS+=(-m "not internal and not flaky and not flaky_in_dev")
          else
            ARGS+=(-m "not flaky and not flaky_in_dev")
          fi
          timeout ${UNIT_TEST_TIMEOUT}m torchrun --nproc_per_node=8 -m pytest --random-order --random-order-seed ${SEED} -xvs --cov-report=term --cov-report=html --cov=megatron/core --no-cov-on-fail "${ARGS[@]}" tests/unit_tests
        done
      '
  after_script:
    - docker container stop mcore_ci_${CI_PIPELINE_ID} || true
  artifacts:
    paths:
      - coverage
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
      allow_failure: true
      when: always
    - when: always

test:pyt(LTS)_mcore(latest):
  extends: [.unit_tests]
  variables:
    TAG: latest
    IMAGE: ${CI_MCORE_LTS_IMAGE}

test:pyt(LTS)_mcore(0.9.0):
  extends: [.unit_tests]
  variables:
    TAG: core_r0.9.0
    IMAGE: ${CI_MCORE_LTS_IMAGE}

test:pyt(DEV)_mcore(latest):
  extends: [.unit_tests]
  variables:
    TAG: latest
    IMAGE: ${CI_MCORE_DEV_IMAGE}

test:pyt(DEV)_mcore(0.9.0):
  extends: [.unit_tests]
  variables:
    TAG: core_r0.9.0
    IMAGE: ${CI_MCORE_DEV_IMAGE}

test:notify:
  extends: [.test_rules]
  image: ${CI_MCORE_LTS_IMAGE}:${CI_PIPELINE_ID}
  needs:
    - test:pyt(LTS)_mcore(latest)
    - test:pyt(DEV)_mcore(latest)
    - test:pyt(LTS)_mcore(0.9.0)
    - test:pyt(DEV)_mcore(0.9.0)
  tags:
    - mcore-docker-node-small
  script:
    - env
    - export WEBHOOK_URL=${MCORE_NOTIFICATION_HOOK}
    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
    - export GITLAB_ENDPOINT
    - export DATE=$(date +"%Y-%m-%d")
    - bash tests/functional_tests/shell_test_utils/notify_unit_tests.sh ${CI_PIPELINE_ID}
  artifacts:
    when: always
    paths:
      - scripts
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "ci-unit-test-extended"
      when: always
    - when: never

test:docs_build:
  extends: [.test_rules]
  image: ${CI_MCORE_LTS_IMAGE}:${CI_PIPELINE_ID}
  tags: [mcore-docker-node-small]
  needs: [test:build_image]
  script:
    - cd ..
    - rm -rf documentation && git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/nemo-megatron-core-tme/documentation.git
    - mv megatron-lm/ documentation/
    - cd documentation/
    - ./repo docs

test:formatting:
  extends: [.test_rules]
  image: ${LINTING_IMAGE}:${CI_PIPELINE_ID}
  tags: [mcore-docker-node-small]
  needs: [test:build_image]
  script:
    - env
    - git fetch origin main
    - BASE_REF="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" CHECK_ONLY=true SKIP_DOCS=$([[ "$CI_MERGE_REQUEST_LABELS" == *"Skip docs"* ]] && echo "true" || echo "false") bash tools/autoformat.sh

test:copyright:
  extends: [.test_rules]
  tags: [mcore-docker-node-small]
  image: ${CI_MCORE_LTS_IMAGE}:${CI_PIPELINE_ID}
  needs: [test:build_image]
  script:
    - git fetch origin main
    - bash tools/copyright.sh

test:secret_detection:
  tags: [mcore-docker-node-small]
  extends: ".secret-analyzer"
  variables:
    GIT_DEPTH: 0
    SECRET_DETECTION_LOG_OPTIONS: ${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - apk add jq
    - /analyzer run
    - |
      if [[ $(cat gl-secret-detection-report.json | jq '.vulnerabilities | length > 0') == true ]]; then
        echo "Atleast one vulnerability has been found"
        cat gl-secret-detection-report.json | jq '.'
        exit 1
      fi