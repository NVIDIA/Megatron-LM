.test_rules:
  rules:
    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
      allow_failure: true
      when: on_success
    - when: on_success
  stage: test

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

test:build_image:
  extends: [.test_rules, .dind_rules]
  tags:
    - arch/amd64
    - origin/jet-fleet
    - env/prod
    - ${TAG}
  services:
    - name: docker:24.0.5-dind
      variables:
        HEALTHCHECK_TCP_PORT: '2376'
  timeout: 45m
  parallel:
    matrix:
      - IMAGE: CI_MCORE_LTS_IMAGE
        FILE: Dockerfile.ci.lts
        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.01-py3
      - IMAGE: CI_MCORE_DEV_IMAGE
        FILE: Dockerfile.ci.dev
        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.07-py3
      - IMAGE: CI_NEMO_IMAGE
        FILE: Dockerfile.ci.lts
        BASE_IMAGE: nvcr.io/nvidian/nemo:nightly
      - IMAGE: UTILITY_IMAGE
        FILE: Dockerfile.linting
        BASE_IMAGE: python:3.10
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: '/certs'
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: '$DOCKER_TLS_CERTDIR/client'
    TAG: purpose/builder-large
    STAGE: jet
  script:
    - apk add bash
    - |
      bash -c '
        set -x
        env
        eval "IMAGE=\$$IMAGE"
        
        docker context create tls-environment
        docker buildx create --name container --driver=docker-container --use tls-environment

        ADDITIONAL_PARAMS=()

        if [[ "$CI_COMMIT_BRANCH" == "ci-rebuild-mcore-nemo-image" || "$CI_COMMIT_BRANCH" == "main" ]]; then
          ADDITIONAL_PARAMS+=("--pull")
          ADDITIONAL_PARAMS+=("--cache-to type=registry,ref=${IMAGE}-buildcache:main")
        fi

        if [[ "$CI_COMMIT_BRANCH" == "ci-nightly-a100" ]]; then
          ADDITIONAL_PARAMS+=("-t ${IMAGE}:nightly")
        fi

        echo $(git rev-parse HEAD)

        DOCKER_BUILDKIT=1 docker build \
          --secret id=JET_INDEX_URLS \
          --target $STAGE \
          -f $FILE \
          -t ${IMAGE}:${CI_PIPELINE_ID} \
          --builder=container \
          --build-arg CACHEBUST=$(cat /proc/sys/kernel/random/uuid) \
          --build-arg MCORE_REPO=${CI_REPOSITORY_URL} \
          --build-arg MCORE_REF=$CI_COMMIT_SHA \
          --build-arg MCORE_BACKWARDS_REF="core_r0.9.0" \
          --cache-to type=registry,ref=${IMAGE}-buildcache:${CI_PIPELINE_ID} \
          --cache-to type=registry,ref=${IMAGE}-buildcache:${CI_MERGE_REQUEST_IID:-noop} \
          --cache-from type=registry,ref=${IMAGE}-buildcache:main \
          --cache-from type=registry,ref=${IMAGE}-buildcache:${CI_PIPELINE_ID} \
          --cache-from type=registry,ref=${IMAGE}-buildcache:${CI_MERGE_REQUEST_IID:-noop} \
          --build-arg FROM_IMAGE_NAME=$BASE_IMAGE \
          --push \
          ${ADDITIONAL_PARAMS[@]} .
        '
  retry:
    max: 2

test:unit_tests_configure:
  extends: [.test_rules]
  needs:
    - test:build_image
  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
  tags: [mcore-docker-node-small]
  before_script:
    - git rm -r tests/test_utils/local_recipes || true
    - git submodule add --force https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/ADLR/megatron-lm-convergence-tests.git tests/test_utils/local_recipes
    - ls tests/test_utils/local_recipes
  script:
    - set -x
    - |
      A100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_A100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_A100 || echo $DEFAULT_A100_CLUSTER)
      H100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_H100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_H100 || echo $DEFAULT_H100_CLUSTER)
    - |
      export PYTHONPATH=$(pwd)
      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
        --scope "unit-tests" \
        --environment lts \
        --n-repeat "${UNIT_TEST_REPEAT}" \
        --time-limit "$(( UNIT_TEST_TIMEOUT * 60 ))" \
        --test-cases "all" \
        --a100-cluster "dgxa100_dracooci-ord" \
        --h100-cluster "dgxh100_coreweave" \
        --container-image ${UTILITY_IMAGE} \
        --container-tag ${CI_PIPELINE_ID} \
        --dependent-job "test:unit_tests_configure" \
        --tag "legacy" \
        --output-path "unit-test-job-lts-legacy.yaml"
    - |
      export PYTHONPATH=$(pwd)
      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
        --scope "unit-tests" \
        --environment lts \
        --n-repeat "${UNIT_TEST_REPEAT}" \
        --time-limit "$(( UNIT_TEST_TIMEOUT * 60 ))" \
        --test-cases "all" \
        --a100-cluster "dgxa100_dracooci-ord" \
        --h100-cluster "dgxh100_coreweave" \
        --container-image ${UTILITY_IMAGE} \
        --container-tag ${CI_PIPELINE_ID} \
        --dependent-job "test:unit_tests_configure" \
        --tag "latest" \
        --output-path "unit-test-job-lts-latest.yaml"
    - |
      export PYTHONPATH=$(pwd)
      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
        --scope "unit-tests" \
        --environment dev \
        --n-repeat "${UNIT_TEST_REPEAT}" \
        --time-limit "$(( UNIT_TEST_TIMEOUT * 60 ))" \
        --test-cases "all" \
        --a100-cluster "dgxa100_dracooci-ord" \
        --h100-cluster "dgxh100_coreweave" \
        --container-image ${UTILITY_IMAGE} \
        --container-tag ${CI_PIPELINE_ID} \
        --dependent-job "test:unit_tests_configure" \
        --tag "legacy" \
        --output-path "unit-test-job-dev-legacy.yaml"
    - |
      export PYTHONPATH=$(pwd)
      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
        --scope "unit-tests" \
        --environment dev \
        --n-repeat "${UNIT_TEST_REPEAT}" \
        --time-limit "$(( UNIT_TEST_TIMEOUT * 60 ))" \
        --test-cases "all" \
        --a100-cluster "dgxa100_dracooci-ord" \
        --h100-cluster "dgxh100_coreweave" \
        --container-image ${UTILITY_IMAGE} \
        --container-tag ${CI_PIPELINE_ID} \
        --dependent-job "test:unit_tests_configure" \
        --tag "latest" \
        --output-path "unit-test-job-dev-latest.yaml"

  artifacts:
    paths:
      - unit-test-job-dev-legacy.yaml
      - unit-test-job-dev-latest.yaml
      - unit-test-job-lts-legacy.yaml
      - unit-test-job-lts-latest.yaml
      - tests/test_utils/local_recipes

.unit_tests_run:
  needs:
    - test:formatting
    - test:copyright
    - job: test:secret_detection
      optional: true
    - test:unit_tests_configure
  extends: [.test_rules]
  trigger:
    include:
      - artifact: unit-test-job-$ENVIRONMENT-$TAG.yaml
        job: test:unit_tests_configure
    strategy: depend
  variables:
    RO_API_TOKEN: $PAT
    CONTAINER_TAG: $CI_PIPELINE_ID
    CI_MCORE_LTS_IMAGE: $CI_MCORE_LTS_IMAGE
    GITLAB_ENDPOINT: $GITLAB_ENDPOINT
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  inherit:
    variables: true
  rules:
    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
      allow_failure: true
      when: on_success
    - if: $UNIT_TEST == 'yes' && $UNIT_TEST_REPEAT != '0'
      when: on_success

test:unit_tests_pyt(DEV)_mcore(legacy):
  extends: [.unit_tests_run]
  variables:
    ENVIRONMENT: dev
    TAG: legacy

test:unit_tests_pyt(LTS)_mcore(legacy):
  extends: [.unit_tests_run]
  variables:
    ENVIRONMENT: dev
    TAG: legacy

test:unit_tests_pyt(DEV)_mcore(latest):
  extends: [.unit_tests_run]
  variables:
    ENVIRONMENT: lts
    TAG: latest

test:unit_tests_pyt(LTS)_mcore(latest):
  extends: [.unit_tests_run]
  variables:
    ENVIRONMENT: lts
    TAG: latest

test:notify_unit_tests:
  extends: [.test_rules]
  image: badouralix/curl-jq
  needs:
    - test:unit_tests_pyt(DEV)_mcore(latest)
    - test:unit_tests_pyt(LTS)_mcore(latest)
  tags:
    - mcore-docker-node-small
  script:
    - apk add bash
    - apk add --update coreutils
    - env
    - export WEBHOOK_URL=${MCORE_NOTIFICATION_HOOK}
    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
    - export GITLAB_ENDPOINT
    - export CONTEXT="unit-tests-extended"
    - export DATE=$(date +"%Y-%m-%d")
    - bash tests/test_utils/shell_scripts/notify.sh ${CI_PIPELINE_ID} "test:unit_tests_pyt"
  artifacts:
    when: always
    paths:
      - scripts
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "ci-unit-test-extended"
      when: always
    - when: never

test:docs_build:
  extends: [.test_rules]
  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
  tags: [mcore-docker-node-small]
  needs: [test:build_image]
  script:
    - cd ..
    - rm -rf documentation && git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/nemo-megatron-core-tme/documentation.git
    - mv megatron-lm/ documentation/
    - cd documentation/
    - ./repo docs

test:formatting:
  extends: [.test_rules]
  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
  tags: [mcore-docker-node-small]
  needs: [test:build_image]
  variables:
    GIT_STRATEGY: 'clone'
  script:
    - |
      if [[ "$CI_PIPELINE_SOURCE" != "merge_request_event" ]]; then
        exit 0
      fi
    - set +e
    - git fetch origin $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - git fetch origin main:main
    - git checkout $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - |
      if [[ "$CI_MERGE_REQUEST_PROJECT_PATH" == "$CI_MERGE_REQUEST_SOURCE_PROJECT_PATH" ]]; then 
        bash tools/autoformat.sh
        set -e
        git config --global user.email "mcore-bot@nvidia.com"
        git config --global user.name "Mcore Bot"
        git remote set-url origin "https://gitlab-ci-token:${PAT}@${GITLAB_ENDPOINT}/$CI_PROJECT_NAMESPACE/megatron-lm.git"
        git add -A .
        git commit -m "chore: Format files" || true
        git push -u origin $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      fi
    - env
    - BASE_REF="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" CHECK_ONLY=true SKIP_DOCS=$([[ "$CI_MERGE_REQUEST_LABELS" == *"Skip docs"* ]] && echo "true" || echo "false") bash tools/autoformat.sh

test:copyright:
  extends: [.test_rules]
  tags: [mcore-docker-node-small]
  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
  needs: [test:build_image]
  script:
    - git fetch origin main
    - bash tools/copyright.sh

# Override from template
secret_detection:
  rules:
    - when: never

# Inherit and modify template
test:secret_detection:
  tags: [mcore-docker-node-small]
  extends: ['.secret-analyzer']
  variables:
    GIT_DEPTH: 0
    SECRET_DETECTION_LOG_OPTIONS: ${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - when: never
  script:
    - apk add jq
    - /analyzer run
    - |
      if [[ $(cat gl-secret-detection-report.json | jq '.vulnerabilities | length > 0') == true ]]; then
        echo "Atleast one vulnerability has been found"
        cat gl-secret-detection-report.json | jq '.'
        exit 1
      fi

test:pypi_build_wheel:
  extends: [.test_rules]
  image:
    name: quay.io/pypa/manylinux_2_28_x86_64
    entrypoint: ['']
  tags: [mcore-docker-node-small]
  variables:
    PUBLISH_DRYRUN: 'yes'
    PY_ENV: pytorch:24.07
  script:
    - echo $PUBLISH_DRYRUN
    - >
      if [ "$PUBLISH_DRYRUN" = "yes" ]; then
        PRE_RELEASE=$(sed -n "s/.*PRE_RELEASE = '\(.*\)'/\1/p" megatron/core/package_info.py)
        sed -i "/^PRE_RELEASE/c\PRE_RELEASE = '${PRE_RELEASE}.dev$((RANDOM % 900000 + 100000))'" megatron/core/package_info.py 
      fi
    - /opt/python/cp310-cp310/bin/python -m build
    - /opt/python/cp311-cp311/bin/python -m build
    - auditwheel repair dist/*.whl
  artifacts:
    paths:
      - megatron/core/package_info.py
      - wheelhouse/

test:pypi_test_wheel:
  extends: [.test_rules]
  image: nvcr.io/nvidia/pytorch:24.01-py3
  needs: [test:pypi_build_wheel]
  tags: [mcore-docker-node-small]
  variables:
    PUBLISH_DRYRUN: 'yes'
  script:
    - EXPECTED_RELEASE_NUMBER=$(python -c "from megatron import core; print(core.__version__)")
    - rm -rf megatron
    - pip install wheelhouse/*cp310*.whl

    - RELEASE_NUMBER=$(python -c "from megatron import core; print(core.__version__)")
    - >
      echo "$EXPECTED_RELEASE_NUMBER" == "$RELEASE_NUMBER"
    - test "$EXPECTED_RELEASE_NUMBER" == "$RELEASE_NUMBER"
    - echo "RELEASE_NUMBER=$EXPECTED_RELEASE_NUMBER" | tee -a build.env
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - wheelhouse/

test:pypi_push_wheel:
  extends: [.test_rules]
  image: python:3.10
  tags: [mcore-docker-node-small]
  needs: [test:pypi_test_wheel]
  variables:
    PUBLISH_DRYRUN: 'yes'
  timeout: 3m
  script:
    - >
      if [ "$PUBLISH_DRYRUN" = "yes" ]; then
        REPOSITORY=testpypi
        export TWINE_USERNAME=$TWINE_TEST_USERNAME
        export TWINE_PASSWORT=$TWINE_TEST_PASSWORD
      else
        REPOSITORY=pypi
        export TWINE_USERNAME=$TWINE_PROD_USERNAME
        export TWINE_PASSWORT=$TWINE_PROD_PASSWORD
      fi
    - pip install twine
    - >
      for i in 1 2 3 4 5; do 
        twine upload --verbose -u $TWINE_USERNAME -p $TWINE_PASSWORT --repository $REPOSITORY wheelhouse/* && break || sleep $(( 60*2**i )); 
      done
  rules:
    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
      allow_failure: true
      when: on_success
    - when: on_success
      allow_failure: true

test:gh_release:
  extends: [.test_rules]
  needs: [test:pypi_test_wheel]
  tags: [mcore-docker-node-small]
  image: badouralix/curl-jq
  variables:
    PUBLISH_DRYRUN: 'yes'
  script:
    - NAME="NVIDIA Megatron Core $RELEASE_NUMBER"
    - CHANGELOG=$(awk '/^## '"$NAME"'/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md)
    - CHANGELOG=$(echo "$CHANGELOG" | sed '/./!d')
    - >
      PAYLOAD=$(jq -nc \
                  --arg CI_COMMIT_BRANCH "$CI_COMMIT_BRANCH" \
                  --arg NAME "$NAME" \
                  --arg BODY "$CHANGELOG" \
                  '{
                      "tag_name": $CI_COMMIT_BRANCH,
                      "target_commitish": $CI_COMMIT_BRANCH,
                      "name": $NAME,
                      "body": $BODY,
                      "draft": false,
                      "prerelease": false,
                      "generate_release_notes": false
                  }'
              )
    - >
      CMD=$(echo curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GH_TOKEN" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/NVIDIA/Megatron-LM/releases \
        -d "$PAYLOAD"
      )

      if [[ "$PUBLISH_DRYRUN" == "yes" ]]; then
        echo "$CMD"
      else
        eval "$CMD"
      fi

test:notify_release:
  needs: [test:pypi_test_wheel, test:pypi_push_wheel, test:gh_release]
  extends: [.test_rules]
  image: badouralix/curl-jq
  tags: [mcore-docker-node-small]
  variables:
    PUBLISH_DRYRUN: 'yes'
  script:
    - URL="https://github.com/NVIDIA/Megatron-LM/releases/tag/core_r$RELEASE_NUMBER"
    - >
      MESSAGE='{
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                    "text": "Releasebot 🤖: Megatron-Core released <'$URL'|core_r'"$RELEASE_NUMBER"'> 🚀"
              }
            }
          ]
        }'
    - echo "$MESSAGE"
    - >
      CMD=$(echo curl \
        -X POST \
        -H "Content-type: application/json" \
        --data "$MESSAGE" ${MCORE_NOTIFICATION_HOOK_MAIN}
      )

      if [[ "$PUBLISH_DRYRUN" == "yes" ]]; then
        echo "$CMD"
      else
        eval "$CMD"
      fi
      