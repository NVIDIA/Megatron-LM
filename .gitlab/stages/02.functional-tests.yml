.functional_tests_rules:
  stage: functional_tests
  rules:
    - if: $FUNCTIONAL_TEST == "yes" && ($CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true")
      allow_failure: true
    - if: $FUNCTIONAL_TEST == "yes"
    - when: never

default:
  id_tokens:
    VAULT_JWT_TOKEN:
      aud: https://stg.vault.nvidia.com

include:
  - project: dl/jet/gitlab-templates
    ref: main
    file: downstreams.yml

functional:build_image:
  extends: [test:build_image, .functional_tests_rules]
  needs:
    - test:build_image
    - test:docs_build
    - test:formatting
    - test:copyright
  variables:
    STAGE: jet
    TAG: purpose/builder-small

functional:configure:
  needs:
    - functional:build_image
    - job: test:pyt(LTS)_mcore(latest)
      optional: true
    - job: test:pyt(DEV)_mcore(latest)
      optional: true
  extends: [.functional_tests_rules]
  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
  tags: [mcore-docker-node-small]
  before_script:
    - git rm -r tests/functional_tests/local_recipes || true
    - git submodule add --force https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/ADLR/megatron-lm-convergence-tests.git tests/functional_tests/local_recipes
    - ls tests/functional_tests/local_recipes
  script:
    - set -x
    - |
      A100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_A100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_A100 || echo $DEFAULT_A100_CLUSTER)
      H100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_H100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_H100 || echo $DEFAULT_H100_CLUSTER)
    - |
      if [[ "$FUNCTIONAL_TEST_SCOPE" == "release" || "$FUNCTIONAL_TEST_SCOPE" == "pre-release" ]]; then
        FUNCTIONAL_TEST_NAME=$(eval echo $FUNCTIONAL_TEST_NAME)
        RELEASE_ARGS=(
          "--run-name"
          $FUNCTIONAL_TEST_NAME
          "--wandb-experiment"
          $(echo $FUNCTIONAL_TEST_NAME | tr '/' '-')
        )
      else
        RELEASE_ARGS=()
      fi
    - |
      export PYTHONPATH=$(pwd)
      python tests/functional_tests/python_test_utils/jet/generate_jet_trigger_job.py \
        --scope $FUNCTIONAL_TEST_SCOPE \
        --environment dev \
        --n-repeat "$FUNCTIONAL_TEST_REPEAT" \
        --time-limit "$FUNCTIONAL_TEST_TIME_LIMIT" \
        --test-cases $FUNCTIONAL_TEST_CASES \
        --a100-cluster $A100_CLUSTER \
        --h100-cluster $H100_CLUSTER \
        --container-image ${UTILITY_IMAGE} \
        --container-tag ${CI_PIPELINE_ID} \
        --output-path "jet-trigger-job-dev.yaml" \
        ${RELEASE_ARGS[@]}
    - |
      export PYTHONPATH=$(pwd)
      python tests/functional_tests/python_test_utils/jet/generate_jet_trigger_job.py \
        --scope $FUNCTIONAL_TEST_SCOPE \
        --environment lts \
        --n-repeat "$FUNCTIONAL_TEST_REPEAT" \
        --time-limit "$FUNCTIONAL_TEST_TIME_LIMIT" \
        --test-cases $FUNCTIONAL_TEST_CASES \
        --a100-cluster $A100_CLUSTER \
        --h100-cluster $H100_CLUSTER \
        --container-image ${UTILITY_IMAGE} \
        --container-tag ${CI_PIPELINE_ID} \
        --output-path "jet-trigger-job-lts.yaml" \
        ${RELEASE_ARGS[@]}
  artifacts:
    paths:
      - jet-trigger-job-lts.yaml
      - jet-trigger-job-dev.yaml
      - tests/functional_tests/local_recipes

.run:
  stage: functional_tests
  needs: [functional:configure]
  extends: [.functional_tests_rules]
  trigger:
    include:
      - artifact: jet-trigger-job-$ENVIRONMENT.yaml
        job: functional:configure
    strategy: depend
  variables:
    RO_API_TOKEN: $PAT
    CONTAINER_TAG: $CI_PIPELINE_ID
    CI_MCORE_LTS_IMAGE: $CI_MCORE_LTS_IMAGE
    GITLAB_ENDPOINT: $GITLAB_ENDPOINT
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  inherit:
    variables: true

functional:run_lts:
  extends: [.run]
  variables:
    ENVIRONMENT: lts

functional:run_dev:
  extends: [.run]
  variables:
    ENVIRONMENT: dev

.notify:
  extends: [.functional_tests_rules]
  image: badouralix/curl-jq
  needs:
    - functional:run_lts
    - functional:run_dev
  tags:
    - mcore-docker-node-small
  variables:
    WEBHOOK_URL: ${MCORE_NOTIFICATION_HOOK}
    RO_API_TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}
    CONTEXT: $FUNCTIONAL_TEST_SCOPE
  script:
    - apk add bash
    - apk add --update coreutils
    - env
    - export WEBHOOK_URL=${MCORE_NOTIFICATION_HOOK}
    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
    - export GITLAB_ENDPOINT
    - export CONTEXT=$FUNCTIONAL_TEST_SCOPE
    - export DATE=$(date +"%Y-%m-%d")
    - bash tests/functional_tests/shell_test_utils/notify.sh ${CI_PIPELINE_ID} ${ENVIRONMENT}
  artifacts:
    when: always
    paths:
      - scripts
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $FUNCTIONAL_TEST == "yes"
      when: always
    - when: never

functional:notify-lts:
  extends: [.notify]
  variables:
    ENVIRONMENT: lts

functional:notify-dev:
  extends: [.notify]
  variables:
    ENVIRONMENT: dev
