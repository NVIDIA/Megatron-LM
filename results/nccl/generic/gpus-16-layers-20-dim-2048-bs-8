Warning: Permanently added '[192.168.0.71]:43529' (ECDSA) to the list of known hosts.
Warning: Permanently added '[192.168.0.87]:46844' (ECDSA) to the list of known hosts.
Warning: Permanently added '[192.168.0.34]:45820' (ECDSA) to the list of known hosts.
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:Detected CUDA files, patching ldflags
[1,5]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,5]<stdout>:Building extension module transformer_inference...
[1,5]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)[1,5]<stdout>:
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:[1/2] c++ -MMD -MF pt_binding.o.d -DTORCH_EXTENSION_NAME=transformer_inference -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1013\" -I/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/includes -isystem /opt/conda/lib/python3.8/site-packages/torch/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/torch/csrc/api/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/TH -isystem /opt/conda/lib/python3.8/site-packages/torch/include/THC -isystem /usr/local/cuda/include -isystem /opt/conda/include/python3.8 -D_GLIBCXX_USE_CXX11_ABI=1 -fPIC -std=c++14 -O3 -std=c++14 -g -Wno-reorder -c /home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp -o pt_binding.o 
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp: In instantiation of ‘std::vector<at::Tensor> ds_softmax_context(at::Tensor&, at::Tensor&, size_t, float, bool, bool, bool, int, bool, bool, size_t) [with T = float; size_t = long unsigned int]’:
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:1212:99:   required from here
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:45: warning: narrowing conversion of ‘heads’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:  600 |     auto output = at::empty({query.size(0), heads, seq_len, hidden_dim / heads}, options);
[1,5]<stdout>:      |                                             ^~~~~
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:45: warning: narrowing conversion of ‘heads’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:52: warning: narrowing conversion of ‘seq_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:  600 |     auto output = at::empty({query.size(0), heads, seq_len, hidden_dim / heads}, options);
[1,5]<stdout>:      |                                                    ^~~~~~~
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:52: warning: narrowing conversion of ‘seq_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:72: warning: narrowing conversion of ‘(hidden_dim / heads)’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:  600 |     auto output = at::empty({query.size(0), heads, seq_len, hidden_dim / heads}, options);
[1,5]<stdout>:      |                                                             ~~~~~~~~~~~^~~~~~~
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:72: warning: narrowing conversion of ‘(hidden_dim / heads)’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp: In instantiation of ‘std::vector<at::Tensor> ds_softmax_context(at::Tensor&, at::Tensor&, size_t, float, bool, bool, bool, int, bool, bool, size_t) [with T = __half; size_t = long unsigned int]’:
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:1215:49:   required from here
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:45: warning: narrowing conversion of ‘heads’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:  600 |     auto output = at::empty({query.size(0), heads, seq_len, hidden_dim / heads}, options);
[1,5]<stdout>:      |                                             ^~~~~
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:45: warning: narrowing conversion of ‘heads’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepsp[1,5]<stdout>:eed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:52: warning: narrowing conversion of ‘seq_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:  600 |     auto output = at::empty({query.size(0), heads, seq_len, hidden_dim / heads}, options);
[1,5]<stdout>:      |                                                    ^~~~~~~
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:52: warning: narrowing conversion of ‘seq_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:72: warning: narrowing conversion of ‘(hidden_dim / heads)’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:  600 |     auto output = at::empty({query.size(0), heads, seq_len, hidden_dim / heads}, options);
[1,5]<stdout>:      |                                                             ~~~~~~~~~~~^~~~~~~
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:600:72: warning: narrowing conversion of ‘(hidden_dim / heads)’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp: In instantiation of ‘void attention_unfused(T*, at::Tensor&, at::Tensor&, size_t&, size_t&, size_t&, size_t&, float&, bool, bool, bool, int, bool) [with T = float; size_t = long unsigned int]’:
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:601:25:   required from ‘std::vector<at::Tensor> ds_softmax_context(at::Tensor&, at::Tensor&, size_t, float, bool, bool, bool, int, bool, bool, size_t) [with T = float; size_t = long unsigned int]’
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:1212:99:   required from here
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘bsz’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:  515 |     auto attn_score = at::zeros({bsz, heads, seq_len, soft_len}, options);
[1,5]<stdout>:      |                       ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘bsz’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘heads’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘heads’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘seq_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘seq_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘soft_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘soft_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp: In instantiation of ‘void attention_unfused(T*, at::Tensor&, at::Tensor&, size_t&, size_t&, size_t&, size_t&, float&, bool, bool, bool, int, bool) [with T = __half; size_t = long[1,5]<stdout>: unsigned int]’:
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:601:25:   required from ‘std::vector<at::Tensor> ds_softmax_context(at::Tensor&, at::Tensor&, size_t, float, bool, bool, bool, int, bool, bool, size_t) [with T = __half; size_t = long unsigned int]’
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:1215:49:   required from here
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘bsz’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘bsz’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘heads’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘heads’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘seq_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘seq_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘soft_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/pt_binding.cpp:515:32: warning: narrowing conversion of ‘soft_len’ from ‘size_t’ {aka ‘long unsigned int’} to ‘long int’ [-Wnarrowing]
[1,5]<stdout>:[2/2] c++ pt_binding.o gelu.cuda.o normalize.cuda.o softmax.cuda.o dequantize.cuda.o transform.cuda.o custom_gemm.cuda.o -shared -L/opt/conda/lib/python3.8/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/usr/local/cuda/lib64 -lcudart -o transformer_inference.so
[1,5]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Time to load transformer_inference op: 23.73870539665222 seconds
[1,6]<stdout>:Time to load transformer_inference op: 23.728477954864502 seconds
[1,5]<stdout>:Time to load transformer_inference op: 23.9970920085907 seconds
[1,3]<stdout>:Time to load transformer_inference op: 23.75051760673523 seconds
[1,7]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 23.91011953353882 seconds
[1,0]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 23.898459672927856 seconds
[1,4]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:Time to load transformer_inference op: 23.884396076202393 seconds
[1,1]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Time to load transformer_inference op: 23.86526918411255 seconds
[1,0]<stdout>:using world size: 16, data-parallel-size: 16, tensor-model-parallel size: 1, pipeline-model-parallel size: 1 
[1,0]<stdout>:WARNING: overriding default arguments for tokenizer_type:GPT2BPETokenizer                        with tokenizer_type:GPT2BPETokenizer
[1,0]<stdout>:setting global batch size to 128[1,0]<stdout>:
[1,0]<stdout>:using torch.float16 for parameters ...[1,0]<stdout>:
[1,0]<stdout>:------------------------ arguments ------------------------
[1,0]<stdout>:  accumulate_allreduce_grads_in_fp32 .............. False
[1,0]<stdout>:  adam_beta1 ...................................... 0.9
[1,0]<stdout>:  adam_beta2 ...................................... 0.999
[1,0]<stdout>:  adam_eps ........................................ 1e-08
[1,0]<stdout>:  adlr_autoresume ................................. False
[1,0]<stdout>:  adlr_autoresume_interval ........................ 1000
[1,0]<stdout>:  apply_query_key_layer_scaling ................... True
[1,0]<stdout>:  apply_residual_connection_post_layernorm ........ False
[1,0]<stdout>:  attention_dropout ............................... 0.1
[1,0]<stdout>:  attention_softmax_in_fp32 ....................... False
[1,0]<stdout>:  bert_binary_head ................................ True
[1,0]<stdout>:  bert_load ....................................... None
[1,0]<stdout>:  bf16 ............................................ False
[1,0]<stdout>:  bias_dropout_fusion ............................. True
[1,0]<stdout>:  bias_gelu_fusion ................................ True
[1,0]<stdout>:  biencoder_projection_dim ........................ 0
[1,0]<stdout>:  biencoder_shared_query_context_model ............ False
[1,0]<stdout>:  block_data_path ................................. None
[1,0]<stdout>:  checkpoint_activations .......................... False
[1,0]<stdout>:  checkpoint_in_cpu ............................... False
[1,0]<stdout>:  checkpoint_num_layers ........................... 1
[1,0]<stdout>:  clip_grad ....................................... 1.0
[1,0]<stdout>:  consumed_train_samples .......................... 0[1,0]<stdout>:
[1,0]<stdout>:  consumed_train_tokens ........................... 0
[1,0]<stdout>:  consumed_valid_samples .......................... 0
[1,0]<stdout>:  contigious_checkpointing ........................ False
[1,0]<stdout>:  cpu_optimizer ................................... False
[1,0]<stdout>:  cpu_torch_adam .................................. False[1,0]<stdout>:
[1,0]<stdout>:  curriculum_learning ............................. False[1,0]<stdout>:
[1,0]<stdout>:  data_impl ....................................... infer
[1,0]<stdout>:  data_parallel_size .............................. 16
[1,0]<stdout>:  data_path ....................................... None
[1,0]<stdout>:  dataloader_type ................................. single
[1,0]<stdout>:  DDP_impl ........................................ local
[1,0]<stdout>:  decoder_seq_length .............................. None
[1,0]<stdout>:  deepscale ....................................... False
[1,0]<stdout>:  deepscale_config ................................ None[1,0]<stdout>:
[1,0]<stdout>:  deepspeed ....................................... True
[1,0]<stdout>:  deepspeed_activation_checkpointing .............. False
[1,0]<stdout>:  deepspeed_config ................................ None
[1,0]<stdout>:  deepspeed_mpi ................................... False
[1,0]<stdout>:  distribute_checkpointed_activations ............. False
[1,0]<stdout>:  distributed_backend ............................. nccl
[1,0]<stdout>:  ds_inference .................................... True
[1,0]<stdout>:  embedding_path .................................. None
[1,0]<stdout>:  encoder_seq_length .............................. 30
[1,0]<stdout>:  eod_mask_loss ................................... False
[1,0]<stdout>:  eval_interval ................................... 1000
[1,0]<stdout>:  eval_iters ...................................... 100
[1,0]<stdout>:  evidence_data_path .............................. None
[1,0]<stdout>:  exit_duration_in_mins ........................... None
[1,0]<stdout>:  exit_interval ................................... None
[1,0]<stdout>:  expert_interval ................................. 2
[1,0]<stdout>:  ffn_hidden_size ................................. 8192[1,0]<stdout>:
[1,0]<stdout>:  finetune ........................................ False[1,0]<stdout>:
[1,0]<stdout>:  fp16 ............................................ True
[1,0]<stdout>:  fp16_lm_cross_entropy ........................... False
[1,0]<stdout>:  fp32_residual_connection ........................ False
[1,0]<stdout>:  genfile ......................................... unconditional_samples.json
[1,0]<stdout>:  global_batch_size ............................... 128
[1,0]<stdout>:  greedy .......................................... False[1,0]<stdout>:
[1,0]<stdout>:  hidden_dropout .................................. 0.1
[1,0]<stdout>:  hidden_size ..................................... 2048
[1,0]<stdout>:  hysteresis ...................................... 2
[1,0]<stdout>:  ict_head_size ................................... None
[1,0]<stdout>:  ict_load ........................................ None
[1,0]<stdout>:  img_dim ......................................... 224[1,0]<stdout>:
[1,0]<stdout>:  indexer_batch_size .............................. 128
[1,0]<stdout>:  indexer_log_interval ............................ 1000
[1,0]<stdout>:  init_method_std ................................. 0.02
[1,0]<stdout>:  init_method_xavier_uniform ...................... False
[1,0]<stdout>:  initial_loss_scale .............................. 4294967296
[1,0]<stdout>:  kv_channels ..................................... 64
[1,0]<stdout>:  layernorm_epsilon ............................... 1e-05
[1,0]<stdout>:  lazy_mpu_init ................................... None
[1,0]<stdout>:  load ............................................ checkpoints/gpt2_345m
[1,0]<stdout>:  local_rank ...................................... None
[1,0]<stdout>:  log_batch_size_to_tensorboard ................... False[1,0]<stdout>:
[1,0]<stdout>:  log_interval .................................... 1
[1,0]<stdout>:  log_learning_rate_to_tensorboard ................ True
[1,0]<stdout>:  log_loss_scale_to_tensorboard ................... True
[1,0]<stdout>:  log_num_zeros_in_grad ........................... False
[1,0]<stdout>:  log_params_norm ................................. False
[1,0]<stdout>:  log_timers_to_tensorboard ....................... False
[1,0]<stdout>:  log_validation_ppl_to_tensorboard ............... False
[1,0]<stdout>:  loss_scale ...................................... None[1,0]<stdout>:
[1,0]<stdout>:  loss_scale_window ............................... 1000
[1,0]<stdout>:  lr .............................................. None
[1,0]<stdout>:  lr_decay_iters .................................. None
[1,0]<stdout>:  lr_decay_samples ................................ None
[1,0]<stdout>:  lr_decay_style .................................. linear
[1,0]<stdout>:  lr_decay_tokens ................................. None
[1,0]<stdout>:  lr_warmup_fraction .............................. None
[1,0]<stdout>:  lr_warmup_iters ................................. 0
[1,0]<stdout>:  lr_warmup_samples ............................... 0
[1,0]<stdout>:  make_vocab_size_divisible_by .................... 128[1,0]<stdout>:
[1,0]<stdout>:  mask_prob ....................................... 0.15
[1,0]<stdout>:  masked_softmax_fusion ........................... True
[1,0]<stdout>:  max_position_embeddings ......................... 1024
[1,0]<stdout>:  memory_centric_tiled_linear ..................... False
[1,0]<stdout>:  merge_file ...................................... gpt2-merges.txt
[1,0]<stdout>:  micro_batch_size ................................ 8[1,0]<stdout>:
[1,0]<stdout>:  min_loss_scale .................................. 1.0
[1,0]<stdout>:  min_lr .......................................... 0.0
[1,0]<stdout>:  mmap_warmup ..................................... False
[1,0]<stdout>:  moe_eval_capacity_factor ........................ 1.0
[1,0]<stdout>:  moe_min_capacity ................................ 4[1,0]<stdout>:
[1,0]<stdout>:  moe_token_dropping .............................. True
[1,0]<stdout>:  moe_train_capacity_factor ....................... 1.0
[1,0]<stdout>:  no_load_optim ................................... True
[1,0]<stdout>:  no_load_rng ..................................... True
[1,0]<stdout>:  no_save_optim ................................... None
[1,0]<stdout>:  no_save_rng ..................................... None
[1,0]<stdout>:  num_attention_heads ............................. 32
[1,0]<stdout>:  num_channels .................................... 3
[1,0]<stdout>:  num_classes ..................................... 1000
[1,0]<stdout>:  num_experts ..................................... 128
[1,0]<stdout>:  num_layers ...................................... 20
[1,0]<stdout>:  num_layers_per_virtual_pipeline_stage ........... None
[1,0]<stdout>:  num_samples ..................................... 160
[1,0]<stdout>:  num_workers ..................................... 2
[1,0]<stdout>:  onnx_safe ....................................... None
[1,0]<stdout>:  openai_gelu ..................................... False
[1,0]<stdout>:  optimizer ....................................... adam
[1,0]<stdout>:  out_seq_length .................................. 30
[1,0]<stdout>:  override_lr_scheduler ........................... False
[1,0]<stdout>:  params_dtype .................................... torch.float16
[1,0]<stdout>:  partition_activations ........................... False[1,0]<stdout>:
[1,0]<stdout>:  patch_dim ....................................... 16
[1,0]<stdout>:  pipeline_model_parallel_size .................... 1
[1,0]<stdout>:  profile_backward ................................ False[1,0]<stdout>:
[1,0]<stdout>:  query_in_block_prob ............................. 0.1
[1,0]<stdout>:  rampup_batch_size ............................... None
[1,0]<stdout>:  rank ............................................ 0
[1,0]<stdout>:  recompute ....................................... False
[1,0]<stdout>:  remote_device ................................... none
[1,0]<stdout>:  reset_attention_mask ............................ False
[1,0]<stdout>:  reset_position_ids .............................. False
[1,0]<stdout>:  retriever_report_topk_accuracies ................ []
[1,0]<stdout>:  retriever_score_scaling ......................... False
[1,0]<stdout>:  retriever_seq_length ............................ 256
[1,0]<stdout>:  sample_input_file ............................... None[1,0]<stdout>:
[1,0]<stdout>:  sample_output_file .............................. None
[1,0]<stdout>:  sample_rate ..................................... 1.0
[1,0]<stdout>:  save ............................................ None
[1,0]<stdout>:  save_interval ................................... None
[1,0]<stdout>:  scatter_gather_tensors_in_pipeline .............. True
[1,0]<stdout>:  scattered_embeddings ............................ False
[1,0]<stdout>:  seed ............................................ 1234
[1,0]<stdout>:  seq_length ...................................... 30
[1,0]<stdout>:  sgd_momentum .................................... 0.9
[1,0]<stdout>:  short_seq_prob .................................. 0.1
[1,0]<stdout>:  split ........................................... 969, 30, 1
[1,0]<stdout>:  split_transformers .............................. False
[1,0]<stdout>:  synchronize_each_layer .......................... False[1,0]<stdout>:
[1,0]<stdout>:  temperature ..................................... 1.0
[1,0]<stdout>:  tensor_model_parallel_size ...................... 1
[1,0]<stdout>:  tensorboard_dir ................................. None
[1,0]<stdout>:  tensorboard_log_interval ........................ 1
[1,0]<stdout>:  tensorboard_queue_size .......................... 1000
[1,0]<stdout>:  tile_factor ..................................... 1[1,0]<stdout>:
[1,0]<stdout>:  titles_data_path ................................ None
[1,0]<stdout>:  tokenizer_type .................................. GPT2BPETokenizer
[1,0]<stdout>:  top_k ........................................... 0
[1,0]<stdout>:  top_p ........................................... 0.9
[1,0]<stdout>:  topk ............................................ 1
[1,0]<stdout>:  train_iters ..................................... None
[1,0]<stdout>:  train_samples ................................... None
[1,0]<stdout>:  train_tokens .................................... None
[1,0]<stdout>:  use_checkpoint_lr_scheduler ..................... False
[1,0]<stdout>:  use_contiguous_buffers_in_ddp ................... False
[1,0]<stdout>:  use_cpu_initialization .......................... None
[1,0]<stdout>:  use_one_sent_docs ............................... False
[1,0]<stdout>:  use_pin_memory .................................. False
[1,0]<stdout>:  virtual_pipeline_model_parallel_size ............ None
[1,0]<stdout>:  vocab_extra_ids ................................. 0
[1,0]<stdout>:  vocab_file ...................................... gpt2-vocab.json
[1,0]<stdout>:  weight_decay .................................... 0.01
[1,0]<stdout>:  world_size ...................................... 16
[1,0]<stdout>:  zero_allgather_bucket_size ...................... 0.0
[1,0]<stdout>:  zero_contigious_gradients ....................... False
[1,0]<stdout>:  zero_reduce_bucket_size ......................... 0.0
[1,0]<stdout>:  zero_reduce_scatter ............................. False
[1,0]<stdout>:  zero_stage ...................................... 1.0
[1,0]<stdout>:-------------------- end of arguments ---------------------
[1,0]<stdout>:setting number of micro-batches to constant 1
[1,0]<stdout>:> building GPT2BPETokenizer tokenizer ...
[1,4]<stdout>:[2021-12-09 03:10:41,143] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,0]<stdout>: > padded vocab (size: 50257) with 47 dummy tokens (new size: 50304)
[1,0]<stdout>:> initializing torch distributed ...
[1,2]<stdout>:[2021-12-09 03:10:41,143] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,0]<stdout>:[2021-12-09 03:10:41,143] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,7]<stdout>:[2021-12-09 03:10:41,143] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,6]<stdout>:[2021-12-09 03:10:41,143] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,3]<stdout>:[2021-12-09 03:10:41,143] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,5]<stdout>:[2021-12-09 03:10:41,144] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,1]<stdout>:[2021-12-09 03:10:41,144] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Time to load transformer_inference op: 30.145901918411255 seconds
[1,10]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:Time to load transformer_inference op: 30.119479417800903 seconds
[1,14]<stdout>:Loading extension module transformer_inference...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Time to load transformer_inference op: 30.099976301193237 seconds
[1,8]<stdout>:Time to load transformer_inference op: 30.287019968032837 seconds
[1,15]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 30.089451789855957 seconds
[1,13]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:Time to load transformer_inference op: 30.079754114151 seconds
[1,12]<stdout>:Time to load transformer_inference op: 30.06724739074707 seconds
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 30.260972261428833 seconds
[1,15]<stdout>:[2021-12-09 03:10:47,920] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,10]<stdout>:[2021-12-09 03:10:47,920] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,14]<stdout>:[2021-12-09 03:10:47,920] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,12]<stdout>:[2021-12-09 03:10:47,921] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,9]<stdout>:[2021-12-09 03:10:47,921] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,13]<stdout>:[2021-12-09 03:10:47,921] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,11]<stdout>:[2021-12-09 03:10:47,921] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,8]<stdout>:[2021-12-09 03:10:47,922] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,7]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=7, local_rank=7, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,6]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=6, local_rank=6, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,6]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,4]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=4, local_rank=4, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,4]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,5]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=5, local_rank=5, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,5]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,9]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=9, local_rank=1, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,1]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=1, local_rank=1, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,1]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,2]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=2, local_rank=2, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,2]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,3]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=3, local_rank=3, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,3]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,7]<stdout>:[2021-12-09 03:10:47,935] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,8]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=8, local_rank=0, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,10]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=10, local_rank=2, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,11]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=11, local_rank=3, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,11]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,9]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,8]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,10]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,0]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=0, local_rank=0, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,0]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,14]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=14, local_rank=6, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,12]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=12, local_rank=4, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,15]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=15, local_rank=7, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,13]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=13, local_rank=5, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,14]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,12]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,15]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,13]<stdout>:[2021-12-09 03:10:47,936] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,0]<stdout>:> initializing tensor model parallel with size 1
[1,0]<stdout>:> initializing pipeline model parallel with size 1
[1,0]<stdout>:> setting random seeds to 1234 ...
[1,0]<stdout>:> initializing model parallel cuda seeds on global rank 0, model parallel rank 0, and data parallel rank 0 with model parallel seed: 3952 and data parallel seed: 1234
[1,0]<stdout>:> compiling dataset index builder ...
[1,0]<stdout>:make: Entering directory '/home/amawa/moe-v2/Megatron-DeepSpeed/megatron/data'
[1,0]<stdout>:make: Nothing to be done for 'default'.
[1,0]<stdout>:make: Leaving directory '/home/amawa/moe-v2/Megatron-DeepSpeed/megatron/data'
[1,0]<stdout>:>>> done with dataset index builder. Compilation time: 0.097 seconds
[1,0]<stdout>:WARNING: constraints for invoking optimized fused softmax kernel are not met. We default back to unfused kernel invocations.
[1,0]<stdout>:> compiling and loading fused kernels ...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module scaled_upper_triang_masked_softmax_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module scaled_upper_triang_masked_softmax_cuda...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module scaled_masked_softmax_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module scaled_masked_softmax_cuda...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module fused_mix_prec_layer_norm_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module fused_mix_prec_layer_norm_cuda...
[1,0]<stdout>:NCCL version 2.8.4+cuda11.3
[1,0]<stdout>:>>> done with compiling and loading fused kernels. Compilation time: 11.801 seconds
[1,0]<stdout>:[2021-12-09 03:11:01,520] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed groups
[1,0]<stdout>:[2021-12-09 03:11:01,520] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed model parallel group with size 1
[1,0]<stdout>:[2021-12-09 03:11:01,735] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed expert parallel group with size 16
[1,0]<stdout>:[2021-12-09 03:11:01,746] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [0]
[1,0]<stdout>:[2021-12-09 03:11:01,757] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [1]
[1,0]<stdout>:[2021-12-09 03:11:01,767] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [2]
[1,0]<stdout>:[2021-12-09 03:11:01,777] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [3]
[1,0]<stdout>:[2021-12-09 03:11:01,788] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [4]
[1,0]<stdout>:[2021-12-09 03:11:01,798] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [5]
[1,0]<stdout>:[2021-12-09 03:11:01,808] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [6]
[1,0]<stdout>:[2021-12-09 03:11:01,818] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [7]
[1,0]<stdout>:[2021-12-09 03:11:01,829] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [8]
[1,0]<stdout>:[2021-12-09 03:11:01,839] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [9]
[1,0]<stdout>:[2021-12-09 03:11:01,849] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [10]
[1,0]<stdout>:[2021-12-09 03:11:01,861] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [11]
[1,0]<stdout>:[2021-12-09 03:11:01,871] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [12]
[1,0]<stdout>:[2021-12-09 03:11:01,881] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [13]
[1,0]<stdout>:[2021-12-09 03:11:01,882] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [14]
[1,0]<stdout>:[2021-12-09 03:11:01,902] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [15]
[1,0]<stdout>:[2021-12-09 03:11:01,913] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert parallel process group with ranks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
[1,0]<stdout>:building GPT model ...
[1,15]<stdout>:[2021-12-09 03:11:03,858] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,9]<stdout>:[2021-12-09 03:11:03,859] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,10]<stdout>:[2021-12-09 03:11:03,859] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,14]<stdout>:[2021-12-09 03:11:03,861] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,13]<stdout>:[2021-12-09 03:11:03,863] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,8]<stdout>:[2021-12-09 03:11:03,864] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,12]<stdout>:[2021-12-09 03:11:03,864] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,11]<stdout>:[2021-12-09 03:11:03,865] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,9]<stdout>:moe = True, moe_experts= 128
[1,15]<stdout>:moe = True, moe_experts= 128
[1,9]<stdout>:************ 1 ***********
[1,15]<stdout>:************ 1 ***********
[1,10]<stdout>:moe = True, moe_experts= 128
[1,10]<stdout>:************ 1 ***********
[1,14]<stdout>:moe = True, moe_experts= 128
[1,14]<stdout>:************ 1 ***********
[1,8]<stdout>:moe = True, moe_experts= 128
[1,8]<stdout>:************ 1 ***********
[1,12]<stdout>:moe = True, moe_experts= 128
[1,12]<stdout>:************ 1 ***********
[1,13]<stdout>:moe = True, moe_experts= 128
[1,13]<stdout>:************ 1 ***********
[1,11]<stdout>:moe = True, moe_experts= 128
[1,11]<stdout>:************ 1 ***********
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,15]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:Time to load transformer_inference op: 0.036699771881103516 seconds
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Time to load transformer_inference op: 0.0361781120300293 seconds
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:Time to load transformer_inference op: 0.03573966026306152 seconds
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Time to load transformer_inference op: 0.0361630916595459 seconds
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Time to load transformer_inference op: 0.03592729568481445 seconds
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:Time to load transformer_inference op: 0.03484344482421875 seconds
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 0.03516983985900879 seconds
[1,8]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:Time to load transformer_inference op: 0.03676462173461914 seconds
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,15]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:Time to load transformer_inference op: 0.03445553779602051 seconds
[1,15]<stdout>:Time to load transformer_inference op: 0.03484773635864258 seconds
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Time to load transformer_inference op: 0.03680229187011719 seconds
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 8
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Time to load transformer_inference op: 0.036046504974365234 seconds
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Time to load transformer_inference op: 0.03587603569030762 seconds
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,13]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:local_ep_size = 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:Time to load transformer_inference op: 0.036478519439697266 seconds
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:local_ep_size = 8
[1,11]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 0.03566265106201172 seconds
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,8]<stdout>:Time to load transformer_inference op: 0.036501169204711914 seconds
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 8
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:[2021-12-09 03:11:04,098] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,15]<stdout>:[2021-12-09 03:11:04,100] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8
[1,9]<stdout>:[2021-12-09 03:11:04,104] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,14]<stdout>:[2021-12-09 03:11:04,105] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:[2021-12-09 03:11:04,105] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,8]<stdout>:local_ep_size = 8
[1,13]<stdout>:[2021-12-09 03:11:04,106] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,11]<stdout>:[2021-12-09 03:11:04,109] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,8]<stdout>:[2021-12-09 03:11:04,111] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,10]<stdout>:> DeepSpeed Inference initialized
[1,15]<stdout>:> DeepSpeed Inference initialized
[1,9]<stdout>:> DeepSpeed Inference initialized
[1,10]<stdout>:NCCL version 2.8.4+cuda11.3
[1,9]<stdout>:NCCL version 2.8.4+cuda11.3
[1,15]<stdout>:NCCL version 2.8.4+cuda11.3
[1,14]<stdout>:> DeepSpeed Inference initialized
[1,12]<stdout>:> DeepSpeed Inference initialized
[1,13]<stdout>:> DeepSpeed Inference initialized
[1,14]<stdout>:NCCL version 2.8.4+cuda11.3
[1,12]<stdout>:NCCL version 2.8.4+cuda11.3
[1,11]<stdout>:> DeepSpeed Inference initialized
[1,13]<stdout>:NCCL version 2.8.4+cuda11.3
[1,8]<stdout>:> DeepSpeed Inference initialized
[1,11]<stdout>:NCCL version 2.8.4+cuda11.3
[1,8]<stdout>:NCCL version 2.8.4+cuda11.3
[1,0]<stdout>:[2021-12-09 03:11:05,025] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,135] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,231] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,333] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,431] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,532] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,629] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,733] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,831] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:11:05,934] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,5]<stdout>:[2021-12-09 03:11:06,009] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,6]<stdout>:[2021-12-09 03:11:06,011] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,2]<stdout>:[2021-12-09 03:11:06,013] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,1]<stdout>:[2021-12-09 03:11:06,015] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,5]<stdout>:moe = True, moe_experts= 128
[1,7]<stdout>:[2021-12-09 03:11:06,016] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,5]<stdout>:************ 1 ***********
[1,3]<stdout>:[2021-12-09 03:11:06,016] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,4]<stdout>:[2021-12-09 03:11:06,017] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>: > number of parameters on (tensor, pipeline) model parallel rank (0, 0): 3464437760
[1,0]<stdout>:[2021-12-09 03:11:06,017] [INFO] [logging.py:69:log_dist] [Rank 0] DeepSpeed info: version=0.5.7+e806499e, git-hash=e806499e, git-branch=merge-moe-specialized
[1,0]<stdout>:[2021-12-09 03:11:06,017] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,6]<stdout>:moe = True, moe_experts= 128
[1,6]<stdout>:************ 1 ***********
[1,2]<stdout>:moe = True, moe_experts= 128
[1,2]<stdout>:************ 1 ***********
[1,1]<stdout>:moe = True, moe_experts= 128
[1,1]<stdout>:************ 1 ***********
[1,7]<stdout>:moe = True, moe_experts= 128
[1,7]<stdout>:************ 1 ***********
[1,3]<stdout>:moe = True, moe_experts= 128
[1,3]<stdout>:************ 1 ***********
[1,4]<stdout>:moe = True, moe_experts= 128
[1,4]<stdout>:************ 1 ***********
[1,0]<stdout>:moe = True, moe_experts= 128
[1,0]<stdout>:************ 1 ***********
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,5]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:Time to load transformer_inference op: 0.042838096618652344 seconds
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 0.03545188903808594 seconds
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:Time to load transformer_inference op: 0.041170597076416016 seconds
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:{'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:Time to load transformer_inference op: 0.03877711296081543 seconds
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,1]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,1]<stdout>:Time to load transformer_inference op: 0.03790283203125 seconds
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,4]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:Time to load transformer_inference op: 0.03825640678405762 seconds
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,7]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 0.03964519500732422 seconds
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:Time to load transformer_inference op: 0.039114952087402344 seconds
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,3]<stdout>:{'layer_id': 0, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 0.03435850143432617 seconds
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,5]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:Time to load transformer_inference op: 0.03770709037780762 seconds
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,0]<stdout>:
[1,5]<stdout>:local_ep_size = 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Time to load transformer_inference op: 0.03862285614013672 seconds
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,4]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:Time to load transformer_inference op: 0.03764677047729492 seconds
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,2]<stdout>:local_ep_size = 8
[1,1]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:Time to load transformer_inference op: 0.03966259956359863 seconds
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:Time to load transformer_inference op: 0.04076790809631348 seconds
[1,4]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:{'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Time to load transformer_inference op: 0.0377652645111084 seconds
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8
[1,6]<stdout>:local_ep_size = 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,7]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 0.039423465728759766 seconds
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 1, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,1]<stdout>:
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8
[1,6]<stdout>:local_ep_size = 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,7]<stdout>:
[1,4]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 5, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 8[1,5]<stdout>:
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,1]<stdout>:
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,0]<stdout>:{'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 9, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,2]<stdout>:
[1,5]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,1]<stdout>:
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,3]<stdout>:
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:local_ep_size = 8
[1,4]<stdout>:{'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 11, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:local_ep_size = 8
[1,4]<stdout>:{'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 13, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,0]<stdout>:
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,3]<stdout>:
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 15, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:{'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:[2021-12-09 03:11:06,259] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:{'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,4]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=2048, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 19, 'hidden_size': 2048, 'intermediate_size': 8192, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:[2021-12-09 03:11:06,268] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,7]<stdout>:local_ep_size = 8
[1,2]<stdout>:[2021-12-09 03:11:06,269] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,4]<stdout>:[2021-12-09 03:11:06,270] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,6]<stdout>:[2021-12-09 03:11:06,271] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,1]<stdout>:[2021-12-09 03:11:06,271] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,3]<stdout>:[2021-12-09 03:11:06,272] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,7]<stdout>:[2021-12-09 03:11:06,274] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,0]<stdout>:> DeepSpeed Inference initialized
[1,5]<stdout>:> DeepSpeed Inference initialized
[1,5]<stdout>:NCCL version 2.8.4+cuda11.3
[1,2]<stdout>:> DeepSpeed Inference initialized
[1,2]<stdout>:NCCL version 2.8.4+cuda11.3
[1,4]<stdout>:> DeepSpeed Inference initialized
[1,6]<stdout>:> DeepSpeed Inference initialized
[1,4]<stdout>:NCCL version 2.8.4+cuda11.3
[1,6]<stdout>:NCCL version 2.8.4+cuda11.3
[1,1]<stdout>:> DeepSpeed Inference initialized
[1,3]<stdout>:> DeepSpeed Inference initialized
[1,1]<stdout>:NCCL version 2.8.4+cuda11.3
[1,3]<stdout>:NCCL version 2.8.4+cuda11.3
[1,7]<stdout>:> DeepSpeed Inference initialized
[1,7]<stdout>:NCCL version 2.8.4+cuda11.3
[1,15]<stdout>:test: range(0, 16)
[1,10]<stdout>:test: range(0, 16)
[1,9]<stdout>:test: range(0, 16)
[1,14]<stdout>:test: range(0, 16)
[1,13]<stdout>:test: range(0, 16)
[1,11]<stdout>:test: range(0, 16)
[1,8]<stdout>:test: range(0, 16)
[1,12]<stdout>:test: range(0, 16)
[1,0]<stdout>:test: range(0, 16)
[1,5]<stdout>:test: range(0, 16)
[1,1]<stdout>:test: range(0, 16)
[1,2]<stdout>:test: range(0, 16)
[1,7]<stdout>:test: range(0, 16)
[1,4]<stdout>:test: range(0, 16)
[1,6]<stdout>:test: range(0, 16)
[1,3]<stdout>:test: range(0, 16)
[1,0]<stdout>:====== latency stats {0} ====== 
[1,0]<stdout>:	Avg Latency:   470.53 ms
[1,0]<stdout>:	P50 Latency:   468.88 ms
[1,0]<stdout>:	P90 Latency:   475.10 ms
[1,0]<stdout>:	P95 Latency:   475.10 ms
[1,0]<stdout>:	P99 Latency:   475.10 ms
[1,0]<stdout>:	999 Latency:   475.10 ms
[1,0]<stdout>:====== latency stats {0} ====== model_latencies
[1,0]<stdout>:	Avg Latency:    14.59 ms
[1,0]<stdout>:	P50 Latency:    14.49 ms
[1,0]<stdout>:	P90 Latency:    14.93 ms
[1,0]<stdout>:	P95 Latency:    15.26 ms
[1,0]<stdout>:	P99 Latency:    16.51 ms
[1,0]<stdout>:	999 Latency:    17.58 ms
[1,0]<stdout>:====== latency stats {0} ====== single_token_latency
[1,0]<stdout>:	Avg Latency:    16.21 ms
[1,0]<stdout>:	[1,0]<stdout>:P50 Latency:    16.11 ms
[1,0]<stdout>:	P90 Latency:    16.55 ms[1,0]<stdout>:
[1,0]<stdout>:	P95 Latency:    16.91 ms
[1,0]<stdout>:	P99 Latency:    18.15 ms
[1,0]<stdout>:	999 Latency:    19.19 ms
