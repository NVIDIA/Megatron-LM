Warning: Permanently added '[192.168.0.71]:43529' (ECDSA) to the list of known hosts.
Warning: Permanently added '[192.168.0.34]:45820' (ECDSA) to the list of known hosts.
Warning: Permanently added '[192.168.0.87]:46844' (ECDSA) to the list of known hosts.
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:Detected CUDA files, patching ldflags
[1,11]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,11]<stdout>:Building extension module transformer_inference...
[1,11]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,11]<stdout>:ninja: no work to do.
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 0.23147821426391602 seconds
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:Detected CUDA files, patching ldflags
[1,14]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,14]<stdout>:Building extension module transformer_inference...
[1,14]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:ninja: no work to do.
[1,14]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Time to load transformer_inference op: 0.3111748695373535 seconds
[1,10]<stdout>:Time to load transformer_inference op: 0.2764863967895508 seconds
[1,15]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 0.22831368446350098 seconds
[1,12]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Time to load transformer_inference op: 0.2144474983215332 seconds
[1,9]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Time to load transformer_inference op: 0.20952606201171875 seconds
[1,13]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:Time to load transformer_inference op: 0.2024071216583252 seconds
[1,8]<stdout>:Loading extension module transformer_inference...
[1,8]<stdout>:Time to load transformer_inference op: 0.18891167640686035 seconds
[1,11]<stdout>:[2021-12-09 02:59:46,031] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,10]<stdout>:[2021-12-09 02:59:46,196] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,14]<stdout>:[2021-12-09 02:59:46,197] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,15]<stdout>:[2021-12-09 02:59:46,243] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,12]<stdout>:[2021-12-09 02:59:46,257] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,9]<stdout>:[2021-12-09 02:59:46,266] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,13]<stdout>:[2021-12-09 02:59:46,268] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,8]<stdout>:[2021-12-09 02:59:46,269] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:Detected CUDA files, patching ldflags
[1,1]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:Building extension module transformer_inference...
[1,1]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,1]<stdout>:ninja: no work to do.
[1,1]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Time to load transformer_inference op: 0.4790182113647461 seconds
[1,7]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 0.39629292488098145 seconds
[1,0]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 0.38233137130737305 seconds
[1,5]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:Time to load transformer_inference op: 0.3651244640350342 seconds
[1,4]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:Time to load transformer_inference op: 0.3597695827484131 seconds
[1,2]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Time to load transformer_inference op: 0.3381009101867676 seconds
[1,6]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:Time to load transformer_inference op: 0.3282346725463867 seconds
[1,3]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Time to load transformer_inference op: 0.508479118347168 seconds
[1,0]<stdout>:using world size: 16, data-parallel-size: 16, tensor-model-parallel size: 1, pipeline-model-parallel size: 1 
[1,0]<stdout>:WARNING: overriding default arguments for tokenizer_type:GPT2BPETokenizer                        with tokenizer_type:GPT2BPETokenizer
[1,0]<stdout>:setting global batch size to 2048
[1,0]<stdout>:using torch.float16 for parameters ...
[1,0]<stdout>:------------------------ arguments ------------------------
[1,0]<stdout>:  accumulate_allreduce_grads_in_fp32 .............. False
[1,0]<stdout>:  adam_beta1 ...................................... 0.9
[1,0]<stdout>:  adam_beta2 ...................................... 0.999
[1,0]<stdout>:  adam_eps ........................................ 1e-08
[1,0]<stdout>:  adlr_autoresume ................................. False
[1,0]<stdout>:  adlr_autoresume_interval ........................ 1000
[1,0]<stdout>:  apply_query_key_layer_scaling ................... True
[1,0]<stdout>:  apply_residual_connection_post_layernorm ........ False
[1,0]<stdout>:  attention_dropout ............................... 0.1
[1,0]<stdout>:  attention_softmax_in_fp32 ....................... False
[1,0]<stdout>:  bert_binary_head ................................ True
[1,0]<stdout>:  bert_load ....................................... None
[1,0]<stdout>:  bf16 ............................................ False
[1,0]<stdout>:  bias_dropout_fusion ............................. True
[1,0]<stdout>:  bias_gelu_fusion ................................ True
[1,0]<stdout>:  biencoder_projection_dim ........................ 0[1,0]<stdout>:
[1,0]<stdout>:  biencoder_shared_query_context_model ............ False
[1,0]<stdout>:  block_data_path ................................. None
[1,0]<stdout>:  checkpoint_activations .......................... False
[1,0]<stdout>:  checkpoint_in_cpu ............................... False
[1,0]<stdout>:  checkpoint_num_layers ........................... 1
[1,0]<stdout>:  clip_grad ....................................... 1.0
[1,0]<stdout>:  consumed_train_samples .......................... 0
[1,0]<stdout>:  consumed_train_tokens ........................... 0
[1,0]<stdout>:  consumed_valid_samples .......................... 0
[1,0]<stdout>:  contigious_checkpointing ........................ False
[1,0]<stdout>:  cpu_optimizer ................................... False[1,0]<stdout>:
[1,0]<stdout>:  cpu_torch_adam .................................. False
[1,0]<stdout>:  curriculum_learning ............................. False
[1,0]<stdout>:  data_impl ....................................... infer
[1,0]<stdout>:  data_parallel_size .............................. 16
[1,0]<stdout>:  data_path ....................................... None
[1,0]<stdout>:  dataloader_type ................................. single
[1,0]<stdout>:  DDP_impl ........................................ local
[1,0]<stdout>:  decoder_seq_length .............................. None
[1,0]<stdout>:  deepscale ....................................... False
[1,0]<stdout>:  deepscale_config ................................ None
[1,0]<stdout>:  deepspeed ....................................... True
[1,0]<stdout>:  deepspeed_activation_checkpointing .............. False
[1,0]<stdout>:  deepspeed_config ................................ None
[1,0]<stdout>:  deepspeed_mpi ................................... False
[1,0]<stdout>:  distribute_checkpointed_activations ............. False
[1,0]<stdout>:  distributed_backend ............................. nccl
[1,0]<stdout>:  ds_inference .................................... True
[1,0]<stdout>:  embedding_path .................................. None[1,0]<stdout>:
[1,0]<stdout>:  encoder_seq_length .............................. 30
[1,0]<stdout>:  eod_mask_loss ................................... False
[1,0]<stdout>:  eval_interval ................................... 1000
[1,0]<stdout>:  eval_iters ...................................... 100
[1,0]<stdout>:  evidence_data_path .............................. None
[1,0]<stdout>:  exit_duration_in_mins ........................... None[1,0]<stdout>:
[1,0]<stdout>:  exit_interval ................................... None
[1,0]<stdout>:  expert_interval ................................. 2
[1,0]<stdout>:  ffn_hidden_size ................................. 12288
[1,0]<stdout>:  finetune ........................................ False
[1,0]<stdout>:  fp16 ............................................ True[1,0]<stdout>:
[1,0]<stdout>:  fp16_lm_cross_entropy ........................... False
[1,0]<stdout>:  fp32_residual_connection ........................ False[1,0]<stdout>:
[1,0]<stdout>:  genfile ......................................... unconditional_samples.json
[1,0]<stdout>:  global_batch_size ............................... 2048
[1,0]<stdout>:  greedy .......................................... False
[1,0]<stdout>:  hidden_dropout .................................. 0.1
[1,0]<stdout>:  hidden_size ..................................... 3072
[1,0]<stdout>:  hysteresis ...................................... 2
[1,0]<stdout>:  ict_head_size ................................... None
[1,0]<stdout>:  ict_load ........................................ None
[1,0]<stdout>:  img_dim ......................................... 224
[1,0]<stdout>:  indexer_batch_size .............................. 128
[1,0]<stdout>:  indexer_log_interval ............................ 1000
[1,0]<stdout>:  init_method_std ................................. 0.02
[1,0]<stdout>:  init_method_xavier_uniform ...................... False
[1,0]<stdout>:  initial_loss_scale .............................. 4294967296[1,0]<stdout>:
[1,0]<stdout>:  kv_channels ..................................... 96
[1,0]<stdout>:  layernorm_epsilon ............................... 1e-05
[1,0]<stdout>:  lazy_mpu_init ................................... None
[1,0]<stdout>:  load ............................................ checkpoints/gpt2_345m
[1,0]<stdout>:  local_rank ...................................... None
[1,0]<stdout>:  log_batch_size_to_tensorboard ................... False[1,0]<stdout>:
[1,0]<stdout>:  log_interval .................................... 1
[1,0]<stdout>:  log_learning_rate_to_tensorboard ................ True
[1,0]<stdout>:  log_loss_scale_to_tensorboard ................... True
[1,0]<stdout>:  log_num_zeros_in_grad ........................... False
[1,0]<stdout>:  log_params_norm ................................. False
[1,0]<stdout>:  log_timers_to_tensorboard ....................... False
[1,0]<stdout>:  log_validation_ppl_to_tensorboard ............... False
[1,0]<stdout>:  loss_scale ...................................... None
[1,0]<stdout>:  loss_scale_window ............................... 1000
[1,0]<stdout>:  lr .............................................. None[1,0]<stdout>:
[1,0]<stdout>:  lr_decay_iters .................................. None
[1,0]<stdout>:  lr_decay_samples ................................ None
[1,0]<stdout>:  lr_decay_style .................................. linear
[1,0]<stdout>:  lr_decay_tokens ................................. None
[1,0]<stdout>:  lr_warmup_fraction .............................. None
[1,0]<stdout>:  lr_warmup_iters ................................. 0
[1,0]<stdout>:  lr_warmup_samples ............................... 0
[1,0]<stdout>:  make_vocab_size_divisible_by .................... 128
[1,0]<stdout>:  mask_prob ....................................... 0.15
[1,0]<stdout>:  masked_softmax_fusion ........................... True
[1,0]<stdout>:  max_position_embeddings ......................... 1024
[1,0]<stdout>:  memory_centric_tiled_linear ..................... False
[1,0]<stdout>:  merge_file ...................................... gpt2-merges.txt
[1,0]<stdout>:  micro_batch_size ................................ 128
[1,0]<stdout>:  min_loss_scale .................................. 1.0[1,0]<stdout>:
[1,0]<stdout>:  min_lr .......................................... 0.0
[1,0]<stdout>:  mmap_warmup ..................................... False
[1,0]<stdout>:  moe_eval_capacity_factor ........................ 1.0[1,0]<stdout>:
[1,0]<stdout>:  moe_min_capacity ................................ 4
[1,0]<stdout>:  moe_token_dropping .............................. True
[1,0]<stdout>:  moe_train_capacity_factor ....................... 1.0[1,0]<stdout>:
[1,0]<stdout>:  no_load_optim ................................... True
[1,0]<stdout>:  no_load_rng ..................................... True
[1,0]<stdout>:  no_save_optim ................................... None
[1,0]<stdout>:  no_save_rng ..................................... None
[1,0]<stdout>:  num_attention_heads ............................. 32
[1,0]<stdout>:  num_channels .................................... 3
[1,0]<stdout>:  num_classes ..................................... 1000
[1,0]<stdout>:  num_experts ..................................... 128
[1,0]<stdout>:  num_layers ...................................... 36
[1,0]<stdout>:  num_layers_per_virtual_pipeline_stage ........... None
[1,0]<stdout>:  num_samples ..................................... 2560
[1,0]<stdout>:  num_workers ..................................... 2
[1,0]<stdout>:  onnx_safe ....................................... None
[1,0]<stdout>:  openai_gelu ..................................... False
[1,0]<stdout>:  optimizer ....................................... adam
[1,0]<stdout>:  out_seq_length .................................. 30
[1,0]<stdout>:  override_lr_scheduler ........................... False[1,0]<stdout>:
[1,0]<stdout>:  params_dtype .................................... torch.float16
[1,0]<stdout>:  partition_activations ........................... False
[1,0]<stdout>:  patch_dim ....................................... 16
[1,0]<stdout>:  pipeline_model_parallel_size .................... 1
[1,0]<stdout>:  profile_backward ................................ False
[1,0]<stdout>:  query_in_block_prob ............................. 0.1
[1,0]<stdout>:  rampup_batch_size ............................... None
[1,0]<stdout>:  rank ............................................ 0[1,0]<stdout>:
[1,0]<stdout>:  recompute ....................................... False
[1,0]<stdout>:  remote_device ................................... none
[1,0]<stdout>:  reset_attention_mask ............................ False
[1,0]<stdout>:  reset_position_ids .............................. False
[1,0]<stdout>:  retriever_report_topk_accuracies ................ []
[1,0]<stdout>:  retriever_score_scaling ......................... False
[1,0]<stdout>:  retriever_seq_length ............................ 256
[1,0]<stdout>:  sample_input_file ............................... None
[1,0]<stdout>:  sample_output_file .............................. None
[1,0]<stdout>:  sample_rate ..................................... 1.0
[1,0]<stdout>:  save ............................................ None
[1,0]<stdout>:  save_interval ................................... None
[1,0]<stdout>:  scatter_gather_tensors_in_pipeline .............. True
[1,0]<stdout>:  scattered_embeddings ............................ False
[1,0]<stdout>:  seed ............................................ 1234[1,0]<stdout>:
[1,0]<stdout>:  seq_length ...................................... 30
[1,0]<stdout>:  sgd_momentum .................................... 0.9
[1,0]<stdout>:  short_seq_prob .................................. 0.1
[1,0]<stdout>:  split ........................................... 969, 30, 1
[1,0]<stdout>:  split_transformers .............................. False
[1,0]<stdout>:  synchronize_each_layer .......................... False
[1,0]<stdout>:  temperature ..................................... 1.0
[1,0]<stdout>:  tensor_model_parallel_size ...................... 1
[1,0]<stdout>:  tensorboard_dir ................................. None
[1,0]<stdout>:  tensorboard_log_interval ........................ 1
[1,0]<stdout>:  tensorboard_queue_size .......................... 1000
[1,0]<stdout>:  tile_factor ..................................... 1
[1,0]<stdout>:  titles_data_path ................................ None
[1,0]<stdout>:  tokenizer_type .................................. GPT2BPETokenizer
[1,0]<stdout>:  top_k ........................................... 0
[1,0]<stdout>:  top_p ........................................... 0.9[1,0]<stdout>:
[1,0]<stdout>:  topk ............................................ 1
[1,0]<stdout>:  train_iters ..................................... None
[1,0]<stdout>:  train_samples ................................... None
[1,0]<stdout>:  train_tokens .................................... None
[1,0]<stdout>:  use_checkpoint_lr_scheduler ..................... False
[1,0]<stdout>:  use_contiguous_buffers_in_ddp ................... False
[1,0]<stdout>:  use_cpu_initialization .......................... None
[1,0]<stdout>:  use_one_sent_docs ............................... False
[1,0]<stdout>:  use_pin_memory .................................. False
[1,0]<stdout>:  virtual_pipeline_model_parallel_size ............ None
[1,0]<stdout>:  vocab_extra_ids ................................. 0
[1,0]<stdout>:  vocab_file ...................................... gpt2-vocab.json
[1,0]<stdout>:  weight_decay .................................... 0.01
[1,0]<stdout>:  world_size ...................................... 16
[1,0]<stdout>:  zero_allgather_bucket_size ...................... 0.0
[1,0]<stdout>:  zero_contigious_gradients ....................... False
[1,0]<stdout>:  zero_reduce_bucket_size ......................... 0.0
[1,0]<stdout>:  zero_reduce_scatter ............................. False
[1,0]<stdout>:  zero_stage ...................................... 1.0
[1,0]<stdout>:-------------------- end of arguments ---------------------
[1,0]<stdout>:setting number of micro-batches to constant 1
[1,0]<stdout>:> building GPT2BPETokenizer tokenizer ...
[1,1]<stdout>:[2021-12-09 02:59:46,911] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,7]<stdout>:[2021-12-09 02:59:46,912] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,0]<stdout>: > padded vocab (size: 50257) with 47 dummy tokens (new size: 50304)
[1,0]<stdout>:> initializing torch distributed ...
[1,0]<stdout>:[2021-12-09 02:59:46,937] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,5]<stdout>:[2021-12-09 02:59:46,941] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,4]<stdout>:[2021-12-09 02:59:46,954] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,6]<stdout>:[2021-12-09 02:59:46,963] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,2]<stdout>:[2021-12-09 02:59:46,968] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,3]<stdout>:[2021-12-09 02:59:47,001] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,6]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=6, local_rank=6, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,4]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=4, local_rank=4, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,5]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=5, local_rank=5, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,7]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=7, local_rank=7, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,7]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,6]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,1]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=1, local_rank=1, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,1]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,4]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,5]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,2]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=2, local_rank=2, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,2]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,3]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=3, local_rank=3, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,3]<stdout>:[2021-12-09 02:59:47,014] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,10]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=10, local_rank=2, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,8]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=8, local_rank=0, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,11]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=11, local_rank=3, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,11]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,9]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=9, local_rank=1, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,9]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,10]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,8]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,0]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=0, local_rank=0, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,0]<stdout>:[2021-12-09 02:59:47,016] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,14]<stdout>:[2021-12-09 02:59:47,019] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=14, local_rank=6, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,12]<stdout>:[2021-12-09 02:59:47,019] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=12, local_rank=4, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,14]<stdout>:[2021-12-09 02:59:47,019] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,13]<stdout>:[2021-12-09 02:59:47,019] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=13, local_rank=5, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,15]<stdout>:[2021-12-09 02:59:47,019] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=15, local_rank=7, world_size=16, master_addr=192.168.0.78, master_port=29500
[1,12]<stdout>:[2021-12-09 02:59:47,019] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,13]<stdout>:[2021-12-09 02:59:47,019] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,15]<stdout>:[2021-12-09 02:59:47,019] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,0]<stdout>:> initializing tensor model parallel with size 1
[1,0]<stdout>:> initializing pipeline model parallel with size 1
[1,0]<stdout>:> setting random seeds to 1234 ...
[1,0]<stdout>:> initializing model parallel cuda seeds on global rank 0, model parallel rank 0, and data parallel rank 0 with model parallel seed: 3952 and data parallel seed: 1234
[1,0]<stdout>:> compiling dataset index builder ...
[1,0]<stdout>:make: Entering directory '/home/amawa/moe-v2/Megatron-DeepSpeed/megatron/data'
[1,0]<stdout>:make: Nothing to be done for 'default'.
[1,0]<stdout>:make: Leaving directory '/home/amawa/moe-v2/Megatron-DeepSpeed/megatron/data'
[1,0]<stdout>:>>> done with dataset index builder. Compilation time: 0.085 seconds
[1,0]<stdout>:WARNING: constraints for invoking optimized fused softmax kernel are not met. We default back to unfused kernel invocations.
[1,0]<stdout>:> compiling and loading fused kernels ...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module scaled_upper_triang_masked_softmax_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module scaled_upper_triang_masked_softmax_cuda...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module scaled_masked_softmax_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module scaled_masked_softmax_cuda...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module fused_mix_prec_layer_norm_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module fused_mix_prec_layer_norm_cuda...
[1,0]<stdout>:NCCL version 2.8.4+cuda11.3
[1,0]<stdout>:>>> done with compiling and loading fused kernels. Compilation time: 10.629 seconds
[1,0]<stdout>:[2021-12-09 02:59:59,376] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed groups
[1,0]<stdout>:[2021-12-09 02:59:59,376] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed model parallel group with size 1
[1,0]<stdout>:[2021-12-09 02:59:59,530] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed expert parallel group with size 16
[1,0]<stdout>:[2021-12-09 02:59:59,541] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [0]
[1,0]<stdout>:[2021-12-09 02:59:59,551] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [1]
[1,0]<stdout>:[2021-12-09 02:59:59,561] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [2]
[1,0]<stdout>:[2021-12-09 02:59:59,572] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [3]
[1,0]<stdout>:[2021-12-09 02:59:59,582] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [4]
[1,0]<stdout>:[2021-12-09 02:59:59,592] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [5]
[1,0]<stdout>:[2021-12-09 02:59:59,603] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [6]
[1,0]<stdout>:[2021-12-09 02:59:59,613] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [7]
[1,0]<stdout>:[2021-12-09 02:59:59,623] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [8]
[1,0]<stdout>:[2021-12-09 02:59:59,633] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [9]
[1,0]<stdout>:[2021-12-09 02:59:59,644] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [10]
[1,0]<stdout>:[2021-12-09 02:59:59,654] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [11]
[1,0]<stdout>:[2021-12-09 02:59:59,664] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [12]
[1,0]<stdout>:[2021-12-09 02:59:59,674] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [13]
[1,0]<stdout>:[2021-12-09 02:59:59,685] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [14]
[1,0]<stdout>:[2021-12-09 02:59:59,695] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [15]
[1,0]<stdout>:[2021-12-09 02:59:59,706] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert parallel process group with ranks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
[1,0]<stdout>:building GPT model ...
[1,0]<stdout>:[2021-12-09 02:59:59,795] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 02:59:59,879] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 02:59:59,963] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,049] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,139] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,226] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,311] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,402] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,488] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,576] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,663] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,751] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,837] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:00,927] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:01,016] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:01,103] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:01,195] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,0]<stdout>:[2021-12-09 03:00:01,284] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 8 | expert_parallel_size: 16
[1,7]<stdout>:[2021-12-09 03:00:01,312] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,15]<stdout>:[2021-12-09 03:00:01,316] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,7]<stdout>:moe = True, moe_experts= 128
[1,7]<stdout>:************ 1 ***********
[1,15]<stdout>:moe = True, moe_experts= 128
[1,15]<stdout>:************ 1 ***********
[1,5]<stdout>:[2021-12-09 03:00:01,329] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,10]<stdout>:[2021-12-09 03:00:01,335] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,3]<stdout>:[2021-12-09 03:00:01,338] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,5]<stdout>:moe = True, moe_experts= 128
[1,5]<stdout>:************ 1 ***********
[1,6]<stdout>:[2021-12-09 03:00:01,341] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,2]<stdout>:[2021-12-09 03:00:01,343] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,1]<stdout>:[2021-12-09 03:00:01,343] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,10]<stdout>:moe = True, moe_experts= 128
[1,10]<stdout>:************ 1 ***********
[1,8]<stdout>:[2021-12-09 03:00:01,347] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,4]<stdout>:[2021-12-09 03:00:01,346] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>: > number of parameters on (tensor, pipeline) model parallel rank (0, 0): 13757681664
[1,12]<stdout>:[2021-12-09 03:00:01,348] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>:[2021-12-09 03:00:01,347] [INFO] [logging.py:69:log_dist] [Rank 0] DeepSpeed info: version=0.5.7+e806499e, git-hash=e806499e, git-branch=merge-moe-specialized
[1,0]<stdout>:[2021-12-09 03:00:01,347] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,11]<stdout>:[2021-12-09 03:00:01,349] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,14]<stdout>:[2021-12-09 03:00:01,351] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,9]<stdout>:[2021-12-09 03:00:01,352] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,13]<stdout>:[2021-12-09 03:00:01,352] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,3]<stdout>:moe = True, moe_experts= 128
[1,3]<stdout>:************ 1 ***********
[1,6]<stdout>:moe = True, moe_experts= 128
[1,6]<stdout>:************ 1 ***********
[1,2]<stdout>:moe = True, moe_experts= 128
[1,2]<stdout>:************ 1 ***********
[1,8]<stdout>:moe = True, moe_experts= 128
[1,8]<stdout>:************ 1 ***********
[1,4]<stdout>:moe = True, moe_experts= 128
[1,4]<stdout>:************ 1 ***********
[1,12]<stdout>:moe = True, moe_experts= 128
[1,1]<stdout>:moe = True, moe_experts= 128[1,1]<stdout>:
[1,12]<stdout>:************ 1 ***********
[1,1]<stdout>:************ 1 ***********
[1,0]<stdout>:moe = True, moe_experts= 128
[1,11]<stdout>:moe = True, moe_experts= 128
[1,0]<stdout>:************ 1 ***********
[1,11]<stdout>:************ 1 ***********
[1,14]<stdout>:moe = True, moe_experts= 128
[1,14]<stdout>:************ 1 ***********
[1,13]<stdout>:moe = True, moe_experts= 128
[1,9]<stdout>:moe = True, moe_experts= 128
[1,13]<stdout>:************ 1 ***********
[1,9]<stdout>:************ 1 ***********
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,15]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 0.04199099540710449 seconds
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,7]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 0.04613351821899414 seconds
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:Time to load transformer_inference op: 0.03808951377868652 seconds
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,5]<stdout>:Loading extension module transformer_inference...[1,5]<stdout>:
[1,5]<stdout>:Time to load transformer_inference op: 0.03960084915161133 seconds
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,8]<stdout>:Time to load transformer_inference op: 0.035717010498046875 seconds
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Time to load transformer_inference op: 0.03821873664855957 seconds
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 0.034155845642089844 seconds
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,4]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,4]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:Time to load transformer_inference op: 0.03674459457397461 seconds
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:Time to load transformer_inference op: 0.03510117530822754 seconds
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Time to load transformer_inference op: 0.03559160232543945 seconds
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,12]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Time to load transformer_inference op: 0.037903547286987305 seconds
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,2]<stdout>:Time to load transformer_inference op: 0.03847670555114746 seconds
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:Time to load transformer_inference op: 0.040714263916015625 seconds
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,14]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:Time to load transformer_inference op: 0.037784576416015625 seconds
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Time to load transformer_inference op: 0.03720426559448242 seconds
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,13]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:Time to load transformer_inference op: 0.038501739501953125 seconds
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,15]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 0.03676772117614746 seconds
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,7]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,7]<stdout>:Time to load transformer_inference op: 0.040015220642089844 seconds
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 8
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:Time to load transformer_inference op: 0.03795480728149414 seconds
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,5]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:Time to load transformer_inference op: 0.03957653045654297 seconds
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 0.03457832336425781 seconds
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,11]<stdout>:Time to load transformer_inference op: 0.03319382667541504 seconds
[1,0]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:local_ep_size = 8
[1,8]<stdout>:Time to load transformer_inference op: 0.0365147590637207 seconds
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,4]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:Time to load transformer_inference op: 0.03631091117858887 seconds
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Time to load transformer_inference op: 0.03606271743774414 seconds
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:local_ep_size = 8
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:Time to load transformer_inference op: 0.038458824157714844 seconds
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Time to load transformer_inference op: 0.03708338737487793 seconds
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Time to load transformer_inference op: 0.03679394721984863 seconds
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8
[1,9]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Time to load transformer_inference op: 0.036066532135009766 seconds
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,0]<stdout>:
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8
[1,14]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Time to load transformer_inference op: 0.03692746162414551 seconds
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:Time to load transformer_inference op: 0.03895449638366699 seconds
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:Time to load transformer_inference op: 0.03798317909240723 seconds
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,1]<stdout>:
[1,8]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}[1,1]<stdout>:
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 8
[1,2]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,5]<stdout>:local_ep_size = 8
[1,6]<stdout>:local_ep_size = 8
[1,4]<stdout>:
[1,0]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,1]<stdout>:
[1,8]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 8
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}[1,5]<stdout>:
[1,0]<stdout>:local_ep_size = 8
[1,6]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:{'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8[1,3]<stdout>:
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:local_ep_size = 8
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:local_ep_size = 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:{'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 8
[1,6]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,3]<stdout>:
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:local_ep_size = 8
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:local_ep_size = 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}[1,5]<stdout>:
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,0]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,3]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 8
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,6]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,13]<stdout>:local_ep_size = 8
[1,5]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,1]<stdout>:
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,2]<stdout>:
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:{'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,0]<stdout>:
[1,15]<stdout>:local_ep_size = 8
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,8]<stdout>:local_ep_size = 8
[1,1]<stdout>:{'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:local_ep_size = 8
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}[1,1]<stdout>:
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 8
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,5]<stdout>:
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:local_ep_size = 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8
[1,5]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8
[1,3]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:{'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,0]<stdout>:
[1,12]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,5]<stdout>:
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:local_ep_size = 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor[1,7]<stdout>:': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,10]<stdout>:local_ep_size = 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 8
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 8
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 8
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 8
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 8
[1,15]<stdout>:local_ep_size = 8
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 8
[1,10]<stdout>:local_ep_size = 8
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,11]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,6]<stdout>:
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,3]<stdout>:
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,7]<stdout>:
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:local_ep_size = 8
[1,7]<stdout>:{'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8
[1,7]<stdout>:local_ep_size = 8
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,0]<stdout>:{'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:local_ep_size = 8
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 8
[1,13]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,7]<stdout>:
[1,11]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:moe, num_experts = True, 8, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (4): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (5): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (6): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (7): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,5]<stdout>:{'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8
[1,2]<stdout>:local_ep_size = 8
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:local_ep_size = 8
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,15]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,14]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,13]<stdout>:local_ep_size = 8
[1,10]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,3]<stdout>:
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 8, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (4): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (5): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (6): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (7): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,2]<stdout>:
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,7]<stdout>:local_ep_size = 8
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:[2021-12-09 03:00:01,773] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,0]<stdout>:local_ep_size = 8
[1,2]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 8
[1,10]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,3]<stdout>:
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,7]<stdout>:[2021-12-09 03:00:01,781] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 8, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (4): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (5): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (6): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (7): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 8
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 8
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 8
[1,4]<stdout>:moe, num_experts = True, 8, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (4): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (5): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (6): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (7): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 8
[1,8]<stdout>:local_ep_size = 8
[1,4]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 8, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (4): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (5): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (6): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (7): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 8
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,2]<stdout>:
[1,0]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8
[1,5]<stdout>:moe, num_experts = True, 8, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (4): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (5): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (6): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (7): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 8
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,15]<stdout>:> DeepSpeed Inference initialized
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 8
[1,0]<stdout>:local_ep_size = 8
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,12]<stdout>:moe, num_experts = True, 8, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (4): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (5): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (6): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (7): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 8, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (4): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (5): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (6): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (7): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 8
[1,12]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,10]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 8
[1,2]<stdout>:local_ep_size = 8
[1,1]<stdout>:local_ep_size = 8
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 8
[1,12]<stdout>:local_ep_size = 8
[1,10]<stdout>:local_ep_size = 8
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 8, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (4): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (5): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (6): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (7): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 8
[1,6]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 8, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (4): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (5): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (6): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (7): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 8
[1,11]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 8, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (4): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (5): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (6): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (7): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 8
[1,8]<stdout>:[2021-12-09 03:00:01,798] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,3]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,14]<stdout>:local_ep_size = 8
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 8
[1,7]<stdout>:> DeepSpeed Inference initialized
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 8
[1,15]<stdout>:NCCL version 2.8.4+cuda11.3
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 8, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (4): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (5): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (6): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (7): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 8
[1,9]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,4]<stdout>:[2021-12-09 03:00:01,800] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,3]<stdout>:local_ep_size = 8
[1,0]<stdout>:[2021-12-09 03:00:01,800] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,7]<stdout>:NCCL version 2.8.4+cuda11.3
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:[2021-12-09 03:00:01,803] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 8
[1,1]<stdout>:moe, num_experts = True, 8, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (4): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (5): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (6): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (7): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 8
[1,1]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,12]<stdout>:[2021-12-09 03:00:01,807] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,10]<stdout>:[2021-12-09 03:00:01,807] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,13]<stdout>:moe, num_experts = True, 8, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (4): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (5): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (6): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (7): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 8
[1,13]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 8, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (4): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (5): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (6): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (7): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 8
[1,2]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 8
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 8
[1,2]<stdout>:local_ep_size = 8
[1,6]<stdout>:[2021-12-09 03:00:01,809] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,14]<stdout>:moe, num_experts = True, 8, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (4): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (5): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (6): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (7): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 8
[1,14]<stdout>:local_ep_size = 8, ep_world_size = 16, ep_grou = None
[1,11]<stdout>:[2021-12-09 03:00:01,812] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,3]<stdout>:[2021-12-09 03:00:01,811] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 8, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 8
[1,9]<stdout>:[2021-12-09 03:00:01,816] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,1]<stdout>:[2021-12-09 03:00:01,818] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,13]<stdout>:[2021-12-09 03:00:01,821] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,2]<stdout>:[2021-12-09 03:00:01,820] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,8]<stdout>:> DeepSpeed Inference initialized
[1,14]<stdout>:[2021-12-09 03:00:01,826] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,8]<stdout>:NCCL version 2.8.4+cuda11.3
[1,10]<stdout>:> DeepSpeed Inference initialized
[1,12]<stdout>:> DeepSpeed Inference initialized
[1,10]<stdout>:NCCL version 2.8.4+cuda11.3
[1,12]<stdout>:NCCL version 2.8.4+cuda11.3
[1,11]<stdout>:> DeepSpeed Inference initialized
[1,11]<stdout>:NCCL version 2.8.4+cuda11.3
[1,0]<stdout>:> DeepSpeed Inference initialized
[1,5]<stdout>:> DeepSpeed Inference initialized
[1,4]<stdout>:> DeepSpeed Inference initialized
[1,5]<stdout>:NCCL version 2.8.4+cuda11.3
[1,4]<stdout>:NCCL version 2.8.4+cuda11.3
[1,6]<stdout>:> DeepSpeed Inference initialized
[1,3]<stdout>:> DeepSpeed Inference initialized
[1,9]<stdout>:> DeepSpeed Inference initialized
[1,6]<stdout>:NCCL version 2.8.4+cuda11.3
[1,3]<stdout>:NCCL version 2.8.4+cuda11.3
[1,9]<stdout>:NCCL version 2.8.4+cuda11.3
[1,13]<stdout>:> DeepSpeed Inference initialized
[1,1]<stdout>:> DeepSpeed Inference initialized
[1,13]<stdout>:NCCL version 2.8.4+cuda11.3
[1,1]<stdout>:NCCL version 2.8.4+cuda11.3
[1,2]<stdout>:> DeepSpeed Inference initialized
[1,2]<stdout>:NCCL version 2.8.4+cuda11.3
[1,14]<stdout>:> DeepSpeed Inference initialized
[1,14]<stdout>:NCCL version 2.8.4+cuda11.3
[1,7]<stdout>:test: range(0, 16)
[1,15]<stdout>:test: range(0, 16)
[1,8]<stdout>:test: range(0, 16)
[1,6]<stdout>:test: range(0, 16)
[1,0]<stdout>:test: range(0, 16)
[1,5]<stdout>:test: range(0, 16)
[1,2]<stdout>:test: range(0, 16)
[1,3]<stdout>:test: range(0, 16)
[1,4]<stdout>:test: range(0, 16)
[1,1]<stdout>:test: range(0, 16)
[1,10]<stdout>:test: range(0, 16)
[1,11]<stdout>:test: range(0, 16)
[1,9]<stdout>:test: range(0, 16)
[1,13]<stdout>:test: range(0, 16)
[1,12]<stdout>:test: range(0, 16)
[1,14]<stdout>:test: range(0, 16)
[1,0]<stdout>:====== latency stats {0} ====== 
[1,0]<stdout>:	Avg Latency:  1583.40 ms
[1,0]<stdout>:	P50 Latency:  1581.49 ms
[1,0]<stdout>:	P90 Latency:  1584.14 ms
[1,0]<stdout>:	P95 Latency:  1584.14 ms
[1,0]<stdout>:	P99 Latency:  1584.14 ms
[1,0]<stdout>:	999 Latency:  1584.14 ms[1,0]<stdout>:
[1,0]<stdout>:====== latency stats {0} ====== model_latencies
[1,0]<stdout>:	Avg Latency:    46.63 ms
[1,0]<stdout>:	P50 Latency:    46.67 ms
[1,0]<stdout>:	P90 Latency:    47.25 ms
[1,0]<stdout>:	P95 Latency:    47.55 ms
[1,0]<stdout>:	P99 Latency:    49.23 ms[1,0]<stdout>:
[1,0]<stdout>:	999 Latency:    52.73 ms
[1,0]<stdout>:====== latency stats {0} ====== single_token_latency
[1,0]<stdout>:	Avg Latency:    54.56 ms
[1,0]<stdout>:	P50 Latency:    54.60 ms
[1,0]<stdout>:	P90 Latency:    55.22 ms
[1,0]<stdout>:	P95 Latency:    55.52 ms
[1,0]<stdout>:	P99 Latency:    57.14 ms
[1,0]<stdout>:	999 Latency:    60.67 ms
