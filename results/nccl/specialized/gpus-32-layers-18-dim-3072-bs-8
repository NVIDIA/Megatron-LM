Warning: Permanently added '[192.168.0.34]:45820' (ECDSA) to the list of known hosts.
Warning: Permanently added '[192.168.0.71]:43529' (ECDSA) to the list of known hosts.
Warning: Permanently added '[192.168.0.87]:46844' (ECDSA) to the list of known hosts.
[1,18]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,26]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,18]<stdout>:Detected CUDA files, patching ldflags
[1,18]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,18]<stdout>:Building extension module transformer_inference...
[1,18]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,18]<stdout>:ninja: no work to do.
[1,18]<stdout>:Loading extension module transformer_inference...
[1,18]<stdout>:Time to load transformer_inference op: 0.21610140800476074 seconds
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,17]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:Detected CUDA files, patching ldflags
[1,25]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,23]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,21]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,31]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,19]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,16]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,22]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,30]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,20]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,27]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,28]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,29]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,24]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:Building extension module transformer_inference...
[1,7]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,18]<stdout>:[2021-12-09 02:04:24,121] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:[1/7] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output transform.cuda.o.d -DTORCH_EXTENSION_NAME=transformer_inference -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1013\" -I/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/includes -isystem /opt/conda/lib/python3.8/site-packages/torch/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/torch/csrc/api/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/TH -isystem /opt/conda/lib/python3.8/site-packages/torch/include/THC -isystem /usr/local/cuda/include -isystem /opt/conda/include/python3.8 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_80,code=sm_80 --compiler-options '-fPIC' -O3 --use_fast_math -std=c++14 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ -U__CUDA_NO_HALF2_OPERATORS__ -gencode=arch=compute_80,code=sm_80 -gencode=arch=compute_80,code=compute_80 -c /home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/transform.cu -o transform.cuda.o 
[1,7]<stdout>:[2/7] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output dequantize.cuda.o.d -DTORCH_EXTENSION_NAME=transformer_inference -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1013\" -I/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/includes -isystem /opt/conda/lib/python3.8/site-packages/torch/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/torch/csrc/api/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/TH -isystem /opt/conda/lib/python3.8/site-packages/torch/include/THC -isystem /usr/local/cuda/include -isystem /opt/conda/include/python3.8 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_80,code=sm_80 --compiler-options '-fPIC' -O3 --use_fast_math -std=c++14 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ -U__CUDA_NO_HALF2_OPERATORS__ -gencode=arch=compute_80,code=sm_80 -gencode=arch=compute_80,code=compute_80 -c /home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/dequantize.cu -o dequantize.cuda.o 
[1,7]<stdout>:[3/7] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output normalize.cuda.o.d -DTORCH_EXTENSION_NAME=transformer_inference -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1013\" -I/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/includes -isystem /opt/conda/lib/python3.8/site-packages/torch/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/torch/csrc/api/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/TH -isystem /opt/conda/lib/python3.8/site-packages/torch/include/THC -isystem /usr/local/cuda/include -isystem /opt/conda/include/python3.8 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_80,code=sm_80 --compiler-options '-fPIC' -O3 --use_fast_math -std=c++14 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ -U__CUDA_NO_HALF2_OPERATORS__ -gencode=arch=compute_80,code=sm_80 -gencode=arch=compute_80,code=compute_80 -c /home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/normalize.cu -o normalize.cuda.o 
[1,7]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/normalize.cu(21): warning: variable "iterations" was declared but never referenced
[1,7]<stdout>:
[1,7]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/normalize.cu(90): warning: variable "iterations" was declared but never referenced
[1,7]<stdout>:
[1,7]<stdout>:[4/7] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output custom_gemm.cuda.o.d -DTORCH_EXTENSION_NAME=transformer_inference -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1013\" -I/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/includes -isystem /opt/conda/lib/python3.8/site-packages/torch/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/torch/csrc/api/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/TH -isystem /opt/conda/lib/python3.8/site-packages/torch/include/THC -isystem /usr/local/cuda/include -isystem /opt/conda/include/python3.8 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_80,code=sm_80 --compiler-options '-fPIC' -O3 --use_fast_math -std=c++14 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ -U__CUDA_NO_HALF2_OPERATORS__ -gencode=arch=compute_80,code=sm_80 -gencode=arch=compute_80,code=compute_80 -c /home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/custom_gemm.cu -o custom_gemm.cuda.o 
[1,7]<stdout>:[5/7] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output gelu.cuda.o.d -DTORCH_EXTENSION_NAME=transformer_inference -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1013\" -I/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/includes -isystem /opt/conda/lib/python3.8/site-packages/torch/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/torch/csrc/api/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/TH -isystem /opt/conda/lib/python3.8/site-packages/torch/include/THC -isystem /usr/local/cuda/include -isystem /opt/conda/include/python3.8 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_80,code=sm_80 --compiler-options '-fPIC' -O3 --use_fast_math -std=c++14 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ -U__CUDA_NO_HALF2_OPERATORS__ -gencode=arch=compute_80,code=sm_80 -gencode=arch=compute_80,code=compute_80 -c /home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/gelu.cu -o gelu.cuda.o 
[1,7]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/gelu.cu(369): warning: variable "indices_cast" was declared but never referenced
[1,7]<stdout>:
[1,7]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/gelu.cu(555): warning: variable "gid" was declared but never referenced
[1,7]<stdout>:
[1,7]<stdout>:/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/gelu.cu(631): warning: variable "gid" was declared but never referenced
[1,7]<stdout>:
[1,7]<stdout>:[6/7] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output softmax.cuda.o.d -DTORCH_EXTENSION_NAME=transformer_inference -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1013\" -I/home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/includes -isystem /opt/conda/lib/python3.8/site-packages/torch/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/torch/csrc/api/include -isystem /opt/conda/lib/python3.8/site-packages/torch/include/TH -isystem /opt/conda/lib/python3.8/site-packages/torch/include/THC -isystem /usr/local/cuda/include -isystem /opt/conda/include/python3.8 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_80,code=sm_80 --compiler-options '-fPIC' -O3 --use_fast_math -std=c++14 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ -U__CUDA_NO_HALF2_OPERATORS__ -gencode=arch=compute_80,code=sm_80 -gencode=arch=compute_80,code=compute_80 -c /home/amawa/ds-internal/deepspeed/ops/csrc/transformer/inference/csrc/softmax.cu -o softmax.cuda.o 
[1,7]<stdout>:[7/7] c++ pt_binding.o gelu.cuda.o normalize.cuda.o softmax.cuda.o dequantize.cuda.o transform.cuda.o custom_gemm.cuda.o -shared -L/opt/conda/lib/python3.8/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/usr/local/cuda/lib64 -lcudart -o transformer_inference.so
[1,7]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 3.723651170730591 seconds
[1,2]<stdout>:Time to load transformer_inference op: 3.6734232902526855 seconds
[1,6]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:Time to load transformer_inference op: 3.796696424484253 seconds
[1,1]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Time to load transformer_inference op: 3.6241655349731445 seconds
[1,3]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Time to load transformer_inference op: 3.62078857421875 seconds
[1,0]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 3.6175193786621094 seconds
[1,4]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:Time to load transformer_inference op: 3.612795352935791 seconds
[1,5]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:Time to load transformer_inference op: 3.600022792816162 seconds
[1,0]<stdout>:using world size: 32, data-parallel-size: 32, tensor-model-parallel size: 1, pipeline-model-parallel size: 1 
[1,0]<stdout>:WARNING: overriding default arguments for tokenizer_type:GPT2BPETokenizer                        with tokenizer_type:GPT2BPETokenizer
[1,0]<stdout>:setting global batch size to 256[1,0]<stdout>:
[1,0]<stdout>:using torch.float16 for parameters ...
[1,0]<stdout>:------------------------ arguments ------------------------
[1,0]<stdout>:  accumulate_allreduce_grads_in_fp32 .............. False
[1,0]<stdout>:  adam_beta1 ...................................... 0.9
[1,0]<stdout>:  adam_beta2 ...................................... 0.999
[1,0]<stdout>:  adam_eps ........................................ 1e-08
[1,0]<stdout>:  adlr_autoresume ................................. False
[1,0]<stdout>:  adlr_autoresume_interval ........................ 1000[1,0]<stdout>:
[1,0]<stdout>:  apply_query_key_layer_scaling ................... True
[1,0]<stdout>:  apply_residual_connection_post_layernorm ........ False
[1,0]<stdout>:  attention_dropout ............................... 0.1
[1,0]<stdout>:  attention_softmax_in_fp32 ....................... False
[1,0]<stdout>:  bert_binary_head ................................ True
[1,0]<stdout>:  bert_load ....................................... None[1,0]<stdout>:
[1,0]<stdout>:  bf16 ............................................ False
[1,0]<stdout>:  bias_dropout_fusion ............................. True[1,0]<stdout>:
[1,0]<stdout>:  bias_gelu_fusion ................................ True
[1,0]<stdout>:  biencoder_projection_dim ........................ 0[1,0]<stdout>:
[1,0]<stdout>:  biencoder_shared_query_context_model ............ False
[1,0]<stdout>:  block_data_path ................................. None
[1,0]<stdout>:  checkpoint_activations .......................... False
[1,0]<stdout>:  checkpoint_in_cpu ............................... False
[1,0]<stdout>:  checkpoint_num_layers ........................... 1
[1,0]<stdout>:  clip_grad ....................................... 1.0
[1,0]<stdout>:  consumed_train_samples .......................... 0
[1,0]<stdout>:  consumed_train_tokens ........................... 0
[1,0]<stdout>:  consumed_valid_samples .......................... 0
[1,0]<stdout>:  contigious_checkpointing ........................ False
[1,0]<stdout>:  cpu_optimizer ................................... False
[1,0]<stdout>:  cpu_torch_adam .................................. False
[1,0]<stdout>:  curriculum_learning ............................. False
[1,0]<stdout>:  data_impl ....................................... infer
[1,0]<stdout>:  data_parallel_size .............................. 32
[1,0]<stdout>:  data_path ....................................... None
[1,0]<stdout>:  dataloader_type ................................. single
[1,0]<stdout>:  DDP_impl ........................................ local
[1,0]<stdout>:  decoder_seq_length .............................. None
[1,0]<stdout>:  deepscale ....................................... False
[1,0]<stdout>:  deepscale_config ................................ None
[1,0]<stdout>:  deepspeed ....................................... True
[1,0]<stdout>:  deepspeed_activation_checkpointing .............. False
[1,0]<stdout>:  deepspeed_config ................................ None
[1,0]<stdout>:  deepspeed_mpi ................................... False
[1,0]<stdout>:  distribute_checkpointed_activations ............. False
[1,0]<stdout>:  distributed_backend ............................. nccl[1,0]<stdout>:
[1,0]<stdout>:  ds_inference .................................... True
[1,0]<stdout>:  embedding_path .................................. None
[1,0]<stdout>:  encoder_seq_length .............................. 30
[1,0]<stdout>:  eod_mask_loss ................................... False[1,0]<stdout>:
[1,0]<stdout>:  eval_interval ................................... 1000
[1,0]<stdout>:  eval_iters ...................................... 100
[1,0]<stdout>:  evidence_data_path .............................. None
[1,0]<stdout>:  exit_duration_in_mins ........................... None
[1,0]<stdout>:  exit_interval ................................... None
[1,0]<stdout>:  expert_interval ................................. 2
[1,0]<stdout>:  ffn_hidden_size ................................. 12288[1,0]<stdout>:
[1,0]<stdout>:  finetune ........................................ False
[1,0]<stdout>:  fp16 ............................................ True
[1,0]<stdout>:  fp16_lm_cross_entropy ........................... False
[1,0]<stdout>:  fp32_residual_connection ........................ False
[1,0]<stdout>:  genfile ......................................... unconditional_samples.json[1,0]<stdout>:
[1,0]<stdout>:  global_batch_size ............................... 256
[1,0]<stdout>:  greedy .......................................... False
[1,0]<stdout>:  hidden_dropout .................................. 0.1
[1,0]<stdout>:  hidden_size ..................................... 3072
[1,0]<stdout>:  hysteresis ...................................... 2[1,0]<stdout>:
[1,0]<stdout>:  ict_head_size ................................... None
[1,0]<stdout>:  ict_load ........................................ None
[1,0]<stdout>:  img_dim ......................................... 224
[1,0]<stdout>:  indexer_batch_size .............................. 128
[1,0]<stdout>:  indexer_log_interval ............................ 1000
[1,0]<stdout>:  init_method_std ................................. 0.02
[1,0]<stdout>:  init_method_xavier_uniform ...................... False
[1,0]<stdout>:  initial_loss_scale .............................. 4294967296
[1,0]<stdout>:  kv_channels ..................................... 96
[1,0]<stdout>:  layernorm_epsilon ............................... 1e-05
[1,0]<stdout>:  lazy_mpu_init ................................... None
[1,0]<stdout>:  load ............................................ checkpoints/gpt2_345m
[1,0]<stdout>:  local_rank ...................................... None
[1,0]<stdout>:  log_batch_size_to_tensorboard ................... False
[1,0]<stdout>:  log_interval .................................... 1
[1,0]<stdout>:  log_learning_rate_to_tensorboard ................ True
[1,0]<stdout>:  log_loss_scale_to_tensorboard ................... True[1,0]<stdout>:
[1,0]<stdout>:  log_num_zeros_in_grad ........................... False[1,0]<stdout>:
[1,0]<stdout>:  log_params_norm ................................. False
[1,0]<stdout>:  log_timers_to_tensorboard ....................... False
[1,0]<stdout>:  log_validation_ppl_to_tensorboard ............... False[1,0]<stdout>:
[1,0]<stdout>:  loss_scale ...................................... None
[1,0]<stdout>:  loss_scale_window ............................... 1000
[1,0]<stdout>:  lr .............................................. None
[1,0]<stdout>:  lr_decay_iters .................................. None
[1,0]<stdout>:  lr_decay_samples ................................ None
[1,0]<stdout>:  lr_decay_style .................................. linear
[1,0]<stdout>:  lr_decay_tokens ................................. None
[1,0]<stdout>:  lr_warmup_fraction .............................. None[1,0]<stdout>:
[1,0]<stdout>:  lr_warmup_iters ................................. 0
[1,0]<stdout>:  lr_warmup_samples ............................... 0
[1,0]<stdout>:  make_vocab_size_divisible_by .................... 128
[1,0]<stdout>:  mask_prob ....................................... 0.15
[1,0]<stdout>:  masked_softmax_fusion ........................... True
[1,0]<stdout>:  max_position_embeddings ......................... 1024
[1,0]<stdout>:  memory_centric_tiled_linear ..................... False
[1,0]<stdout>:  merge_file ...................................... gpt2-merges.txt
[1,0]<stdout>:  micro_batch_size ................................ 8
[1,0]<stdout>:  min_loss_scale .................................. 1.0
[1,0]<stdout>:  min_lr .......................................... 0.0
[1,0]<stdout>:  mmap_warmup ..................................... False
[1,0]<stdout>:  moe_eval_capacity_factor ........................ 1.0
[1,0]<stdout>:  moe_min_capacity ................................ 4
[1,0]<stdout>:  moe_token_dropping .............................. True
[1,0]<stdout>:  moe_train_capacity_factor ....................... 1.0
[1,0]<stdout>:  no_load_optim ................................... True
[1,0]<stdout>:  no_load_rng ..................................... True[1,0]<stdout>:
[1,0]<stdout>:  no_save_optim ................................... None
[1,0]<stdout>:  no_save_rng ..................................... None
[1,0]<stdout>:  num_attention_heads ............................. 32
[1,0]<stdout>:  num_channels .................................... 3
[1,0]<stdout>:  num_classes ..................................... 1000
[1,0]<stdout>:  num_experts ..................................... 128
[1,0]<stdout>:  num_layers ...................................... 18[1,0]<stdout>:
[1,0]<stdout>:  num_layers_per_virtual_pipeline_stage ........... None
[1,0]<stdout>:  num_samples ..................................... 160
[1,0]<stdout>:  num_workers ..................................... 2
[1,0]<stdout>:  onnx_safe ....................................... None[1,0]<stdout>:
[1,0]<stdout>:  openai_gelu ..................................... False
[1,0]<stdout>:  optimizer ....................................... adam
[1,0]<stdout>:  out_seq_length .................................. 30
[1,0]<stdout>:  override_lr_scheduler ........................... False
[1,0]<stdout>:  params_dtype .................................... torch.float16
[1,0]<stdout>:  partition_activations ........................... False
[1,0]<stdout>:  patch_dim ....................................... 16
[1,0]<stdout>:  pipeline_model_parallel_size .................... 1
[1,0]<stdout>:  profile_backward ................................ False
[1,0]<stdout>:  query_in_block_prob ............................. 0.1
[1,0]<stdout>:  rampup_batch_size ............................... None
[1,0]<stdout>:  rank ............................................ 0
[1,0]<stdout>:  recompute ....................................... False
[1,0]<stdout>:  remote_device ................................... none
[1,0]<stdout>:  reset_attention_mask ............................ False
[1,0]<stdout>:  reset_position_ids .............................. False
[1,0]<stdout>:  retriever_report_topk_accuracies ................ []
[1,0]<stdout>:  retriever_score_scaling ......................... False[1,0]<stdout>:
[1,0]<stdout>:  retriever_seq_length ............................ 256
[1,0]<stdout>:  sample_input_file ............................... None
[1,0]<stdout>:  sample_output_file .............................. None
[1,0]<stdout>:  sample_rate ..................................... 1.0
[1,0]<stdout>:  save ............................................ None
[1,0]<stdout>:  save_interval ................................... None
[1,0]<stdout>:  scatter_gather_tensors_in_pipeline .............. True
[1,0]<stdout>:  scattered_embeddings ............................ False
[1,0]<stdout>:  seed ............................................ 1234
[1,0]<stdout>:  seq_length ...................................... 30
[1,0]<stdout>:  sgd_momentum .................................... 0.9
[1,0]<stdout>:  short_seq_prob .................................. 0.1
[1,0]<stdout>:  split ........................................... 969, 30, 1
[1,0]<stdout>:  split_transformers .............................. False[1,0]<stdout>:
[1,0]<stdout>:  synchronize_each_layer .......................... False
[1,0]<stdout>:  temperature ..................................... 1.0
[1,0]<stdout>:  tensor_model_parallel_size ...................... 1
[1,0]<stdout>:  tensorboard_dir ................................. None
[1,0]<stdout>:  tensorboard_log_interval ........................ 1
[1,0]<stdout>:  tensorboard_queue_size .......................... 1000
[1,0]<stdout>:  tile_factor ..................................... 1
[1,0]<stdout>:  titles_data_path ................................ None
[1,0]<stdout>:  tokenizer_type .................................. GPT2BPETokenizer
[1,0]<stdout>:  top_k ........................................... 0
[1,0]<stdout>:  top_p ........................................... 0.9
[1,0]<stdout>:  topk ............................................ 1
[1,0]<stdout>:  train_iters ..................................... None
[1,0]<stdout>:  train_samples ................................... None
[1,0]<stdout>:  train_tokens .................................... None[1,0]<stdout>:
[1,0]<stdout>:  use_checkpoint_lr_scheduler ..................... False[1,0]<stdout>:
[1,0]<stdout>:  use_contiguous_buffers_in_ddp ................... False
[1,0]<stdout>:  use_cpu_initialization .......................... None
[1,0]<stdout>:  use_one_sent_docs ............................... False
[1,0]<stdout>:  use_pin_memory .................................. False
[1,0]<stdout>:  virtual_pipeline_model_parallel_size ............ None
[1,0]<stdout>:  vocab_extra_ids ................................. 0
[1,0]<stdout>:  vocab_file ...................................... gpt2-vocab.json
[1,0]<stdout>:  weight_decay .................................... 0.01
[1,0]<stdout>:  world_size ...................................... 32
[1,0]<stdout>:  zero_allgather_bucket_size ...................... 0.0
[1,0]<stdout>:  zero_contigious_gradients ....................... False
[1,0]<stdout>:  zero_reduce_bucket_size ......................... 0.0
[1,0]<stdout>:  zero_reduce_scatter ............................. False
[1,0]<stdout>:  zero_stage ...................................... 1.0
[1,0]<stdout>:-------------------- end of arguments ---------------------
[1,0]<stdout>:setting number of micro-batches to constant 1
[1,0]<stdout>:> building GPT2BPETokenizer tokenizer ...
[1,4]<stdout>:[2021-12-09 02:04:27,853] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,6]<stdout>:[2021-12-09 02:04:27,853] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,1]<stdout>:[2021-12-09 02:04:27,853] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,3]<stdout>:[2021-12-09 02:04:27,853] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,7]<stdout>:[2021-12-09 02:04:27,853] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,5]<stdout>:[2021-12-09 02:04:27,853] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,2]<stdout>:[2021-12-09 02:04:27,853] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,0]<stdout>: > padded vocab (size: 50257) with 47 dummy tokens (new size: 50304)
[1,0]<stdout>:> initializing torch distributed ...
[1,0]<stdout>:[2021-12-09 02:04:27,854] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,19]<stdout>:Loading extension module transformer_inference...
[1,16]<stdout>:Loading extension module transformer_inference...
[1,22]<stdout>:Loading extension module transformer_inference...
[1,20]<stdout>:Loading extension module transformer_inference...
[1,19]<stdout>:Time to load transformer_inference op: 9.166561365127563 seconds
[1,20]<stdout>:Time to load transformer_inference op: 9.13348650932312 seconds
[1,16]<stdout>:Time to load transformer_inference op: 9.154597282409668 seconds
[1,22]<stdout>:Time to load transformer_inference op: 9.143076181411743 seconds
[1,28]<stdout>:Loading extension module transformer_inference...
[1,29]<stdout>:Loading extension module transformer_inference...
[1,24]<stdout>:Loading extension module transformer_inference...
[1,17]<stdout>:Loading extension module transformer_inference...
[1,24]<stdout>:Time to load transformer_inference op: 9.110371589660645 seconds
[1,28]<stdout>:Time to load transformer_inference op: 9.158146858215332 seconds
[1,29]<stdout>:Time to load transformer_inference op: 9.135027885437012 seconds
[1,17]<stdout>:Time to load transformer_inference op: 9.282564163208008 seconds
[1,26]<stdout>:Loading extension module transformer_inference...
[1,25]<stdout>:Loading extension module transformer_inference...
[1,26]<stdout>:Time to load transformer_inference op: 9.410781383514404 seconds
[1,25]<stdout>:Time to load transformer_inference op: 9.291992902755737 seconds
[1,23]<stdout>:Loading extension module transformer_inference...
[1,23]<stdout>:Time to load transformer_inference op: 9.264289855957031 seconds
[1,21]<stdout>:Loading extension module transformer_inference...
[1,21]<stdout>:Time to load transformer_inference op: 9.261283874511719 seconds
[1,31]<stdout>:Loading extension module transformer_inference...
[1,31]<stdout>:Time to load transformer_inference op: 9.280616283416748 seconds
[1,30]<stdout>:Loading extension module transformer_inference...
[1,30]<stdout>:Time to load transformer_inference op: 9.268044233322144 seconds
[1,27]<stdout>:Loading extension module transformer_inference...
[1,27]<stdout>:Time to load transformer_inference op: 9.262207984924316 seconds
[1,13]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:Time to load transformer_inference op: 9.125072240829468 seconds
[1,14]<stdout>:Time to load transformer_inference op: 9.114977598190308 seconds
[1,9]<stdout>:Time to load transformer_inference op: 9.295946836471558 seconds
[1,12]<stdout>:Time to load transformer_inference op: 9.290303230285645 seconds
[1,13]<stdout>:Time to load transformer_inference op: 9.13676404953003 seconds
[1,15]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 9.42324447631836 seconds
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 9.241071939468384 seconds
[1,8]<stdout>:Loading extension module transformer_inference...
[1,8]<stdout>:Time to load transformer_inference op: 9.235778093338013 seconds
[1,23]<stdout>:[2021-12-09 02:04:33,407] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,16]<stdout>:[2021-12-09 02:04:33,407] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,22]<stdout>:[2021-12-09 02:04:33,408] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,19]<stdout>:[2021-12-09 02:04:33,408] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,17]<stdout>:[2021-12-09 02:04:33,408] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,20]<stdout>:[2021-12-09 02:04:33,408] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,21]<stdout>:[2021-12-09 02:04:33,409] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,25]<stdout>:[2021-12-09 02:04:33,573] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,26]<stdout>:[2021-12-09 02:04:33,573] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,31]<stdout>:[2021-12-09 02:04:33,573] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,28]<stdout>:[2021-12-09 02:04:33,574] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,24]<stdout>:[2021-12-09 02:04:33,574] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,30]<stdout>:[2021-12-09 02:04:33,574] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,27]<stdout>:[2021-12-09 02:04:33,574] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,29]<stdout>:[2021-12-09 02:04:33,575] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,12]<stdout>:[2021-12-09 02:04:33,586] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,13]<stdout>:[2021-12-09 02:04:33,587] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,9]<stdout>:[2021-12-09 02:04:33,587] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,11]<stdout>:[2021-12-09 02:04:33,587] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,14]<stdout>:[2021-12-09 02:04:33,587] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,8]<stdout>:[2021-12-09 02:04:33,587] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,10]<stdout>:[2021-12-09 02:04:33,587] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,15]<stdout>:[2021-12-09 02:04:33,588] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,13]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=13, local_rank=5, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,10]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=10, local_rank=2, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,13]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,5]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=5, local_rank=5, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,1]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=1, local_rank=1, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,1]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,4]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=4, local_rank=4, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,4]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,2]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=2, local_rank=2, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,2]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,22]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=22, local_rank=6, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,10]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,3]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=3, local_rank=3, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,3]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,7]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=7, local_rank=7, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,7]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,6]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=6, local_rank=6, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,6]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,5]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,0]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=0, local_rank=0, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,21]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=21, local_rank=5, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,0]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,17]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=17, local_rank=1, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,17]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,22]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,21]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,19]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=19, local_rank=3, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,9]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=9, local_rank=1, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,11]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=11, local_rank=3, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,23]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=23, local_rank=7, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,20]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=20, local_rank=4, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,19]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,26]<stdout>:[2021-12-09 02:04:33,639] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=26, local_rank=2, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,26]<stdout>:[2021-12-09 02:04:33,639] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,29]<stdout>:[2021-12-09 02:04:33,639] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=29, local_rank=5, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,8]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=8, local_rank=0, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,12]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=12, local_rank=4, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,12]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,16]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=16, local_rank=0, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,15]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=15, local_rank=7, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,15]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,23]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,14]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=14, local_rank=6, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,14]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,16]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,9]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,20]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,11]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,18]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=18, local_rank=2, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,8]<stdout>:[2021-12-09 02:04:33,638] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,18]<stdout>:[2021-12-09 02:04:33,637] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,29]<stdout>:[2021-12-09 02:04:33,639] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,25]<stdout>:[2021-12-09 02:04:33,639] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=25, local_rank=1, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,25]<stdout>:[2021-12-09 02:04:33,639] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,30]<stdout>:[2021-12-09 02:04:33,639] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=30, local_rank=6, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,30]<stdout>:[2021-12-09 02:04:33,639] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,28]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=28, local_rank=4, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,27]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=27, local_rank=3, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,27]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,28]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,24]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=24, local_rank=0, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,31]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=31, local_rank=7, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,24]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,31]<stdout>:[2021-12-09 02:04:33,640] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,0]<stdout>:> initializing tensor model parallel with size 1
[1,0]<stdout>:> initializing pipeline model parallel with size 1
[1,0]<stdout>:> setting random seeds to 1234 ...
[1,0]<stdout>:> initializing model parallel cuda seeds on global rank 0, model parallel rank 0, and data parallel rank 0 with model parallel seed: 3952 and data parallel seed: 1234
[1,0]<stdout>:> compiling dataset index builder ...
[1,0]<stdout>:make: Entering directory '/home/amawa/moe-v2/Megatron-DeepSpeed/megatron/data'
[1,0]<stdout>:make: Nothing to be done for 'default'.
[1,0]<stdout>:make: Leaving directory '/home/amawa/moe-v2/Megatron-DeepSpeed/megatron/data'
[1,0]<stdout>:>>> done with dataset index builder. Compilation time: 0.086 seconds
[1,0]<stdout>:WARNING: constraints for invoking optimized fused softmax kernel are not met. We default back to unfused kernel invocations.
[1,0]<stdout>:> compiling and loading fused kernels ...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module scaled_upper_triang_masked_softmax_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module scaled_upper_triang_masked_softmax_cuda...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module scaled_masked_softmax_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module scaled_masked_softmax_cuda...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module fused_mix_prec_layer_norm_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module fused_mix_prec_layer_norm_cuda...
[1,0]<stdout>:NCCL version 2.8.4+cuda11.3
[1,0]<stdout>:>>> done with compiling and loading fused kernels. Compilation time: 16.289 seconds
[1,0]<stdout>:[2021-12-09 02:04:52,375] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed groups
[1,0]<stdout>:[2021-12-09 02:04:52,375] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed model parallel group with size 1
[1,0]<stdout>:[2021-12-09 02:04:52,713] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed expert parallel group with size 32
[1,0]<stdout>:[2021-12-09 02:04:52,724] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [0]
[1,0]<stdout>:[2021-12-09 02:04:52,734] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [1]
[1,0]<stdout>:[2021-12-09 02:04:52,744] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [2]
[1,0]<stdout>:[2021-12-09 02:04:52,755] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [3]
[1,0]<stdout>:[2021-12-09 02:04:52,765] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [4]
[1,0]<stdout>:[2021-12-09 02:04:52,775] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [5]
[1,0]<stdout>:[2021-12-09 02:04:52,786] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [6]
[1,0]<stdout>:[2021-12-09 02:04:52,796] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [7]
[1,0]<stdout>:[2021-12-09 02:04:52,806] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [8]
[1,0]<stdout>:[2021-12-09 02:04:52,816] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [9]
[1,0]<stdout>:[2021-12-09 02:04:52,827] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [10]
[1,0]<stdout>:[2021-12-09 02:04:52,837] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [11]
[1,0]<stdout>:[2021-12-09 02:04:52,847] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [12]
[1,0]<stdout>:[2021-12-09 02:04:52,857] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [13]
[1,0]<stdout>:[2021-12-09 02:04:52,868] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [14]
[1,0]<stdout>:[2021-12-09 02:04:52,868] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [15]
[1,0]<stdout>:[2021-12-09 02:04:52,889] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [16]
[1,0]<stdout>:[2021-12-09 02:04:52,889] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [17]
[1,0]<stdout>:[2021-12-09 02:04:52,909] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [18]
[1,0]<stdout>:[2021-12-09 02:04:52,919] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [19]
[1,0]<stdout>:[2021-12-09 02:04:52,930] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [20]
[1,0]<stdout>:[2021-12-09 02:04:52,940] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [21]
[1,0]<stdout>:[2021-12-09 02:04:52,950] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [22]
[1,0]<stdout>:[2021-12-09 02:04:52,961] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [23]
[1,0]<stdout>:[2021-12-09 02:04:52,971] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [24]
[1,0]<stdout>:[2021-12-09 02:04:52,981] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [25]
[1,0]<stdout>:[2021-12-09 02:04:52,991] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [26]
[1,0]<stdout>:[2021-12-09 02:04:53,002] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [27]
[1,0]<stdout>:[2021-12-09 02:04:53,012] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [28]
[1,0]<stdout>:[2021-12-09 02:04:53,022] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [29]
[1,0]<stdout>:[2021-12-09 02:04:53,033] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [30]
[1,0]<stdout>:[2021-12-09 02:04:53,043] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [31]
[1,0]<stdout>:[2021-12-09 02:04:53,054] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert parallel process group with ranks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
[1,0]<stdout>:building GPT model ...
[1,0]<stdout>:[2021-12-09 02:04:53,123] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:04:53,176] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:04:53,229] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:04:53,281] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:04:53,334] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:04:53,388] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:04:53,442] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:04:53,494] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,11]<stdout>:[2021-12-09 02:04:53,542] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>:[2021-12-09 02:04:53,550] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,11]<stdout>:moe = True, moe_experts= 128
[1,31]<stdout>:[2021-12-09 02:04:53,549] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,11]<stdout>:************ 1 ***********
[1,29]<stdout>:[2021-12-09 02:04:53,550] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,25]<stdout>:[2021-12-09 02:04:53,551] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,31]<stdout>:moe = True, moe_experts= 128
[1,31]<stdout>:************ 1 ***********
[1,29]<stdout>:moe = True, moe_experts= 128
[1,29]<stdout>:************ 1 ***********
[1,25]<stdout>:moe = True, moe_experts= 128
[1,25]<stdout>:************ 1 ***********
[1,7]<stdout>:[2021-12-09 02:04:53,563] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,2]<stdout>:[2021-12-09 02:04:53,566] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,9]<stdout>:[2021-12-09 02:04:53,564] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,10]<stdout>:[2021-12-09 02:04:53,565] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,7]<stdout>:moe = True, moe_experts= 128
[1,3]<stdout>:[2021-12-09 02:04:53,569] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,7]<stdout>:************ 1 ***********
[1,2]<stdout>:moe = True, moe_experts= 128
[1,2]<stdout>:************ 1 ***********
[1,9]<stdout>:moe = True, moe_experts= 128
[1,9]<stdout>:************ 1 ***********
[1,10]<stdout>:moe = True, moe_experts= 128
[1,10]<stdout>:************ 1 ***********
[1,3]<stdout>:moe = True, moe_experts= 128
[1,3]<stdout>:************ 1 ***********
[1,18]<stdout>:[2021-12-09 02:04:53,574] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,12]<stdout>:[2021-12-09 02:04:53,575] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,21]<stdout>:[2021-12-09 02:04:53,575] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,17]<stdout>:[2021-12-09 02:04:53,577] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,8]<stdout>:[2021-12-09 02:04:53,578] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,27]<stdout>:[2021-12-09 02:04:53,580] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,22]<stdout>:[2021-12-09 02:04:53,578] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,14]<stdout>:[2021-12-09 02:04:53,580] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,15]<stdout>:[2021-12-09 02:04:53,580] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>: > number of parameters on (tensor, pipeline) model parallel rank (0, 0): 4239221760
[1,0]<stdout>:[2021-12-09 02:04:53,583] [INFO] [logging.py:69:log_dist] [Rank 0] DeepSpeed info: version=0.5.7+e806499e, git-hash=e806499e, git-branch=merge-moe-specialized
[1,0]<stdout>:[2021-12-09 02:04:53,583] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,24]<stdout>:[2021-12-09 02:04:53,582] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,13]<stdout>:[2021-12-09 02:04:53,581] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,18]<stdout>:moe = True, moe_experts= 128
[1,4]<stdout>:[2021-12-09 02:04:53,584] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,18]<stdout>:************ 1 ***********
[1,12]<stdout>:moe = True, moe_experts= 128
[1,12]<stdout>:************ 1 ***********
[1,5]<stdout>:[2021-12-09 02:04:53,584] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,21]<stdout>:moe = True, moe_experts= 128
[1,21]<stdout>:************ 1 ***********
[1,1]<stdout>:[2021-12-09 02:04:53,585] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,28]<stdout>:[2021-12-09 02:04:53,584] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,30]<stdout>:[2021-12-09 02:04:53,585] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,26]<stdout>:[2021-12-09 02:04:53,585] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,17]<stdout>:moe = True, moe_experts= 128
[1,17]<stdout>:************ 1 ***********
[1,8]<stdout>:moe = True, moe_experts= 128
[1,8]<stdout>:************ 1 ***********
[1,6]<stdout>:[2021-12-09 02:04:53,587] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,20]<stdout>:[2021-12-09 02:04:53,584] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,27]<stdout>:moe = True, moe_experts= 128
[1,27]<stdout>:************ 1 ***********
[1,22]<stdout>:moe = True, moe_experts= 128
[1,22]<stdout>:************ 1 ***********
[1,16]<stdout>:[2021-12-09 02:04:53,585] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,14]<stdout>:moe = True, moe_experts= 128
[1,14]<stdout>:************ 1 ***********
[1,15]<stdout>:moe = True, moe_experts= 128
[1,15]<stdout>:************ 1 ***********
[1,24]<stdout>:moe = True, moe_experts= 128
[1,24]<stdout>:************ 1 ***********
[1,13]<stdout>:moe = True, moe_experts= 128
[1,23]<stdout>:[2021-12-09 02:04:53,586] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,13]<stdout>:************ 1 ***********
[1,0]<stdout>:moe = True, moe_experts= 128
[1,19]<stdout>:[2021-12-09 02:04:53,587] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>:************ 1 ***********
[1,4]<stdout>:moe = True, moe_experts= 128
[1,4]<stdout>:************ 1 ***********
[1,5]<stdout>:moe = True, moe_experts= 128
[1,5]<stdout>:************ 1 ***********
[1,1]<stdout>:moe = True, moe_experts= 128
[1,1]<stdout>:************ 1 ***********
[1,28]<stdout>:moe = True, moe_experts= 128
[1,28]<stdout>:************ 1 ***********
[1,30]<stdout>:moe = True, moe_experts= 128
[1,30]<stdout>:************ 1 ***********
[1,26]<stdout>:moe = True, moe_experts= 128
[1,26]<stdout>:************ 1 ***********
[1,6]<stdout>:moe = True, moe_experts= 128
[1,6]<stdout>:************ 1 ***********
[1,20]<stdout>:moe = True, moe_experts= 128
[1,20]<stdout>:************ 1 ***********
[1,16]<stdout>:moe = True, moe_experts= 128
[1,16]<stdout>:************ 1 ***********
[1,23]<stdout>:moe = True, moe_experts= 128
[1,23]<stdout>:************ 1 ***********
[1,19]<stdout>:moe = True, moe_experts= 128
[1,19]<stdout>:************ 1 ***********
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 0.03549075126647949 seconds
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,29]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,29]<stdout>:Loading extension module transformer_inference...
[1,31]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,31]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,31]<stdout>:Loading extension module transformer_inference...
[1,29]<stdout>:Time to load transformer_inference op: 0.03491663932800293 seconds
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:Time to load transformer_inference op: 0.0365300178527832 seconds
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,25]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,25]<stdout>:Loading extension module transformer_inference...
[1,25]<stdout>:Time to load transformer_inference op: 0.03451180458068848 seconds
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Time to load transformer_inference op: 0.03440356254577637 seconds
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,10]<stdout>:Time to load transformer_inference op: 0.035591840744018555 seconds
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Time to load transformer_inference op: 0.0376741886138916 seconds
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,7]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 0.03881549835205078 seconds
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4[1,18]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:
[1,3]<stdout>:Time to load transformer_inference op: 0.0380704402923584 seconds
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,18]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,21]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,18]<stdout>:Time to load transformer_inference op: 0.035830020904541016 seconds
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:Time to load transformer_inference op: 0.03433084487915039 seconds
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,21]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,20]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:Time to load transformer_inference op: 0.034995317459106445 seconds
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,22]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,20]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,20]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 0.03302454948425293 seconds
[1,0]<stdout>:DeepSpeed Transformer Inference config is [1,0]<stdout>: [1,0]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:Time to load transformer_inference op: 0.03156423568725586 seconds
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,22]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,22]<stdout>:Loading extension module transformer_inference...
[1,22]<stdout>:Time to load transformer_inference op: 0.03385567665100098 seconds
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,14]<stdout>:Time to load transformer_inference op: 0.03370547294616699 seconds
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,27]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:Time to load transformer_inference op: 0.0336613655090332 seconds
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,8]<stdout>:Time to load transformer_inference op: 0.035532474517822266 seconds
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,30]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,17]<stdout>:Loading extension module transformer_inference...
[1,17]<stdout>:Time to load transformer_inference op: 0.035398244857788086 seconds
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,30]<stdout>:Loading extension module transformer_inference...
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,30]<stdout>:Time to load transformer_inference op: 0.03293108940124512 seconds
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,13]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,16]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,13]<stdout>:Time to load transformer_inference op: 0.03429770469665527 seconds
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,15]<stdout>:Loading extension module transformer_inference...
[1,16]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,16]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 0.0357358455657959 seconds
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,4]<stdout>:Loading extension module transformer_inference...
[1,16]<stdout>:Time to load transformer_inference op: 0.03280305862426758 seconds
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:Time to load transformer_inference op: 0.03514909744262695 seconds
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,26]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,26]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,26]<stdout>:Time to load transformer_inference op: 0.034180402755737305 seconds
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,1]<stdout>:Time to load transformer_inference op: 0.03550553321838379 seconds
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,1]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,24]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,28]<stdout>:Loading extension module transformer_inference...
[1,24]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,24]<stdout>:Loading extension module transformer_inference...
[1,28]<stdout>:Time to load transformer_inference op: 0.036173105239868164 seconds
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:Time to load transformer_inference op: 0.03687906265258789 seconds
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,19]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,23]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,23]<stdout>:Loading extension module transformer_inference...
[1,23]<stdout>:Time to load transformer_inference op: 0.036934852600097656 seconds
[1,6]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:Time to load transformer_inference op: 0.0376124382019043 seconds
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,19]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,5]<stdout>:Loading extension module transformer_inference...
[1,19]<stdout>:Time to load transformer_inference op: 0.036446571350097656 seconds
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:Time to load transformer_inference op: 0.03912687301635742 seconds
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 0, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 0.034063100814819336 seconds
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,29]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,29]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,29]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:Time to load transformer_inference op: 0.034528255462646484 seconds
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,25]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,25]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,25]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:Time to load transformer_inference op: 0.03471112251281738 seconds
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,25]<stdout>:local_ep_size = 4
[1,31]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,31]<stdout>:Loading extension module transformer_inference...
[1,31]<stdout>:Time to load transformer_inference op: 0.03631186485290527 seconds
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:local_ep_size = 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,25]<stdout>:local_ep_size = 4
[1,9]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:Time to load transformer_inference op: 0.0341639518737793 seconds
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:Time to load transformer_inference op: 0.035521745681762695 seconds
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,20]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:local_ep_size = 4
[1,20]<stdout>:Time to load transformer_inference op: 0.032050371170043945 seconds
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 0.03359651565551758 seconds
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,2]<stdout>:Time to load transformer_inference op: 0.036205291748046875 seconds
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:local_ep_size = 4
[1,2]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:Time to load transformer_inference op: 0.03459453582763672 seconds
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,22]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:Time to load transformer_inference op: 0.03400111198425293 seconds
[1,18]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,21]<stdout>:Loading extension module transformer_inference...
[1,22]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,22]<stdout>:Loading extension module transformer_inference...
[1,21]<stdout>:Time to load transformer_inference op: 0.03498196601867676 seconds
[1,29]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:Time to load transformer_inference op: 0.03414320945739746 seconds
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,27]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,18]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,18]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:local_ep_size = 4
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:Time to load transformer_inference op: 0.03594565391540527 seconds
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,21]<stdout>:local_ep_size = 4
[1,10]<stdout>:local_ep_size = 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4
[1,16]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,27]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,27]<stdout>:Loading extension module transformer_inference...
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:Time to load transformer_inference op: 0.03293108940124512 seconds
[1,30]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,30]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:Time to load transformer_inference op: 0.033223628997802734 seconds
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,16]<stdout>:Loading extension module transformer_inference...
[1,27]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:Time to load transformer_inference op: 0.03279924392700195 seconds
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:local_ep_size = 4
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,16]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:
[1,13]<stdout>:Time to load transformer_inference op: 0.03336930274963379 seconds
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4
[1,7]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,7]<stdout>:Loading extension module transformer_inference...
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,17]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:Time to load transformer_inference op: 0.03540468215942383 seconds
[1,7]<stdout>:Time to load transformer_inference op: 0.03915977478027344 seconds
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is [1,7]<stdout>: [1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,15]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:local_ep_size = 4
[1,3]<stdout>:Time to load transformer_inference op: 0.03859376907348633 seconds
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:Time to load transformer_inference op: 0.03313755989074707 seconds
[1,17]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,17]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,17]<stdout>:Time to load transformer_inference op: 0.03486347198486328 seconds
[1,8]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,26]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,26]<stdout>:Loading extension module transformer_inference...
[1,26]<stdout>:Time to load transformer_inference op: 0.03449201583862305 seconds
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,4]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,4]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:Time to load transformer_inference op: 0.0352473258972168 seconds
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4
[1,4]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:Time to load transformer_inference op: 0.0357968807220459 seconds
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,1]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,22]<stdout>:local_ep_size = 4
[1,4]<stdout>:{'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,18]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4
[1,24]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,24]<stdout>:Loading extension module transformer_inference...
[1,31]<stdout>:local_ep_size = 4
[1,28]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,28]<stdout>:Loading extension module transformer_inference...
[1,24]<stdout>:Time to load transformer_inference op: 0.037102699279785156 seconds
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:Time to load transformer_inference op: 0.03704357147216797 seconds
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4
[1,11]<stdout>:local_ep_size = 4
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4
[1,7]<stdout>:local_ep_size = 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,19]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,19]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4
[1,0]<stdout>:local_ep_size = 4
[1,2]<stdout>:local_ep_size = 4
[1,19]<stdout>:Time to load transformer_inference op: 0.03563356399536133 seconds
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4
[1,23]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,23]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:Time to load transformer_inference op: 0.036950111389160156 seconds
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4
[1,10]<stdout>:local_ep_size = 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,6]<stdout>:Time to load transformer_inference op: 0.03672003746032715 seconds
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:local_ep_size = 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,5]<stdout>:Loading extension module transformer_inference...
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:Time to load transformer_inference op: 0.03790545463562012 seconds
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:local_ep_size = 4
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 4
[1,4]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 2, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 4
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,2]<stdout>:
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 3, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:local_ep_size = 4
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,26]<stdout>:local_ep_size = 4
[1,0]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:local_ep_size = 4
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4
[1,1]<stdout>:local_ep_size = 4
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4
[1,27]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 5, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4
[1,2]<stdout>:local_ep_size = 4
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:{'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4
[1,11]<stdout>:[2021-12-09 02:04:53,776] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4
[1,17]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4
[1,2]<stdout>:{'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4
[1,19]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, [1,3]<stdout>:'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,5]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4
[1,28]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:[2021-12-09 02:04:53,783] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:> DeepSpeed Inference initialized
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:[2021-12-09 02:04:53,786] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:[2021-12-09 02:04:53,787] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4
[1,27]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,29]<stdout>:> DeepSpeed Inference initialized
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4
[1,17]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}[1,5]<stdout>:
[1,13]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,5]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:NCCL version 2.8.4+cuda11.3
[1,19]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:> DeepSpeed Inference initialized
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:NCCL version 2.8.4+cuda11.3
[1,25]<stdout>:> DeepSpeed Inference initialized
[1,26]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, [1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,2]<stdout>:'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:NCCL version 2.8.4+cuda11.3
[1,0]<stdout>:local_ep_size = 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:NCCL version 2.8.4+cuda11.3
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4
[1,12]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:[2021-12-09 02:04:53,797] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:local_ep_size = 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:[2021-12-09 02:04:53,803] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,9]<stdout>:> DeepSpeed Inference initialized
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:NCCL version 2.8.4+cuda11.3
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4
[1,0]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:[2021-12-09 02:04:53,812] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:> DeepSpeed Inference initialized
[1,13]<stdout>:local_ep_size = 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:[2021-12-09 02:04:53,811] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:NCCL version 2.8.4+cuda11.3
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:[2021-12-09 02:04:53,812] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,0]<stdout>:[2021-12-09 02:04:53,815] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,19]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:[2021-12-09 02:04:53,814] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,26]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:[2021-12-09 02:04:53,815] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,20]<stdout>:local_ep_size = 4
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,13]<stdout>:[2021-12-09 02:04:53,815] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:[2021-12-09 02:04:53,818] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,2]<stdout>:> DeepSpeed Inference initialized
[1,3]<stdout>:[2021-12-09 02:04:53,818] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:[2021-12-09 02:04:53,816] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:[2021-12-09 02:04:53,817] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,1]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:> DeepSpeed Inference initialized
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:NCCL version 2.8.4+cuda11.3
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4
[1,6]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:[2021-12-09 02:04:53,820] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,14]<stdout>:> DeepSpeed Inference initialized
[1,0]<stdout>:> DeepSpeed Inference initialized
[1,16]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,4]<stdout>:[2021-12-09 02:04:53,822] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:> DeepSpeed Inference initialized
[1,12]<stdout>:NCCL version 2.8.4+cuda11.3
[1,5]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:> DeepSpeed Inference initialized
[1,20]<stdout>:[2021-12-09 02:04:53,819] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,14]<stdout>:NCCL version 2.8.4+cuda11.3
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:NCCL version 2.8.4+cuda11.3
[1,28]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,13]<stdout>:> DeepSpeed Inference initialized
[1,30]<stdout>:NCCL version 2.8.4+cuda11.3
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:> DeepSpeed Inference initialized
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,3]<stdout>:> DeepSpeed Inference initialized
[1,17]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:[2021-12-09 02:04:53,825] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,8]<stdout>:> DeepSpeed Inference initialized
[1,15]<stdout>:> DeepSpeed Inference initialized
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:NCCL version 2.8.4+cuda11.3
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:NCCL version 2.8.4+cuda11.3
[1,19]<stdout>:local_ep_size = 4
[1,7]<stdout>:NCCL version 2.8.4+cuda11.3
[1,8]<stdout>:NCCL version 2.8.4+cuda11.3
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:NCCL version 2.8.4+cuda11.3
[1,21]<stdout>:[2021-12-09 02:04:53,824] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,22]<stdout>:[2021-12-09 02:04:53,824] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:> DeepSpeed Inference initialized
[1,23]<stdout>:local_ep_size = 4
[1,16]<stdout>:[2021-12-09 02:04:53,825] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,4]<stdout>:> DeepSpeed Inference initialized
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,18]<stdout>:[2021-12-09 02:04:53,826] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:> DeepSpeed Inference initialized
[1,28]<stdout>:[2021-12-09 02:04:53,828] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,26]<stdout>:NCCL version 2.8.4+cuda11.3
[1,24]<stdout>:[2021-12-09 02:04:53,829] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,4]<stdout>:NCCL version 2.8.4+cuda11.3
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 4
[1,17]<stdout>:[2021-12-09 02:04:53,828] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:NCCL version 2.8.4+cuda11.3
[1,5]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:> DeepSpeed Inference initialized
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:> DeepSpeed Inference initialized
[1,22]<stdout>:> DeepSpeed Inference initialized
[1,1]<stdout>:NCCL version 2.8.4+cuda11.3
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,16]<stdout>:> DeepSpeed Inference initialized
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:NCCL version 2.8.4+cuda11.3
[1,18]<stdout>:> DeepSpeed Inference initialized
[1,28]<stdout>:> DeepSpeed Inference initialized
[1,22]<stdout>:NCCL version 2.8.4+cuda11.3
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=3072, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,24]<stdout>:> DeepSpeed Inference initialized
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:[2021-12-09 02:04:53,836] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,16]<stdout>:NCCL version 2.8.4+cuda11.3
[1,18]<stdout>:NCCL version 2.8.4+cuda11.3
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:[2021-12-09 02:04:53,838] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,28]<stdout>:NCCL version 2.8.4+cuda11.3
[1,24]<stdout>:NCCL version 2.8.4+cuda11.3
[1,17]<stdout>:> DeepSpeed Inference initialized
[1,19]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 3072, 'intermediate_size': 12288, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,17]<stdout>:NCCL version 2.8.4+cuda11.3
[1,6]<stdout>:> DeepSpeed Inference initialized
[1,5]<stdout>:> DeepSpeed Inference initialized
[1,6]<stdout>:NCCL version 2.8.4+cuda11.3
[1,19]<stdout>:[2021-12-09 02:04:53,842] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,23]<stdout>:[2021-12-09 02:04:53,843] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,5]<stdout>:NCCL version 2.8.4+cuda11.3
[1,19]<stdout>:> DeepSpeed Inference initialized
[1,23]<stdout>:> DeepSpeed Inference initialized
[1,19]<stdout>:NCCL version 2.8.4+cuda11.3
[1,23]<stdout>:NCCL version 2.8.4+cuda11.3
[1,31]<stdout>:test: range(0, 32)
[1,29]<stdout>:test: range(0, 32)
[1,16]<stdout>:test: range(0, 32)
[1,27]<stdout>:test: range(0, 32)
[1,25]<stdout>:test: range(0, 32)
[1,9]<stdout>:test: range(0, 32)
[1,28]<stdout>:test: range(0, 32)
[1,2]<stdout>:test: range(0, 32)
[1,24]<stdout>:test: range(0, 32)
[1,11]<stdout>:test: range(0, 32)
[1,30]<stdout>:test: range(0, 32)
[1,26]<stdout>:test: range(0, 32)
[1,18]<stdout>:test: range(0, 32)
[1,21]<stdout>:test: range(0, 32)
[1,8]<stdout>:test: range(0, 32)
[1,0]<stdout>:test: range(0, 32)
[1,17]<stdout>:test: range(0, 32)
[1,15]<stdout>:test: range(0, 32)
[1,14]<stdout>:test: range(0, 32)
[1,3]<stdout>:test: range(0, 32)
[1,5]<stdout>:test: range(0, 32)
[1,13]<stdout>:test: range(0, 32)
[1,12]<stdout>:test: range(0, 32)
[1,10]<stdout>:test: range(0, 32)
[1,19]<stdout>:test: range(0, 32)
[1,4]<stdout>:test: range(0, 32)
[1,6]<stdout>:test: range(0, 32)
[1,20]<stdout>:test: range(0, 32)
[1,7]<stdout>:test: range(0, 32)
[1,22]<stdout>:test: range(0, 32)
[1,23]<stdout>:test: range(0, 32)
[1,1]<stdout>:test: range(0, 32)
[1,0]<stdout>:====== latency stats {0} ====== 
[1,0]<stdout>:	Avg Latency:   469.94 ms
[1,0]<stdout>:	P50 Latency:   469.17 ms
[1,0]<stdout>:	P90 Latency:   471.14 ms
[1,0]<stdout>:	P95 Latency:   471.14 ms
[1,0]<stdout>:	P99 Latency:   471.14 ms
[1,0]<stdout>:	999 Latency:   471.14 ms
[1,0]<stdout>:====== latency stats {0} ====== model_latencies
[1,0]<stdout>:	Avg Latency:    14.60 ms
[1,0]<stdout>:	P50 Latency:    14.46 ms
[1,0]<stdout>:	P90 Latency:    15.01 ms
[1,0]<stdout>:	P95 Latency:    15.37 ms
[1,0]<stdout>:	P99 Latency:    16.30 ms
[1,0]<stdout>:	999 Latency:    18.21 ms
[1,0]<stdout>:====== latency stats {0} ====== single_token_latency
[1,0]<stdout>:	Avg Latency:    16.22 ms
[1,0]<stdout>:	P50 Latency:    16.07 ms
[1,0]<stdout>:	P90 Latency:    16.66 ms
[1,0]<stdout>:	P95 Latency:    16.96 ms
[1,0]<stdout>:	P99 Latency:    17.90 ms
[1,0]<stdout>:	999 Latency:    19.82 ms
