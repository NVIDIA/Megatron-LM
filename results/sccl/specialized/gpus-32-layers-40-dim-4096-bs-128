Warning: Permanently added '[192.168.0.71]:43529' (ECDSA) to the list of known hosts.
Warning: Permanently added '[192.168.0.87]:46844' (ECDSA) to the list of known hosts.
Warning: Permanently added '[192.168.0.34]:45820' (ECDSA) to the list of known hosts.
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:Detected CUDA files, patching ldflags
[1,9]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:Building extension module transformer_inference...
[1,9]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:ninja: no work to do.
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:Time to load transformer_inference op: 0.45809006690979004 seconds
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,25]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,29]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:Detected CUDA files, patching ldflags
[1,15]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,24]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,28]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,30]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,31]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,26]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,27]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:[2021-12-09 02:25:15,378] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,15]<stdout>:Building extension module transformer_inference...
[1,15]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,15]<stdout>:ninja: no work to do.
[1,15]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 0.721034049987793 seconds
[1,8]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,8]<stdout>:Time to load transformer_inference op: 0.8686656951904297 seconds
[1,13]<stdout>:Time to load transformer_inference op: 0.941866397857666 seconds
[1,10]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Time to load transformer_inference op: 0.7874069213867188 seconds
[1,10]<stdout>:Time to load transformer_inference op: 0.7006075382232666 seconds
[1,12]<stdout>:Time to load transformer_inference op: 0.776888370513916 seconds
[1,11]<stdout>:Time to load transformer_inference op: 0.7154827117919922 seconds
[1,20]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,22]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,19]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,20]<stdout>:Detected CUDA files, patching ldflags
[1,20]<stdout>:Emitting ninja build file /home/amawa/.cache/torch_extensions/transformer_inference/build.ninja...
[1,23]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:[2021-12-09 02:25:15,770] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,21]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,16]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,18]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,17]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:[2021-12-09 02:25:15,855] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,12]<stdout>:[2021-12-09 02:25:15,855] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,14]<stdout>:[2021-12-09 02:25:15,857] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,13]<stdout>:[2021-12-09 02:25:15,858] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,10]<stdout>:[2021-12-09 02:25:15,859] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,11]<stdout>:[2021-12-09 02:25:15,859] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,20]<stdout>:Building extension module transformer_inference...
[1,20]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,20]<stdout>:ninja: no work to do.
[1,20]<stdout>:Loading extension module transformer_inference...
[1,20]<stdout>:Time to load transformer_inference op: 0.5054135322570801 seconds
[1,23]<stdout>:Loading extension module transformer_inference...
[1,23]<stdout>:Time to load transformer_inference op: 0.39769506454467773 seconds
[1,21]<stdout>:Loading extension module transformer_inference...
[1,21]<stdout>:Time to load transformer_inference op: 0.36653757095336914 seconds
[1,22]<stdout>:Loading extension module transformer_inference...
[1,22]<stdout>:Time to load transformer_inference op: 0.5439937114715576 seconds
[1,16]<stdout>:Loading extension module transformer_inference...
[1,16]<stdout>:Time to load transformer_inference op: 0.3582737445831299 seconds
[1,18]<stdout>:Loading extension module transformer_inference...
[1,18]<stdout>:Time to load transformer_inference op: 0.3486146926879883 seconds
[1,17]<stdout>:Loading extension module transformer_inference...
[1,17]<stdout>:Time to load transformer_inference op: 0.33791017532348633 seconds
[1,19]<stdout>:Loading extension module transformer_inference...
[1,19]<stdout>:Time to load transformer_inference op: 0.5320403575897217 seconds
[1,21]<stdout>:[2021-12-09 02:25:16,377] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,16]<stdout>:[2021-12-09 02:25:16,378] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,20]<stdout>:[2021-12-09 02:25:16,378] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,23]<stdout>:[2021-12-09 02:25:16,378] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,17]<stdout>:[2021-12-09 02:25:16,378] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,22]<stdout>:[2021-12-09 02:25:16,378] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,19]<stdout>:[2021-12-09 02:25:16,379] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,18]<stdout>:[2021-12-09 02:25:16,379] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Time to load transformer_inference op: 3.182875394821167 seconds
[1,0]<stdout>:Time to load transformer_inference op: 3.1690759658813477 seconds
[1,3]<stdout>:Time to load transformer_inference op: 3.1565215587615967 seconds
[1,6]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:Time to load transformer_inference op: 3.2904775142669678 seconds
[1,5]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:Time to load transformer_inference op: 3.2846217155456543 seconds
[1,2]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Time to load transformer_inference op: 3.472165822982788 seconds
[1,4]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:Time to load transformer_inference op: 3.421532392501831 seconds
[1,7]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 3.284182548522949 seconds
[1,26]<stdout>:Loading extension module transformer_inference...
[1,27]<stdout>:Loading extension module transformer_inference...
[1,24]<stdout>:Loading extension module transformer_inference...
[1,26]<stdout>:Time to load transformer_inference op: 3.126052141189575 seconds
[1,27]<stdout>:Time to load transformer_inference op: 3.1155712604522705 seconds
[1,24]<stdout>:Time to load transformer_inference op: 3.300901174545288 seconds
[1,28]<stdout>:Loading extension module transformer_inference...
[1,28]<stdout>:Time to load transformer_inference op: 3.291309118270874 seconds
[1,29]<stdout>:Loading extension module transformer_inference...
[1,29]<stdout>:Time to load transformer_inference op: 3.4136722087860107 seconds
[1,30]<stdout>:Loading extension module transformer_inference...
[1,30]<stdout>:Time to load transformer_inference op: 3.2512385845184326 seconds
[1,31]<stdout>:Loading extension module transformer_inference...
[1,31]<stdout>:Time to load transformer_inference op: 3.221086025238037 seconds
[1,25]<stdout>:Loading extension module transformer_inference...
[1,25]<stdout>:Time to load transformer_inference op: 3.497962236404419 seconds
[1,0]<stdout>:using world size: 32, data-parallel-size: 32, tensor-model-parallel size: 1, pipeline-model-parallel size: 1 
[1,0]<stdout>:WARNING: overriding default arguments for tokenizer_type:GPT2BPETokenizer                        with tokenizer_type:GPT2BPETokenizer
[1,0]<stdout>:setting global batch size to 4096
[1,0]<stdout>:using torch.float16 for parameters ...
[1,0]<stdout>:------------------------ arguments ------------------------
[1,0]<stdout>:  accumulate_allreduce_grads_in_fp32 .............. False
[1,0]<stdout>:  adam_beta1 ...................................... 0.9
[1,0]<stdout>:  adam_beta2 ...................................... 0.999
[1,0]<stdout>:  adam_eps ........................................ 1e-08
[1,0]<stdout>:  adlr_autoresume ................................. False
[1,0]<stdout>:  adlr_autoresume_interval ........................ 1000
[1,0]<stdout>:  apply_query_key_layer_scaling ................... True
[1,0]<stdout>:  apply_residual_connection_post_layernorm ........ False
[1,0]<stdout>:  attention_dropout ............................... 0.1
[1,0]<stdout>:  attention_softmax_in_fp32 ....................... False
[1,0]<stdout>:  bert_binary_head ................................ True
[1,0]<stdout>:  bert_load ....................................... None
[1,0]<stdout>:  bf16 ............................................ False
[1,0]<stdout>:  bias_dropout_fusion ............................. True
[1,0]<stdout>:  bias_gelu_fusion ................................ True
[1,0]<stdout>:  biencoder_projection_dim ........................ 0
[1,0]<stdout>:  biencoder_shared_query_context_model ............ False
[1,0]<stdout>:  block_data_path ................................. None
[1,0]<stdout>:  checkpoint_activations .......................... False
[1,0]<stdout>:  checkpoint_in_cpu ............................... False
[1,0]<stdout>:  checkpoint_num_layers ........................... 1
[1,0]<stdout>:  clip_grad ....................................... 1.0
[1,0]<stdout>:  consumed_train_samples .......................... 0
[1,0]<stdout>:  consumed_train_tokens ........................... 0
[1,0]<stdout>:  consumed_valid_samples .......................... 0
[1,0]<stdout>:  contigious_checkpointing ........................ False
[1,0]<stdout>:  cpu_optimizer ................................... False
[1,0]<stdout>:  cpu_torch_adam .................................. False
[1,0]<stdout>:  curriculum_learning ............................. False
[1,0]<stdout>:  data_impl ....................................... infer
[1,0]<stdout>:  data_parallel_size .............................. 32
[1,0]<stdout>:  data_path ....................................... None[1,0]<stdout>:
[1,0]<stdout>:  dataloader_type ................................. single
[1,0]<stdout>:  DDP_impl ........................................ local
[1,0]<stdout>:  decoder_seq_length .............................. None
[1,0]<stdout>:  deepscale ....................................... False
[1,0]<stdout>:  deepscale_config ................................ None
[1,0]<stdout>:  deepspeed ....................................... True
[1,0]<stdout>:  deepspeed_activation_checkpointing .............. False
[1,0]<stdout>:  deepspeed_config ................................ None
[1,0]<stdout>:  deepspeed_mpi ................................... False
[1,0]<stdout>:  distribute_checkpointed_activations ............. False
[1,0]<stdout>:  distributed_backend ............................. nccl
[1,0]<stdout>:  ds_inference .................................... True
[1,0]<stdout>:  embedding_path .................................. None
[1,0]<stdout>:  encoder_seq_length .............................. 30
[1,0]<stdout>:  eod_mask_loss ................................... False
[1,0]<stdout>:  eval_interval ................................... 1000
[1,0]<stdout>:  eval_iters ...................................... 100
[1,0]<stdout>:  evidence_data_path .............................. None
[1,0]<stdout>:  exit_duration_in_mins ........................... None
[1,0]<stdout>:  exit_interval ................................... None
[1,0]<stdout>:  expert_interval ................................. 2
[1,0]<stdout>:  ffn_hidden_size ................................. 16384
[1,0]<stdout>:  finetune ........................................ False[1,0]<stdout>:
[1,0]<stdout>:  fp16 ............................................ True
[1,0]<stdout>:  fp16_lm_cross_entropy ........................... False[1,0]<stdout>:
[1,0]<stdout>:  fp32_residual_connection ........................ False
[1,0]<stdout>:  genfile ......................................... unconditional_samples.json[1,0]<stdout>:
[1,0]<stdout>:  global_batch_size ............................... 4096
[1,0]<stdout>:  greedy .......................................... False
[1,0]<stdout>:  hidden_dropout .................................. 0.1
[1,0]<stdout>:  hidden_size ..................................... 4096
[1,0]<stdout>:  hysteresis ...................................... 2
[1,0]<stdout>:  ict_head_size ................................... None
[1,0]<stdout>:  ict_load ........................................ None
[1,0]<stdout>:  img_dim ......................................... 224
[1,0]<stdout>:  indexer_batch_size .............................. 128
[1,0]<stdout>:  indexer_log_interval ............................ 1000
[1,0]<stdout>:  init_method_std ................................. 0.02
[1,0]<stdout>:  init_method_xavier_uniform ...................... False
[1,0]<stdout>:  initial_loss_scale .............................. 4294967296
[1,0]<stdout>:  kv_channels ..................................... 128[1,0]<stdout>:
[1,0]<stdout>:  layernorm_epsilon ............................... 1e-05
[1,0]<stdout>:  lazy_mpu_init ................................... None
[1,0]<stdout>:  load ............................................ checkpoints/gpt2_345m
[1,0]<stdout>:  local_rank ...................................... None[1,0]<stdout>:
[1,0]<stdout>:  log_batch_size_to_tensorboard ................... False
[1,0]<stdout>:  log_interval .................................... 1[1,0]<stdout>:
[1,0]<stdout>:  log_learning_rate_to_tensorboard ................ True
[1,0]<stdout>:  log_loss_scale_to_tensorboard ................... True
[1,0]<stdout>:  log_num_zeros_in_grad ........................... False
[1,0]<stdout>:  log_params_norm ................................. False
[1,0]<stdout>:  log_timers_to_tensorboard ....................... False[1,0]<stdout>:
[1,0]<stdout>:  log_validation_ppl_to_tensorboard ............... False
[1,0]<stdout>:  loss_scale ...................................... None
[1,0]<stdout>:  loss_scale_window ............................... 1000
[1,0]<stdout>:  lr .............................................. None
[1,0]<stdout>:  lr_decay_iters .................................. None
[1,0]<stdout>:  lr_decay_samples ................................ None[1,0]<stdout>:
[1,0]<stdout>:  lr_decay_style .................................. linear
[1,0]<stdout>:  lr_decay_tokens ................................. None
[1,0]<stdout>:  lr_warmup_fraction .............................. None
[1,0]<stdout>:  lr_warmup_iters ................................. 0
[1,0]<stdout>:  lr_warmup_samples ............................... 0
[1,0]<stdout>:  make_vocab_size_divisible_by .................... 128
[1,0]<stdout>:  mask_prob ....................................... 0.15
[1,0]<stdout>:  masked_softmax_fusion ........................... True
[1,0]<stdout>:  max_position_embeddings ......................... 1024
[1,0]<stdout>:  memory_centric_tiled_linear ..................... False
[1,0]<stdout>:  merge_file ...................................... gpt2-merges.txt
[1,0]<stdout>:  micro_batch_size ................................ 128[1,0]<stdout>:
[1,0]<stdout>:  min_loss_scale .................................. 1.0
[1,0]<stdout>:  min_lr .......................................... 0.0
[1,0]<stdout>:  mmap_warmup ..................................... False
[1,0]<stdout>:  moe_eval_capacity_factor ........................ 1.0
[1,0]<stdout>:  moe_min_capacity ................................ 4[1,0]<stdout>:
[1,0]<stdout>:  moe_token_dropping .............................. True
[1,0]<stdout>:  moe_train_capacity_factor ....................... 1.0
[1,0]<stdout>:  no_load_optim ................................... True[1,0]<stdout>:
[1,0]<stdout>:  no_load_rng ..................................... True
[1,0]<stdout>:  no_save_optim ................................... None
[1,0]<stdout>:  no_save_rng ..................................... None
[1,0]<stdout>:  num_attention_heads ............................. 32
[1,0]<stdout>:  num_channels .................................... 3
[1,0]<stdout>:  num_classes ..................................... 1000
[1,0]<stdout>:  num_experts ..................................... 128
[1,0]<stdout>:  num_layers ...................................... 40
[1,0]<stdout>:  num_layers_per_virtual_pipeline_stage ........... None
[1,0]<stdout>:  num_samples ..................................... 2560
[1,0]<stdout>:  num_workers ..................................... 2
[1,0]<stdout>:  onnx_safe ....................................... None
[1,0]<stdout>:  openai_gelu ..................................... False
[1,0]<stdout>:  optimizer ....................................... adam
[1,0]<stdout>:  out_seq_length .................................. 30
[1,0]<stdout>:  override_lr_scheduler ........................... False[1,0]<stdout>:
[1,0]<stdout>:  params_dtype .................................... torch.float16
[1,0]<stdout>:  partition_activations ........................... False[1,0]<stdout>:
[1,0]<stdout>:  patch_dim ....................................... 16
[1,0]<stdout>:  pipeline_model_parallel_size .................... 1
[1,0]<stdout>:  profile_backward ................................ False
[1,0]<stdout>:  query_in_block_prob ............................. 0.1
[1,0]<stdout>:  rampup_batch_size ............................... None
[1,0]<stdout>:  rank ............................................ 0
[1,0]<stdout>:  recompute ....................................... False
[1,0]<stdout>:  remote_device ................................... none
[1,0]<stdout>:  reset_attention_mask ............................ False
[1,0]<stdout>:  reset_position_ids .............................. False
[1,0]<stdout>:  retriever_report_topk_accuracies ................ []
[1,0]<stdout>:  retriever_score_scaling ......................... False
[1,0]<stdout>:  retriever_seq_length ............................ 256
[1,0]<stdout>:  sample_input_file ............................... None
[1,0]<stdout>:  sample_output_file .............................. None
[1,0]<stdout>:  sample_rate ..................................... 1.0
[1,0]<stdout>:  save ............................................ None
[1,0]<stdout>:  save_interval ................................... None
[1,0]<stdout>:  scatter_gather_tensors_in_pipeline .............. True[1,0]<stdout>:
[1,0]<stdout>:  scattered_embeddings ............................ False
[1,0]<stdout>:  seed ............................................ 1234
[1,0]<stdout>:  seq_length ...................................... 30
[1,0]<stdout>:  sgd_momentum .................................... 0.9
[1,0]<stdout>:  short_seq_prob .................................. 0.1[1,0]<stdout>:
[1,0]<stdout>:  split ........................................... 969, 30, 1
[1,0]<stdout>:  split_transformers .............................. False
[1,0]<stdout>:  synchronize_each_layer .......................... False
[1,0]<stdout>:  temperature ..................................... 1.0
[1,0]<stdout>:  tensor_model_parallel_size ...................... 1
[1,0]<stdout>:  tensorboard_dir ................................. None
[1,0]<stdout>:  tensorboard_log_interval ........................ 1
[1,0]<stdout>:  tensorboard_queue_size .......................... 1000
[1,0]<stdout>:  tile_factor ..................................... 1[1,0]<stdout>:
[1,0]<stdout>:  titles_data_path ................................ None
[1,0]<stdout>:  tokenizer_type .................................. GPT2BPETokenizer
[1,0]<stdout>:  top_k ........................................... 0
[1,0]<stdout>:  top_p ........................................... 0.9[1,0]<stdout>:
[1,0]<stdout>:  topk ............................................ 1
[1,0]<stdout>:  train_iters ..................................... None
[1,0]<stdout>:  train_samples ................................... None
[1,0]<stdout>:  train_tokens .................................... None
[1,0]<stdout>:  use_checkpoint_lr_scheduler ..................... False
[1,0]<stdout>:  use_contiguous_buffers_in_ddp ................... False
[1,0]<stdout>:  use_cpu_initialization .......................... None
[1,0]<stdout>:  use_one_sent_docs ............................... False
[1,0]<stdout>:  use_pin_memory .................................. False
[1,0]<stdout>:  virtual_pipeline_model_parallel_size ............ None
[1,0]<stdout>:  vocab_extra_ids ................................. 0
[1,0]<stdout>:  vocab_file ...................................... gpt2-vocab.json
[1,0]<stdout>:  weight_decay .................................... 0.01
[1,0]<stdout>:  world_size ...................................... 32
[1,0]<stdout>:  zero_allgather_bucket_size ...................... 0.0
[1,0]<stdout>:  zero_contigious_gradients ....................... False
[1,0]<stdout>:  zero_reduce_bucket_size ......................... 0.0[1,0]<stdout>:
[1,0]<stdout>:  zero_reduce_scatter ............................. False
[1,0]<stdout>:  zero_stage ...................................... 1.0
[1,0]<stdout>:-------------------- end of arguments ---------------------
[1,0]<stdout>:setting number of micro-batches to constant 1
[1,0]<stdout>:> building GPT2BPETokenizer tokenizer ...
[1,6]<stdout>:[2021-12-09 02:25:18,578] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,2]<stdout>:[2021-12-09 02:25:18,578] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,7]<stdout>:[2021-12-09 02:25:18,578] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,5]<stdout>:[2021-12-09 02:25:18,578] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,3]<stdout>:[2021-12-09 02:25:18,579] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,1]<stdout>:[2021-12-09 02:25:18,579] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,4]<stdout>:[2021-12-09 02:25:18,579] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,0]<stdout>: > padded vocab (size: 50257) with 47 dummy tokens (new size: 50304)
[1,0]<stdout>:> initializing torch distributed ...
[1,0]<stdout>:[2021-12-09 02:25:18,580] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,31]<stdout>:[2021-12-09 02:25:18,884] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,30]<stdout>:[2021-12-09 02:25:18,884] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,29]<stdout>:[2021-12-09 02:25:18,884] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,27]<stdout>:[2021-12-09 02:25:18,884] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,28]<stdout>:[2021-12-09 02:25:18,885] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,24]<stdout>:[2021-12-09 02:25:18,885] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,25]<stdout>:[2021-12-09 02:25:18,885] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,26]<stdout>:[2021-12-09 02:25:18,887] [INFO] [distributed.py:36:init_distributed] Not using the DeepSpeed or torch.distributed launchers, attempting to detect MPI environment...
[1,2]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=2, local_rank=2, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,5]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=5, local_rank=5, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,5]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,2]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,3]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=3, local_rank=3, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,3]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,6]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=6, local_rank=6, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,7]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=7, local_rank=7, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,1]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=1, local_rank=1, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,4]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=4, local_rank=4, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,6]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,7]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,1]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,4]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,0]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=0, local_rank=0, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,0]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,24]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=24, local_rank=0, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,24]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,29]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=29, local_rank=5, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,28]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=28, local_rank=4, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,29]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,27]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=27, local_rank=3, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,22]<stdout>:[2021-12-09 02:25:18,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=22, local_rank=6, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,28]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,26]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=26, local_rank=2, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,30]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=30, local_rank=6, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,30]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,11]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=11, local_rank=3, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,11]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,27]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,12]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=12, local_rank=4, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,12]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,8]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=8, local_rank=0, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,8]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,26]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,25]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=25, local_rank=1, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,25]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,31]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=31, local_rank=7, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,31]<stdout>:[2021-12-09 02:25:18,940] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,13]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=13, local_rank=5, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,13]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,14]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=14, local_rank=6, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,17]<stdout>:[2021-12-09 02:25:18,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=17, local_rank=1, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,10]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=10, local_rank=2, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,10]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,18]<stdout>:[2021-12-09 02:25:18,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=18, local_rank=2, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,18]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,9]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=9, local_rank=1, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,9]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,19]<stdout>:[2021-12-09 02:25:18,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=19, local_rank=3, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,19]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,14]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,16]<stdout>:[2021-12-09 02:25:18,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=16, local_rank=0, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,16]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,15]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=15, local_rank=7, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,17]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,15]<stdout>:[2021-12-09 02:25:18,939] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,22]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,20]<stdout>:[2021-12-09 02:25:18,936] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=20, local_rank=4, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,23]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=23, local_rank=7, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,20]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,23]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,21]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:83:mpi_discovery] Discovered MPI settings of world_rank=21, local_rank=5, world_size=32, master_addr=192.168.0.78, master_port=29500
[1,21]<stdout>:[2021-12-09 02:25:18,937] [INFO] [distributed.py:46:init_distributed] Initializing torch distributed with backend: nccl
[1,0]<stdout>:> initializing tensor model parallel with size 1
[1,0]<stdout>:> initializing pipeline model parallel with size 1
[1,0]<stdout>:> setting random seeds to 1234 ...
[1,0]<stdout>:> initializing model parallel cuda seeds on global rank 0, model parallel rank 0, and data parallel rank 0 with model parallel seed: 3952 and data parallel seed: 1234
[1,0]<stdout>:> compiling dataset index builder ...
[1,0]<stdout>:make: Entering directory '/home/amawa/moe-v2/Megatron-DeepSpeed/megatron/data'
[1,0]<stdout>:make: Nothing to be done for 'default'.
[1,0]<stdout>:make: Leaving directory '/home/amawa/moe-v2/Megatron-DeepSpeed/megatron/data'
[1,0]<stdout>:>>> done with dataset index builder. Compilation time: 0.093 seconds
[1,0]<stdout>:WARNING: constraints for invoking optimized fused softmax kernel are not met. We default back to unfused kernel invocations.
[1,0]<stdout>:> compiling and loading fused kernels ...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module scaled_upper_triang_masked_softmax_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module scaled_upper_triang_masked_softmax_cuda...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module scaled_masked_softmax_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module scaled_masked_softmax_cuda...
[1,0]<stdout>:Detected CUDA files, patching ldflags
[1,0]<stdout>:Emitting ninja build file /home/amawa/moe-v2/Megatron-DeepSpeed/megatron/fused_kernels/build/build.ninja...
[1,0]<stdout>:Building extension module fused_mix_prec_layer_norm_cuda...
[1,0]<stdout>:Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
[1,0]<stdout>:ninja: no work to do.
[1,0]<stdout>:Loading extension module fused_mix_prec_layer_norm_cuda...
[1,0]<stdout>:NCCL version 2.8.4+cuda11.3
[1,0]<stdout>:>>> done with compiling and loading fused kernels. Compilation time: 17.410 seconds
[1,0]<stdout>:[2021-12-09 02:25:38,810] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed groups
[1,0]<stdout>:[2021-12-09 02:25:38,810] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed model parallel group with size 1
[1,0]<stdout>:[2021-12-09 02:25:39,149] [INFO] [logging.py:69:log_dist] [Rank 0] initializing deepspeed expert parallel group with size 32
[1,0]<stdout>:[2021-12-09 02:25:39,160] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [0]
[1,0]<stdout>:[2021-12-09 02:25:39,170] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [1]
[1,0]<stdout>:[2021-12-09 02:25:39,181] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [2]
[1,0]<stdout>:[2021-12-09 02:25:39,191] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [3]
[1,0]<stdout>:[2021-12-09 02:25:39,201] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [4]
[1,0]<stdout>:[2021-12-09 02:25:39,212] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [5]
[1,0]<stdout>:[2021-12-09 02:25:39,222] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [6]
[1,0]<stdout>:[2021-12-09 02:25:39,232] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [7]
[1,0]<stdout>:[2021-12-09 02:25:39,243] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [8]
[1,0]<stdout>:[2021-12-09 02:25:39,253] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [9]
[1,0]<stdout>:[2021-12-09 02:25:39,263] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [10]
[1,0]<stdout>:[2021-12-09 02:25:39,274] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [11]
[1,0]<stdout>:[2021-12-09 02:25:39,284] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [12]
[1,0]<stdout>:[2021-12-09 02:25:39,294] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [13]
[1,0]<stdout>:[2021-12-09 02:25:39,305] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [14]
[1,0]<stdout>:[2021-12-09 02:25:39,315] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [15]
[1,0]<stdout>:[2021-12-09 02:25:39,325] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [16]
[1,0]<stdout>:[2021-12-09 02:25:39,336] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [17]
[1,0]<stdout>:[2021-12-09 02:25:39,346] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [18]
[1,0]<stdout>:[2021-12-09 02:25:39,356] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [19]
[1,0]<stdout>:[2021-12-09 02:25:39,366] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [20]
[1,0]<stdout>:[2021-12-09 02:25:39,377] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [21]
[1,0]<stdout>:[2021-12-09 02:25:39,387] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [22]
[1,0]<stdout>:[2021-12-09 02:25:39,397] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [23]
[1,0]<stdout>:[2021-12-09 02:25:39,408] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [24]
[1,0]<stdout>:[2021-12-09 02:25:39,418] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [25]
[1,0]<stdout>:[2021-12-09 02:25:39,428] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [26]
[1,0]<stdout>:[2021-12-09 02:25:39,439] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [27]
[1,0]<stdout>:[2021-12-09 02:25:39,449] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [28]
[1,0]<stdout>:[2021-12-09 02:25:39,459] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [29]
[1,0]<stdout>:[2021-12-09 02:25:39,469] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [30]
[1,0]<stdout>:[2021-12-09 02:25:39,480] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert data parallel process group with ranks: [31]
[1,0]<stdout>:[2021-12-09 02:25:39,490] [INFO] [logging.py:69:log_dist] [Rank 0] creating expert parallel process group with ranks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
[1,0]<stdout>:building GPT model ...
[1,0]<stdout>:[2021-12-09 02:25:39,561] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:39,618] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:39,675] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:39,731] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:39,791] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:39,848] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:39,905] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:39,963] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,023] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,082] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,139] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,200] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,258] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,318] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,377] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,439] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,498] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,557] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,619] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,0]<stdout>:[2021-12-09 02:25:40,679] [INFO] [logging.py:69:log_dist] [Rank 0] num_experts: 128 | num_local_experts: 4 | expert_parallel_size: 32
[1,11]<stdout>:[2021-12-09 02:25:40,709] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,4]<stdout>:[2021-12-09 02:25:40,721] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>: > number of parameters on (tensor, pipeline) model parallel rank (0, 0): 16330219520
[1,0]<stdout>:[2021-12-09 02:25:40,722] [INFO] [logging.py:69:log_dist] [Rank 0] DeepSpeed info: version=0.5.7+e806499e, git-hash=e806499e, git-branch=merge-moe-specialized
[1,0]<stdout>:[2021-12-09 02:25:40,722] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,11]<stdout>:moe = True, moe_experts= 128
[1,11]<stdout>:************ 1 ***********
[1,15]<stdout>:[2021-12-09 02:25:40,726] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,9]<stdout>:[2021-12-09 02:25:40,729] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,3]<stdout>:[2021-12-09 02:25:40,732] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,2]<stdout>:[2021-12-09 02:25:40,732] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,4]<stdout>:moe = True, moe_experts= 128[1,4]<stdout>:
[1,4]<stdout>:************ 1 ***********
[1,13]<stdout>:[2021-12-09 02:25:40,732] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,12]<stdout>:[2021-12-09 02:25:40,733] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>:moe = True, moe_experts= 128
[1,0]<stdout>:************ 1 ***********
[1,6]<stdout>:[2021-12-09 02:25:40,735] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,7]<stdout>:[2021-12-09 02:25:40,736] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,5]<stdout>:[2021-12-09 02:25:40,736] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,1]<stdout>:[2021-12-09 02:25:40,737] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,10]<stdout>:[2021-12-09 02:25:40,737] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,15]<stdout>:moe = True, moe_experts= 128
[1,15]<stdout>:************ 1 ***********
[1,14]<stdout>:[2021-12-09 02:25:40,738] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,8]<stdout>:[2021-12-09 02:25:40,739] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,9]<stdout>:moe = True, moe_experts= 128
[1,9]<stdout>:************ 1 ***********
[1,3]<stdout>:moe = True, moe_experts= 128
[1,3]<stdout>:************ 1 ***********
[1,2]<stdout>:moe = True, moe_experts= 128
[1,2]<stdout>:************ 1 ***********
[1,13]<stdout>:moe = True, moe_experts= 128
[1,13]<stdout>:************ 1 ***********
[1,12]<stdout>:moe = True, moe_experts= 128
[1,12]<stdout>:************ 1 ***********
[1,6]<stdout>:moe = True, moe_experts= 128
[1,6]<stdout>:************ 1 ***********
[1,7]<stdout>:moe = True, moe_experts= 128
[1,7]<stdout>:************ 1 ***********
[1,5]<stdout>:moe = True, moe_experts= 128
[1,5]<stdout>:************ 1 ***********
[1,1]<stdout>:moe = True, moe_experts= 128
[1,1]<stdout>:************ 1 ***********
[1,10]<stdout>:moe = True, moe_experts= 128
[1,10]<stdout>:************ 1 ***********
[1,14]<stdout>:moe = True, moe_experts= 128
[1,14]<stdout>:************ 1 ***********
[1,8]<stdout>:moe = True, moe_experts= 128
[1,8]<stdout>:************ 1 ***********
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 0.04341387748718262 seconds
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,4]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:Time to load transformer_inference op: 0.03821086883544922 seconds
[1,4]<stdout>:DeepSpeed Transformer Inference config is [1,4]<stdout>: [1,4]<stdout>:{'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 0.037316083908081055 seconds
[1,0]<stdout>:DeepSpeed Transformer Inference config is [1,0]<stdout>: [1,0]<stdout>:{'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:Time to load transformer_inference op: 0.03583073616027832 seconds
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,15]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 0.03699088096618652 seconds
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Time to load transformer_inference op: 0.035910606384277344 seconds
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:Time to load transformer_inference op: 0.03592681884765625 seconds
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,2]<stdout>:Time to load transformer_inference op: 0.03794097900390625 seconds
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Time to load transformer_inference op: 0.039021968841552734 seconds
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,3]<stdout>:{'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,8]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:Time to load transformer_inference op: 0.03638911247253418 seconds
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:Time to load transformer_inference op: 0.035341501235961914 seconds
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,6]<stdout>:Time to load transformer_inference op: 0.03869748115539551 seconds
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,5]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:Time to load transformer_inference op: 0.039060115814208984 seconds
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:Time to load transformer_inference op: 0.039200782775878906 seconds
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:Time to load transformer_inference op: 0.03818106651306152 seconds
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,7]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:Time to load transformer_inference op: 0.03985023498535156 seconds
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:[2021-12-09 02:25:40,880] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,19]<stdout>:[2021-12-09 02:25:40,882] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,11]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,11]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:Time to load transformer_inference op: 0.03834366798400879 seconds
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:local_ep_size = 4
[1,4]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,4]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:Time to load transformer_inference op: 0.03723025321960449 seconds
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,0]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,9]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,0]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,9]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:Time to load transformer_inference op: 0.037634849548339844 seconds
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:Time to load transformer_inference op: 0.03592348098754883 seconds
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,12]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,12]<stdout>:Loading extension module transformer_inference...
[1,12]<stdout>:Time to load transformer_inference op: 0.03572583198547363 seconds
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4
[1,15]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,15]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:Time to load transformer_inference op: 0.03700709342956543 seconds
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,13]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:Time to load transformer_inference op: 0.03557443618774414 seconds
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,23]<stdout>:moe = True, moe_experts= 128
[1,23]<stdout>:************ 1 ***********
[1,19]<stdout>:moe = True, moe_experts= 128
[1,19]<stdout>:************ 1 ***********
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,8]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,8]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:Time to load transformer_inference op: 0.03497195243835449 seconds
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,2]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:Time to load transformer_inference op: 0.038144826889038086 seconds
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 4
[1,10]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:local_ep_size = 4
[1,10]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,10]<stdout>:Loading extension module transformer_inference...
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:Time to load transformer_inference op: 0.03603410720825195 seconds
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,17]<stdout>:[2021-12-09 02:25:40,899] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,10]<stdout>:local_ep_size = 4
[1,3]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,3]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:Time to load transformer_inference op: 0.0383915901184082 seconds
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,6]<stdout>:Loading extension module transformer_inference...
[1,4]<stdout>:local_ep_size = 4
[1,6]<stdout>:Time to load transformer_inference op: 0.03798413276672363 seconds
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:[2021-12-09 02:25:40,905] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,14]<stdout>:Loading extension module transformer_inference...
[1,21]<stdout>:[2021-12-09 02:25:40,905] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,1]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,14]<stdout>:Time to load transformer_inference op: 0.036340951919555664 seconds
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:[2021-12-09 02:25:40,906] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,5]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,5]<stdout>:Loading extension module transformer_inference...
[1,1]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,1]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:Time to load transformer_inference op: 0.038773298263549805 seconds
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:{'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:Time to load transformer_inference op: 0.0382542610168457 seconds
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4
[1,1]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:[2021-12-09 02:25:40,907] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 4
[1,16]<stdout>:[2021-12-09 02:25:40,908] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe = True, moe_experts= 128
[1,17]<stdout>:************ 1 ***********
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,7]<stdout>:Loading extension module transformer_inference...
[1,3]<stdout>:{'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:Time to load transformer_inference op: 0.03903913497924805 seconds
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 4
[1,21]<stdout>:moe = True, moe_experts= 128
[1,20]<stdout>:moe = True, moe_experts= 128
[1,21]<stdout>:************ 1 ***********
[1,20]<stdout>:************ 1 ***********
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:moe = True, moe_experts= 128
[1,18]<stdout>:************ 1 ***********
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe = True, moe_experts= 128
[1,16]<stdout>:************ 1 ***********
[1,22]<stdout>:moe = True, moe_experts= 128
[1,22]<stdout>:************ 1 ***********
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:{'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4
[1,12]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,1]<stdout>:
[1,3]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:[2021-12-09 02:25:40,941] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,24]<stdout>:[2021-12-09 02:25:40,942] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:local_ep_size = 4
[1,2]<stdout>:{'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,28]<stdout>:moe = True, moe_experts= 128
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:************ 1 ***********
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:moe = True, moe_experts= 128
[1,24]<stdout>:************ 1 ***********
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:[2021-12-09 02:25:40,958] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,3]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:[2021-12-09 02:25:40,958] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,29]<stdout>:[2021-12-09 02:25:40,958] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,6]<stdout>:{'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4
[1,0]<stdout>:local_ep_size = 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,30]<stdout>:[2021-12-09 02:25:40,963] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,7]<stdout>:{'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:[2021-12-09 02:25:40,966] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,31]<stdout>:[2021-12-09 02:25:40,966] [INFO] [engine.py:151:_init_quantization_setting] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:moe = True, moe_experts= 128
[1,27]<stdout>:************ 1 ***********
[1,7]<stdout>:local_ep_size = 4
[1,29]<stdout>:moe = True, moe_experts= 128
[1,29]<stdout>:************ 1 ***********
[1,26]<stdout>:moe = True, moe_experts= 128
[1,26]<stdout>:************ 1 ***********
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,23]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,19]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,23]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4
[1,19]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,19]<stdout>:Loading extension module transformer_inference...
[1,23]<stdout>:Time to load transformer_inference op: 0.04009389877319336 seconds
[1,19]<stdout>:Time to load transformer_inference op: 0.038927555084228516 seconds
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:moe = True, moe_experts= 128
[1,30]<stdout>:************ 1 ***********
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,1]<stdout>:
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,25]<stdout>:moe = True, moe_experts= 128
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:************ 1 ***********
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:moe = True, moe_experts= 128
[1,31]<stdout>:************ 1 ***********
[1,4]<stdout>:local_ep_size = 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:local_ep_size = 4
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,2]<stdout>:
[1,12]<stdout>:local_ep_size = 4
[1,1]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,20]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,20]<stdout>:Time to load transformer_inference op: 0.03257393836975098 seconds
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,17]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,17]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,17]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:Time to load transformer_inference op: 0.0375523567199707 seconds
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,16]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,16]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4
[1,16]<stdout>:Time to load transformer_inference op: 0.03335976600646973 seconds
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4
[1,18]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,21]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,10]<stdout>:local_ep_size = 4
[1,3]<stdout>:{'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,18]<stdout>:Loading extension module transformer_inference...
[1,18]<stdout>:Time to load transformer_inference op: 0.03545188903808594 seconds
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4
[1,21]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,21]<stdout>:Loading extension module transformer_inference...
[1,21]<stdout>:Time to load transformer_inference op: 0.03635859489440918 seconds
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,22]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 4
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,22]<stdout>:Loading extension module transformer_inference...
[1,22]<stdout>:Time to load transformer_inference op: 0.037038326263427734 seconds
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:local_ep_size = 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:{'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:local_ep_size = 4
[1,6]<stdout>:{'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,12]<stdout>:local_ep_size = 4
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:local_ep_size = 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,24]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:{'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,24]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,24]<stdout>:Loading extension module transformer_inference...
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:Time to load transformer_inference op: 0.03840231895446777 seconds
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,28]<stdout>:Loading extension module transformer_inference...
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:Time to load transformer_inference op: 0.0385127067565918 seconds
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,29]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,29]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:Time to load transformer_inference op: 0.03352475166320801 seconds
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,26]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,26]<stdout>:Loading extension module transformer_inference...
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:Time to load transformer_inference op: 0.035793304443359375 seconds
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,27]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,27]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:Time to load transformer_inference op: 0.03695082664489746 seconds
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,30]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,30]<stdout>:Loading extension module transformer_inference...
[1,10]<stdout>:local_ep_size = 4
[1,30]<stdout>:Time to load transformer_inference op: 0.03586006164550781 seconds
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4
[1,25]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,25]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:Time to load transformer_inference op: 0.034584999084472656 seconds
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,31]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,31]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,31]<stdout>:Time to load transformer_inference op: 0.0362553596496582 seconds
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 0, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,19]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:{'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,19]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:local_ep_size = 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:Time to load transformer_inference op: 0.03679227828979492 seconds
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,19]<stdout>:local_ep_size = 4
[1,23]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,20]<stdout>:Loading extension module transformer_inference...
[1,20]<stdout>:Time to load transformer_inference op: 0.03291153907775879 seconds
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4
[1,11]<stdout>:local_ep_size = 4
[1,23]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,23]<stdout>:Loading extension module transformer_inference...
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,23]<stdout>:Time to load transformer_inference op: 0.038332462310791016 seconds
[1,20]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,1]<stdout>:local_ep_size = 4
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,0]<stdout>:
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4
[1,16]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,16]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4
[1,16]<stdout>:Time to load transformer_inference op: 0.03244829177856445 seconds
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:local_ep_size = 4
[1,0]<stdout>:local_ep_size = 4
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,3]<stdout>:{'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,17]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,17]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:Time to load transformer_inference op: 0.036653757095336914 seconds
[1,4]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:local_ep_size = 4
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,18]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,6]<stdout>:{'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,18]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,18]<stdout>:Loading extension module transformer_inference...
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:Time to load transformer_inference op: 0.03545570373535156 seconds
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4
[1,19]<stdout>:local_ep_size = 4
[1,21]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,21]<stdout>:Loading extension module transformer_inference...
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:Time to load transformer_inference op: 0.03679656982421875 seconds
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4
[1,1]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:local_ep_size = 4
[1,22]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,22]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,22]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:Time to load transformer_inference op: 0.03715014457702637 seconds
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 4
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:local_ep_size = 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,6]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,0]<stdout>:{'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:{'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4
[1,19]<stdout>:local_ep_size = 4
[1,12]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is [1,2]<stdout>: {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:local_ep_size = 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 4
[1,16]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,12]<stdout>:local_ep_size = 4
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,24]<stdout>:Loading extension module transformer_inference...
[1,6]<stdout>:local_ep_size = 4
[1,29]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,24]<stdout>:Time to load transformer_inference op: 0.03603982925415039 seconds
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4
[1,29]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,29]<stdout>:Loading extension module transformer_inference...
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:Time to load transformer_inference op: 0.033640146255493164 seconds
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,28]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,19]<stdout>:local_ep_size = 4
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,28]<stdout>:Loading extension module transformer_inference...
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:Time to load transformer_inference op: 0.03775739669799805 seconds
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,10]<stdout>:local_ep_size = 4
[1,20]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:local_ep_size = 4
[1,11]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,26]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,26]<stdout>:Loading extension module transformer_inference...
[1,5]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:Time to load transformer_inference op: 0.0355379581451416 seconds
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 4
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,25]<stdout>:Loading extension module transformer_inference...
[1,25]<stdout>:Time to load transformer_inference op: 0.033589839935302734 seconds
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,25]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,0]<stdout>:
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,27]<stdout>:Loading extension module transformer_inference...
[1,15]<stdout>:local_ep_size = 4
[1,17]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:Time to load transformer_inference op: 0.03717947006225586 seconds
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:local_ep_size = 4
[1,30]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,27]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,30]<stdout>:Loading extension module transformer_inference...
[1,30]<stdout>:Time to load transformer_inference op: 0.03554940223693848 seconds
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:local_ep_size = 4
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 4
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,5]<stdout>:
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,10]<stdout>:local_ep_size = 4
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:Using /home/amawa/.cache/torch_extensions as PyTorch extensions root...
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4
[1,31]<stdout>:No modifications detected for re-loaded extension module transformer_inference, skipping build step...
[1,31]<stdout>:Loading extension module transformer_inference...
[1,2]<stdout>:DeepSpeed Transformer Inference config is  [1,2]<stdout>:{'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,31]<stdout>:Time to load transformer_inference op: 0.03604626655578613 seconds
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 1, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4
[1,28]<stdout>:local_ep_size = 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4
[1,20]<stdout>:local_ep_size = 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4
[1,5]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:local_ep_size = 4
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4
[1,25]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 2, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:{'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:local_ep_size = 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:{'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,6]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4
[1,10]<stdout>:local_ep_size = 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4
[1,19]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:local_ep_size = 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 3, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,5]<stdout>:{'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:local_ep_size = 4
[1,7]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 4, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,4]<stdout>:local_ep_size = 4
[1,6]<stdout>:local_ep_size = 4
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:local_ep_size = 4
[1,5]<stdout>:local_ep_size = 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 5, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,3]<stdout>:
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:local_ep_size = 4
[1,0]<stdout>:{'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:local_ep_size = 4
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4
[1,9]<stdout>:local_ep_size = 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:{'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:local_ep_size = 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 6, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4
[1,27]<stdout>:local_ep_size = 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,4]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:local_ep_size = 4
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:local_ep_size = 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed Transformer Inference config is  [1,7]<stdout>:{'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 7, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}[1,3]<stdout>:
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,2]<stdout>:local_ep_size = 4
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4
[1,15]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:local_ep_size = 4
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:local_ep_size = 4
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:{'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:local_ep_size = 4
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,4]<stdout>:{'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 4
[1,4]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 8, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  [1,1]<stdout>:{'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,14]<stdout>:local_ep_size = 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4
[1,0]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 9, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,2]<stdout>:local_ep_size = 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,4]<stdout>:DeepSpeed Transformer Inference config is  [1,4]<stdout>:{'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:moe, num_experts = True, 4, MoE(
[1,0]<stdout>:  (deepspeed_moe): MOELayer(
[1,0]<stdout>:    (gate): TopKGate(
[1,0]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,0]<stdout>:    )
[1,0]<stdout>:    (experts): Experts(
[1,0]<stdout>:      (deepspeed_experts): ModuleList(
[1,0]<stdout>:        (0): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (1): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (2): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:        (3): ParallelMLP(
[1,0]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,0]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,0]<stdout>:        )
[1,0]<stdout>:      )
[1,0]<stdout>:    )
[1,0]<stdout>:  )
[1,0]<stdout>:), 4
[1,0]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed Transformer Inference config is  [1,5]<stdout>:{'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,7]<stdout>:{'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,3]<stdout>:{'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,4]<stdout>:moe, num_experts = True, 4, MoE(
[1,4]<stdout>:  (deepspeed_moe): MOELayer(
[1,4]<stdout>:    (gate): TopKGate(
[1,4]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,4]<stdout>:    )
[1,4]<stdout>:    (experts): Experts(
[1,4]<stdout>:      (deepspeed_experts): ModuleList(
[1,4]<stdout>:        (0): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (1): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (2): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:        (3): ParallelMLP(
[1,4]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,4]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,4]<stdout>:        )
[1,4]<stdout>:      )
[1,4]<stdout>:    )
[1,4]<stdout>:  )
[1,4]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:local_ep_size = 4
[1,4]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,0]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,0]<stdout>:{'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,0]<stdout>:local_ep_size = 4
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,4]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 4
[1,11]<stdout>:local_ep_size = 4
[1,4]<stdout>:local_ep_size = 4
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,5]<stdout>:local_ep_size = 4
[1,14]<stdout>:local_ep_size = 4
[1,25]<stdout>:local_ep_size = 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 10, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,12]<stdout>:moe, num_experts = True, 4, MoE(
[1,12]<stdout>:  (deepspeed_moe): MOELayer(
[1,12]<stdout>:    (gate): TopKGate(
[1,12]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,12]<stdout>:    )
[1,12]<stdout>:    (experts): Experts(
[1,12]<stdout>:      (deepspeed_experts): ModuleList(
[1,12]<stdout>:        (0): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (1): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (2): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:        (3): ParallelMLP(
[1,12]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,12]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,12]<stdout>:        )
[1,12]<stdout>:      )
[1,12]<stdout>:    )
[1,12]<stdout>:  )
[1,12]<stdout>:), 4
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,12]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:local_ep_size = 4
[1,3]<stdout>:DeepSpeed Transformer Inference config is  [1,3]<stdout>:{'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,15]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:moe, num_experts = True, 4, MoE(
[1,9]<stdout>:  (deepspeed_moe): MOELayer(
[1,9]<stdout>:    (gate): TopKGate(
[1,9]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,9]<stdout>:    )
[1,9]<stdout>:    (experts): Experts(
[1,9]<stdout>:      (deepspeed_experts): ModuleList(
[1,9]<stdout>:        (0): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (1): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (2): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:        (3): ParallelMLP(
[1,9]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,9]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,9]<stdout>:        )
[1,9]<stdout>:      )
[1,9]<stdout>:    )
[1,9]<stdout>:  )
[1,9]<stdout>:), 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:local_ep_size = 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,12]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,3]<stdout>:moe, num_experts = True, 4, MoE(
[1,3]<stdout>:  (deepspeed_moe): MOELayer(
[1,3]<stdout>:    (gate): TopKGate(
[1,3]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,3]<stdout>:    )
[1,3]<stdout>:    (experts): Experts(
[1,3]<stdout>:      (deepspeed_experts): ModuleList(
[1,3]<stdout>:        (0): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (1): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (2): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:        (3): ParallelMLP(
[1,3]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,3]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,3]<stdout>:        )
[1,3]<stdout>:      )
[1,3]<stdout>:    )
[1,3]<stdout>:  )
[1,3]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,0]<stdout>:[2021-12-09 02:25:41,220] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,15]<stdout>:moe, num_experts = True, 4, MoE(
[1,15]<stdout>:  (deepspeed_moe): MOELayer(
[1,15]<stdout>:    (gate): TopKGate(
[1,15]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,15]<stdout>:    )
[1,15]<stdout>:    (experts): Experts(
[1,15]<stdout>:      (deepspeed_experts): ModuleList(
[1,15]<stdout>:        (0): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (1): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (2): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:        (3): ParallelMLP(
[1,15]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,15]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,15]<stdout>:        )
[1,15]<stdout>:      )
[1,15]<stdout>:    )
[1,15]<stdout>:  )
[1,15]<stdout>:), 4
[1,3]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:local_ep_size = 4
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 11, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4
[1,4]<stdout>:[2021-12-09 02:25:41,222] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,28]<stdout>:local_ep_size = 4
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,13]<stdout>:local_ep_size = 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,5]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,3]<stdout>:local_ep_size = 4
[1,7]<stdout>:local_ep_size = 4
[1,15]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,20]<stdout>:local_ep_size = 4
[1,10]<stdout>:moe, num_experts = True, 4, MoE(
[1,10]<stdout>:  (deepspeed_moe): MOELayer(
[1,10]<stdout>:    (gate): TopKGate(
[1,10]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,10]<stdout>:    )
[1,10]<stdout>:    (experts): Experts(
[1,10]<stdout>:      (deepspeed_experts): ModuleList(
[1,10]<stdout>:        (0): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (1): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (2): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:        (3): ParallelMLP(
[1,10]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,10]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,10]<stdout>:        )
[1,10]<stdout>:      )
[1,10]<stdout>:    )
[1,10]<stdout>:  )
[1,10]<stdout>:), 4
[1,10]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:local_ep_size = 4
[1,5]<stdout>:moe, num_experts = True, 4, MoE(
[1,5]<stdout>:  (deepspeed_moe): MOELayer(
[1,5]<stdout>:    (gate): TopKGate(
[1,5]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,5]<stdout>:    )
[1,5]<stdout>:    (experts): Experts(
[1,5]<stdout>:      (deepspeed_experts): ModuleList(
[1,5]<stdout>:        (0): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (1): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (2): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:        (3): ParallelMLP(
[1,5]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,5]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,5]<stdout>:        )
[1,5]<stdout>:      )
[1,5]<stdout>:    )
[1,5]<stdout>:  )
[1,5]<stdout>:), 4
[1,14]<stdout>:moe, num_experts = True, 4, MoE(
[1,14]<stdout>:  (deepspeed_moe): MOELayer(
[1,14]<stdout>:    (gate): TopKGate(
[1,14]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,14]<stdout>:    )
[1,14]<stdout>:    (experts): Experts(
[1,14]<stdout>:      (deepspeed_experts): ModuleList(
[1,14]<stdout>:        (0): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (1): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (2): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:        (3): ParallelMLP(
[1,14]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,14]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,14]<stdout>:        )
[1,14]<stdout>:      )
[1,14]<stdout>:    )
[1,14]<stdout>:  )
[1,14]<stdout>:), 4
[1,5]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,14]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 4
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,10]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,2]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:moe, num_experts = True, 4, MoE(
[1,8]<stdout>:  (deepspeed_moe): MOELayer(
[1,8]<stdout>:    (gate): TopKGate(
[1,8]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,8]<stdout>:    )
[1,8]<stdout>:    (experts): Experts(
[1,8]<stdout>:      (deepspeed_experts): ModuleList(
[1,8]<stdout>:        (0): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (1): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (2): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:        (3): ParallelMLP(
[1,8]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,8]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,8]<stdout>:        )
[1,8]<stdout>:      )
[1,8]<stdout>:    )
[1,8]<stdout>:  )
[1,8]<stdout>:), 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,5]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,5]<stdout>:{'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,14]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:local_ep_size = 4
[1,12]<stdout>:[2021-12-09 02:25:41,229] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,14]<stdout>:local_ep_size = 4
[1,11]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,9]<stdout>:[2021-12-09 02:25:41,230] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,13]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:moe, num_experts = True, 4, MoE(
[1,2]<stdout>:  (deepspeed_moe): MOELayer(
[1,2]<stdout>:    (gate): TopKGate(
[1,2]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,2]<stdout>:    )
[1,2]<stdout>:    (experts): Experts(
[1,2]<stdout>:      (deepspeed_experts): ModuleList(
[1,2]<stdout>:        (0): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (1): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (2): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:        (3): ParallelMLP(
[1,2]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,2]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,2]<stdout>:        )
[1,2]<stdout>:      )
[1,2]<stdout>:    )
[1,2]<stdout>:  )
[1,2]<stdout>:), 4
[1,2]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,8]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 12, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,8]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4
[1,3]<stdout>:[2021-12-09 02:25:41,234] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:[2021-12-09 02:25:41,233] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,30]<stdout>:local_ep_size = 4
[1,13]<stdout>:moe, num_experts = True, 4, MoE(
[1,13]<stdout>:  (deepspeed_moe): MOELayer(
[1,13]<stdout>:    (gate): TopKGate(
[1,13]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,13]<stdout>:    )
[1,13]<stdout>:    (experts): Experts(
[1,13]<stdout>:      (deepspeed_experts): ModuleList(
[1,13]<stdout>:        (0): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (1): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (2): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:        (3): ParallelMLP(
[1,13]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,13]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,13]<stdout>:        )
[1,13]<stdout>:      )
[1,13]<stdout>:    )
[1,13]<stdout>:  )
[1,13]<stdout>:), 4
[1,13]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,2]<stdout>:{'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,0]<stdout>:> DeepSpeed Inference initialized
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,7]<stdout>:moe, num_experts = True, 4, MoE(
[1,7]<stdout>:  (deepspeed_moe): MOELayer(
[1,7]<stdout>:    (gate): TopKGate(
[1,7]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,7]<stdout>:    )
[1,7]<stdout>:    (experts): Experts(
[1,7]<stdout>:      (deepspeed_experts): ModuleList(
[1,7]<stdout>:        (0): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (1): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (2): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:        (3): ParallelMLP(
[1,7]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,7]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,7]<stdout>:        )
[1,7]<stdout>:      )
[1,7]<stdout>:    )
[1,7]<stdout>:  )
[1,7]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,2]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:DeepSpeed Transformer Inference config is  [1,6]<stdout>:{'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:local_ep_size = 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:local_ep_size = 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,4]<stdout>:> DeepSpeed Inference initialized
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,10]<stdout>:[2021-12-09 02:25:41,237] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,13]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:local_ep_size = 4
[1,6]<stdout>:moe, num_experts = True, 4, MoE(
[1,6]<stdout>:  (deepspeed_moe): MOELayer(
[1,6]<stdout>:    (gate): TopKGate(
[1,6]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,6]<stdout>:    )
[1,6]<stdout>:    (experts): Experts(
[1,6]<stdout>:      (deepspeed_experts): ModuleList(
[1,6]<stdout>:        (0): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (1): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (2): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:        (3): ParallelMLP(
[1,6]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,6]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,6]<stdout>:        )
[1,6]<stdout>:      )
[1,6]<stdout>:    )
[1,6]<stdout>:  )
[1,6]<stdout>:), 4
[1,7]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,6]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 13, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:[2021-12-09 02:25:41,240] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,20]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:[2021-12-09 02:25:41,239] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,6]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,6]<stdout>:{'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,6]<stdout>:local_ep_size = 4
[1,8]<stdout>:[2021-12-09 02:25:41,242] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4
[1,17]<stdout>:local_ep_size = 4
[1,1]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:[2021-12-09 02:25:41,246] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,12]<stdout>:> DeepSpeed Inference initialized
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,9]<stdout>:> DeepSpeed Inference initialized
[1,26]<stdout>:local_ep_size = 4
[1,4]<stdout>:NCCL version 2.8.4+cuda11.3
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,12]<stdout>:NCCL version 2.8.4+cuda11.3
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:moe, num_experts = True, 4, MoE(
[1,1]<stdout>:  (deepspeed_moe): MOELayer(
[1,1]<stdout>:    (gate): TopKGate(
[1,1]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,1]<stdout>:    )
[1,1]<stdout>:    (experts): Experts(
[1,1]<stdout>:      (deepspeed_experts): ModuleList(
[1,1]<stdout>:        (0): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (1): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (2): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:        (3): ParallelMLP(
[1,1]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,1]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,1]<stdout>:        )
[1,1]<stdout>:      )
[1,1]<stdout>:    )
[1,1]<stdout>:  )
[1,1]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,9]<stdout>:NCCL version 2.8.4+cuda11.3
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,13]<stdout>:[2021-12-09 02:25:41,247] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,11]<stdout>:local_ep_size = 4
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,3]<stdout>:> DeepSpeed Inference initialized
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,15]<stdout>:> DeepSpeed Inference initialized
[1,7]<stdout>:[2021-12-09 02:25:41,250] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 14, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,25]<stdout>:local_ep_size = 4
[1,3]<stdout>:NCCL version 2.8.4+cuda11.3
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,15]<stdout>:NCCL version 2.8.4+cuda11.3
[1,1]<stdout>:DeepSpeed MoE Transformer Inference config is  [1,1]<stdout>:{'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,1]<stdout>:local_ep_size = 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:local_ep_size = 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:local_ep_size = 4
[1,6]<stdout>:[2021-12-09 02:25:41,253] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,10]<stdout>:> DeepSpeed Inference initialized
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:> DeepSpeed Inference initialized
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:> DeepSpeed Inference initialized
[1,19]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,10]<stdout>:NCCL version 2.8.4+cuda11.3
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,5]<stdout>:NCCL version 2.8.4+cuda11.3
[1,16]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 15, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,14]<stdout>:NCCL version 2.8.4+cuda11.3
[1,31]<stdout>:local_ep_size = 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,8]<stdout>:> DeepSpeed Inference initialized
[1,28]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:moe, num_experts = True, 4, MoE(
[1,11]<stdout>:  (deepspeed_moe): MOELayer(
[1,11]<stdout>:    (gate): TopKGate(
[1,11]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,11]<stdout>:    )
[1,11]<stdout>:    (experts): Experts(
[1,11]<stdout>:      (deepspeed_experts): ModuleList(
[1,11]<stdout>:        (0): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (1): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (2): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:        (3): ParallelMLP(
[1,11]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,11]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,11]<stdout>:        )
[1,11]<stdout>:      )
[1,11]<stdout>:    )
[1,11]<stdout>:  )
[1,11]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,8]<stdout>:NCCL version 2.8.4+cuda11.3
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,1]<stdout>:[2021-12-09 02:25:41,263] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,17]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:local_ep_size = 4
[1,11]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,11]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 16, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:local_ep_size = 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 17, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,17]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,11]<stdout>:[2021-12-09 02:25:41,277] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,28]<stdout>:local_ep_size = 4
[1,13]<stdout>:> DeepSpeed Inference initialized
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,13]<stdout>:NCCL version 2.8.4+cuda11.3
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:> DeepSpeed Inference initialized
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,2]<stdout>:NCCL version 2.8.4+cuda11.3
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 18, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,7]<stdout>:> DeepSpeed Inference initialized
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:local_ep_size = 4
[1,6]<stdout>:> DeepSpeed Inference initialized
[1,27]<stdout>:local_ep_size = 4
[1,20]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4
[1,7]<stdout>:NCCL version 2.8.4+cuda11.3
[1,6]<stdout>:NCCL version 2.8.4+cuda11.3
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 19, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,28]<stdout>:local_ep_size = 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:> DeepSpeed Inference initialized
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 20, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,1]<stdout>:NCCL version 2.8.4+cuda11.3
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,29]<stdout>:local_ep_size = 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 21, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,18]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,11]<stdout>:> DeepSpeed Inference initialized
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,11]<stdout>:NCCL version 2.8.4+cuda11.3
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 22, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,28]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:local_ep_size = 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 23, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 24, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,27]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 25, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:local_ep_size = 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4
[1,17]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,22]<stdout>:local_ep_size = 4
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 26, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:local_ep_size = 4
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4
[1,26]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 27, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:local_ep_size = 4
[1,22]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:local_ep_size = 4
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,20]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 28, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,20]<stdout>:moe, num_experts = True, 4, MoE(
[1,20]<stdout>:  (deepspeed_moe): MOELayer(
[1,20]<stdout>:    (gate): TopKGate(
[1,20]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,20]<stdout>:    )
[1,20]<stdout>:    (experts): Experts(
[1,20]<stdout>:      (deepspeed_experts): ModuleList(
[1,20]<stdout>:        (0): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (1): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (2): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:        (3): ParallelMLP(
[1,20]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,20]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,20]<stdout>:        )
[1,20]<stdout>:      )
[1,20]<stdout>:    )
[1,20]<stdout>:  )
[1,20]<stdout>:), 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,20]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:local_ep_size = 4
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,23]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4
[1,27]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,16]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,20]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4
[1,17]<stdout>:moe, num_experts = True, 4, MoE(
[1,17]<stdout>:  (deepspeed_moe): MOELayer(
[1,17]<stdout>:    (gate): TopKGate(
[1,17]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,17]<stdout>:    )
[1,17]<stdout>:    (experts): Experts(
[1,17]<stdout>:      (deepspeed_experts): ModuleList(
[1,17]<stdout>:        (0): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (1): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (2): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:        (3): ParallelMLP(
[1,17]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,17]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,17]<stdout>:        )
[1,17]<stdout>:      )
[1,17]<stdout>:    )
[1,17]<stdout>:  )
[1,17]<stdout>:), 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 29, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:local_ep_size = 4
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,16]<stdout>:moe, num_experts = True, 4, MoE(
[1,16]<stdout>:  (deepspeed_moe): MOELayer(
[1,16]<stdout>:    (gate): TopKGate(
[1,16]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,16]<stdout>:    )
[1,16]<stdout>:    (experts): Experts(
[1,16]<stdout>:      (deepspeed_experts): ModuleList(
[1,16]<stdout>:        (0): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (1): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (2): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:        (3): ParallelMLP(
[1,16]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,16]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,16]<stdout>:        )
[1,16]<stdout>:      )
[1,16]<stdout>:    )
[1,16]<stdout>:  )
[1,16]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,16]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,17]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:local_ep_size = 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,16]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:local_ep_size = 4
[1,16]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,19]<stdout>:moe, num_experts = True, 4, MoE(
[1,19]<stdout>:  (deepspeed_moe): MOELayer(
[1,19]<stdout>:    (gate): TopKGate(
[1,19]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,19]<stdout>:    )
[1,19]<stdout>:    (experts): Experts(
[1,19]<stdout>:      (deepspeed_experts): ModuleList(
[1,19]<stdout>:        (0): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (1): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (2): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:        (3): ParallelMLP(
[1,19]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,19]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,19]<stdout>:        )
[1,19]<stdout>:      )
[1,19]<stdout>:    )
[1,19]<stdout>:  )
[1,19]<stdout>:), 4
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:moe, num_experts = True, 4, MoE(
[1,23]<stdout>:  (deepspeed_moe): MOELayer(
[1,23]<stdout>:    (gate): TopKGate(
[1,23]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,23]<stdout>:    )
[1,23]<stdout>:    (experts): Experts(
[1,23]<stdout>:      (deepspeed_experts): ModuleList(
[1,23]<stdout>:        (0): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (1): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (2): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:        (3): ParallelMLP(
[1,23]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,23]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,23]<stdout>:        )
[1,23]<stdout>:      )
[1,23]<stdout>:    )
[1,23]<stdout>:  )
[1,23]<stdout>:), 4
[1,23]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,18]<stdout>:moe, num_experts = True, 4, MoE(
[1,18]<stdout>:  (deepspeed_moe): MOELayer(
[1,18]<stdout>:    (gate): TopKGate(
[1,18]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,18]<stdout>:    )
[1,18]<stdout>:    (experts): Experts(
[1,18]<stdout>:      (deepspeed_experts): ModuleList(
[1,18]<stdout>:        (0): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (1): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (2): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:        (3): ParallelMLP(
[1,18]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,18]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,18]<stdout>:        )
[1,18]<stdout>:      )
[1,18]<stdout>:    )
[1,18]<stdout>:  )
[1,18]<stdout>:), 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,18]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:[2021-12-09 02:25:41,390] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 30, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,19]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,19]<stdout>:local_ep_size = 4
[1,23]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,18]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,27]<stdout>:local_ep_size = 4
[1,22]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:[2021-12-09 02:25:41,396] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,16]<stdout>:[2021-12-09 02:25:41,397] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 31, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:moe, num_experts = True, 4, MoE(
[1,22]<stdout>:  (deepspeed_moe): MOELayer(
[1,22]<stdout>:    (gate): TopKGate(
[1,22]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,22]<stdout>:    )
[1,22]<stdout>:    (experts): Experts(
[1,22]<stdout>:      (deepspeed_experts): ModuleList(
[1,22]<stdout>:        (0): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (1): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (2): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:        (3): ParallelMLP(
[1,22]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,22]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,22]<stdout>:        )
[1,22]<stdout>:      )
[1,22]<stdout>:    )
[1,22]<stdout>:  )
[1,22]<stdout>:), 4
[1,22]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,22]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,21]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:local_ep_size = 4
[1,19]<stdout>:[2021-12-09 02:25:41,403] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,23]<stdout>:[2021-12-09 02:25:41,403] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,18]<stdout>:[2021-12-09 02:25:41,404] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:moe, num_experts = True, 4, MoE(
[1,21]<stdout>:  (deepspeed_moe): MOELayer(
[1,21]<stdout>:    (gate): TopKGate(
[1,21]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,21]<stdout>:    )
[1,21]<stdout>:    (experts): Experts(
[1,21]<stdout>:      (deepspeed_experts): ModuleList(
[1,21]<stdout>:        (0): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (1): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (2): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:        (3): ParallelMLP(
[1,21]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,21]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,21]<stdout>:        )
[1,21]<stdout>:      )
[1,21]<stdout>:    )
[1,21]<stdout>:  )
[1,21]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4
[1,21]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,20]<stdout>:> DeepSpeed Inference initialized
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 32, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:local_ep_size = 4
[1,21]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,20]<stdout>:NCCL version 2.8.4+cuda11.3
[1,21]<stdout>:local_ep_size = 4
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,17]<stdout>:> DeepSpeed Inference initialized
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,26]<stdout>:local_ep_size = 4
[1,22]<stdout>:[2021-12-09 02:25:41,412] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,16]<stdout>:> DeepSpeed Inference initialized
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 33, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,17]<stdout>:NCCL version 2.8.4+cuda11.3
[1,16]<stdout>:NCCL version 2.8.4+cuda11.3
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,21]<stdout>:[2021-12-09 02:25:41,419] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,23]<stdout>:> DeepSpeed Inference initialized
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,19]<stdout>:> DeepSpeed Inference initialized
[1,24]<stdout>:local_ep_size = 4
[1,18]<stdout>:> DeepSpeed Inference initialized
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 34, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,23]<stdout>:NCCL version 2.8.4+cuda11.3
[1,19]<stdout>:NCCL version 2.8.4+cuda11.3
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,18]<stdout>:NCCL version 2.8.4+cuda11.3
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,28]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 35, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,24]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,28]<stdout>:moe, num_experts = True, 4, MoE(
[1,28]<stdout>:  (deepspeed_moe): MOELayer(
[1,28]<stdout>:    (gate): TopKGate(
[1,28]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,28]<stdout>:    )
[1,28]<stdout>:    (experts): Experts(
[1,28]<stdout>:      (deepspeed_experts): ModuleList(
[1,28]<stdout>:        (0): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (1): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (2): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:        (3): ParallelMLP(
[1,28]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,28]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,28]<stdout>:        )
[1,28]<stdout>:      )
[1,28]<stdout>:    )
[1,28]<stdout>:  )
[1,28]<stdout>:), 4
[1,28]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,30]<stdout>:local_ep_size = 4
[1,24]<stdout>:moe, num_experts = True, 4, MoE(
[1,24]<stdout>:  (deepspeed_moe): MOELayer(
[1,24]<stdout>:    (gate): TopKGate(
[1,24]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,24]<stdout>:    )
[1,24]<stdout>:    (experts): Experts(
[1,24]<stdout>:      (deepspeed_experts): ModuleList(
[1,24]<stdout>:        (0): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (1): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (2): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:        (3): ParallelMLP(
[1,24]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,24]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,24]<stdout>:        )
[1,24]<stdout>:      )
[1,24]<stdout>:    )
[1,24]<stdout>:  )
[1,24]<stdout>:), 4
[1,24]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,28]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:local_ep_size = 4
[1,29]<stdout>:moe, num_experts = True, 4, MoE(
[1,29]<stdout>:  (deepspeed_moe): MOELayer(
[1,29]<stdout>:    (gate): TopKGate(
[1,29]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,29]<stdout>:    )
[1,29]<stdout>:    (experts): Experts(
[1,29]<stdout>:      (deepspeed_experts): ModuleList(
[1,29]<stdout>:        (0): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (1): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (2): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:        (3): ParallelMLP(
[1,29]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,29]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,29]<stdout>:        )
[1,29]<stdout>:      )
[1,29]<stdout>:    )
[1,29]<stdout>:  )
[1,29]<stdout>:), 4
[1,29]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,24]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,24]<stdout>:local_ep_size = 4
[1,25]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,22]<stdout>:> DeepSpeed Inference initialized
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 36, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,29]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,29]<stdout>:local_ep_size = 4
[1,26]<stdout>:moe, num_experts = True, 4, MoE(
[1,26]<stdout>:  (deepspeed_moe): MOELayer(
[1,26]<stdout>:    (gate): TopKGate(
[1,26]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,26]<stdout>:    )
[1,26]<stdout>:    (experts): Experts(
[1,26]<stdout>:      (deepspeed_experts): ModuleList(
[1,26]<stdout>:        (0): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (1): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (2): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:        (3): ParallelMLP(
[1,26]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,26]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,26]<stdout>:        )
[1,26]<stdout>:      )
[1,26]<stdout>:    )
[1,26]<stdout>:  )
[1,26]<stdout>:), 4
[1,26]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,22]<stdout>:NCCL version 2.8.4+cuda11.3
[1,30]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:moe, num_experts = True, 4, MoE(
[1,25]<stdout>:  (deepspeed_moe): MOELayer(
[1,25]<stdout>:    (gate): TopKGate(
[1,25]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,25]<stdout>:    )
[1,25]<stdout>:    (experts): Experts(
[1,25]<stdout>:      (deepspeed_experts): ModuleList(
[1,25]<stdout>:        (0): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (1): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (2): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:        (3): ParallelMLP(
[1,25]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,25]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,25]<stdout>:        )
[1,25]<stdout>:      )
[1,25]<stdout>:    )
[1,25]<stdout>:  )
[1,25]<stdout>:), 4
[1,25]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,26]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,26]<stdout>:local_ep_size = 4
[1,30]<stdout>:moe, num_experts = True, 4, MoE(
[1,30]<stdout>:  (deepspeed_moe): MOELayer(
[1,30]<stdout>:    (gate): TopKGate(
[1,30]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,30]<stdout>:    )
[1,30]<stdout>:    (experts): Experts(
[1,30]<stdout>:      (deepspeed_experts): ModuleList(
[1,30]<stdout>:        (0): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (1): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (2): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:        (3): ParallelMLP(
[1,30]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,30]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,30]<stdout>:        )
[1,30]<stdout>:      )
[1,30]<stdout>:    )
[1,30]<stdout>:  )
[1,30]<stdout>:), 4
[1,30]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,25]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,25]<stdout>:local_ep_size = 4
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:[2021-12-09 02:25:41,448] [INFO] [engine.py:107:__init__] Place model to device: 4
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 37, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,24]<stdout>:[2021-12-09 02:25:41,451] [INFO] [engine.py:107:__init__] Place model to device: 0
[1,30]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,30]<stdout>:local_ep_size = 4
[1,29]<stdout>:[2021-12-09 02:25:41,453] [INFO] [engine.py:107:__init__] Place model to device: 5
[1,21]<stdout>:> DeepSpeed Inference initialized
[1,21]<stdout>:NCCL version 2.8.4+cuda11.3
[1,26]<stdout>:[2021-12-09 02:25:41,457] [INFO] [engine.py:107:__init__] Place model to device: 2
[1,27]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,31]<stdout>:DeepSpeed Transformer Inference config is  {'layer_id': 38, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 1, 'return_tuple': False, 'specialized_mode': False}
[1,25]<stdout>:[2021-12-09 02:25:41,459] [INFO] [engine.py:107:__init__] Place model to device: 1
[1,27]<stdout>:moe, num_experts = True, 4, MoE(
[1,27]<stdout>:  (deepspeed_moe): MOELayer(
[1,27]<stdout>:    (gate): TopKGate(
[1,27]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,27]<stdout>:    )
[1,27]<stdout>:    (experts): Experts(
[1,27]<stdout>:      (deepspeed_experts): ModuleList(
[1,27]<stdout>:        (0): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (1): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (2): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:        (3): ParallelMLP(
[1,27]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,27]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,27]<stdout>:        )
[1,27]<stdout>:      )
[1,27]<stdout>:    )
[1,27]<stdout>:  )
[1,27]<stdout>:), 4
[1,27]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,31]<stdout>:moe, num_experts = True, 4, MoE(
[1,31]<stdout>:  (deepspeed_moe): MOELayer(
[1,31]<stdout>:    (gate): TopKGate(
[1,31]<stdout>:      (wg): Linear(in_features=4096, out_features=128, bias=False)
[1,31]<stdout>:    )
[1,31]<stdout>:    (experts): Experts(
[1,31]<stdout>:      (deepspeed_experts): ModuleList(
[1,31]<stdout>:        (0): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (1): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (2): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:        (3): ParallelMLP(
[1,31]<stdout>:          (dense_h_to_4h): ColumnParallelLinear()
[1,31]<stdout>:          (dense_4h_to_h): RowParallelLinear()
[1,31]<stdout>:        )
[1,31]<stdout>:      )
[1,31]<stdout>:    )
[1,31]<stdout>:  )
[1,31]<stdout>:), 4
[1,31]<stdout>:local_ep_size = 4, ep_world_size = 32, ep_grou = None
[1,30]<stdout>:[2021-12-09 02:25:41,462] [INFO] [engine.py:107:__init__] Place model to device: 6
[1,27]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,28]<stdout>:> DeepSpeed Inference initialized
[1,31]<stdout>:DeepSpeed MoE Transformer Inference config is  {'layer_id': 39, 'hidden_size': 4096, 'intermediate_size': 16384, 'heads': 32, 'num_hidden_layers': -1, 'fp16': True, 'pre_layer_norm': True, 'local_rank': -1, 'stochastic_mode': False, 'epsilon': 1e-12, 'mp_size': 1, 'q_int8': False, 'scale_attention': True, 'triangular_masking': True, 'local_attention': False, 'window_size': 256, 'return_tuple': True, 'specialized_mode': False, 'moe_experts': 4, 'k': 1, 'capacity_factor': 1.0, 'eval_capacity_factor': 1.0, 'min_capacity': 1, 'noisy_gate_policy': None, 'drop_tokens': True, 'use_rts': False, 'global_experts': 128}
[1,27]<stdout>:local_ep_size = 4
[1,31]<stdout>:local_ep_size = 4
[1,24]<stdout>:> DeepSpeed Inference initialized
[1,28]<stdout>:NCCL version 2.8.4+cuda11.3
[1,29]<stdout>:> DeepSpeed Inference initialized
[1,24]<stdout>:NCCL version 2.8.4+cuda11.3
[1,29]<stdout>:NCCL version 2.8.4+cuda11.3
[1,26]<stdout>:> DeepSpeed Inference initialized
[1,25]<stdout>:> DeepSpeed Inference initialized
[1,27]<stdout>:[2021-12-09 02:25:41,475] [INFO] [engine.py:107:__init__] Place model to device: 3
[1,26]<stdout>:NCCL version 2.8.4+cuda11.3
[1,31]<stdout>:[2021-12-09 02:25:41,475] [INFO] [engine.py:107:__init__] Place model to device: 7
[1,25]<stdout>:NCCL version 2.8.4+cuda11.3
[1,30]<stdout>:> DeepSpeed Inference initialized
[1,30]<stdout>:NCCL version 2.8.4+cuda11.3
[1,27]<stdout>:> DeepSpeed Inference initialized
[1,31]<stdout>:> DeepSpeed Inference initialized
[1,27]<stdout>:NCCL version 2.8.4+cuda11.3
[1,31]<stdout>:NCCL version 2.8.4+cuda11.3
[1,0]<stdout>:
[1,0]<stdout>:webxt6cb30000A2:63830:64395 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,0]<stdout>:
[1,0]<stdout>:webxt6cb30000A2:63830:64395 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,12]<stdout>:
[1,12]<stdout>:webxt6cb300009V:68562:69062 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,12]<stdout>:
[1,12]<stdout>:webxt6cb300009V:68562:69062 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,4]<stdout>:
[1,4]<stdout>:webxt6cb30000A2:63834:64396 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,4]<stdout>:
[1,4]<stdout>:webxt6cb30000A2:63834:64396 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,9]<stdout>:
[1,9]<stdout>:webxt6cb300009V:68559:69063 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,9]<stdout>:
[1,9]<stdout>:webxt6cb300009V:68559:69063 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,3]<stdout>:
[1,3]<stdout>:webxt6cb30000A2:63833:64400 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,3]<stdout>:
[1,3]<stdout>:webxt6cb30000A2:63833:64400 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,15]<stdout>:
[1,15]<stdout>:webxt6cb300009V:68565:69067 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,15]<stdout>:
[1,15]<stdout>:webxt6cb300009V:68565:69067 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,10]<stdout>:
[1,10]<stdout>:webxt6cb300009V:68560:69070 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,10]<stdout>:
[1,10]<stdout>:webxt6cb300009V:68560:69070 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,5]<stdout>:
[1,5]<stdout>:webxt6cb30000A2:63835:64403 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,5]<stdout>:
[1,5]<stdout>:webxt6cb30000A2:63835:64403 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,2]<stdout>:
[1,2]<stdout>:webxt6cb30000A2:63832:64406 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,2]<stdout>:
[1,2]<stdout>:webxt6cb30000A2:63832:64406 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,14]<stdout>:
[1,14]<stdout>:webxt6cb300009V:68564:69073 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,14]<stdout>:
[1,14]<stdout>:webxt6cb300009V:68564:69073 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,7]<stdout>:
[1,7]<stdout>:webxt6cb30000A2:63837:64411 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,7]<stdout>:
[1,7]<stdout>:webxt6cb30000A2:63837:64411 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,8]<stdout>:
[1,8]<stdout>:webxt6cb300009V:68558:69076 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,8]<stdout>:
[1,8]<stdout>:webxt6cb300009V:68558:69076 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,6]<stdout>:
[1,6]<stdout>:webxt6cb30000A2:63836:64410 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,6]<stdout>:
[1,6]<stdout>:webxt6cb30000A2:63836:64410 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,13]<stdout>:
[1,13]<stdout>:webxt6cb300009V:68563:69079 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,13]<stdout>:
[1,13]<stdout>:webxt6cb300009V:68563:69079 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,1]<stdout>:
[1,1]<stdout>:webxt6cb30000A2:63831:64415 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,1]<stdout>:
[1,1]<stdout>:webxt6cb30000A2:63831:64415 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,11]<stdout>:
[1,11]<stdout>:webxt6cb300009V:68561:69082 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,11]<stdout>:
[1,11]<stdout>:webxt6cb300009V:68561:69082 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,20]<stdout>:
[1,20]<stdout>:webxt6cb30000AB:39437:39964 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,20]<stdout>:
[1,20]<stdout>:webxt6cb30000AB:39437:39964 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,28]<stdout>:
[1,28]<stdout>:webxt6cb300008U:39482:39985 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,28]<stdout>:
[1,28]<stdout>:webxt6cb300008U:39482:39985 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,17]<stdout>:
[1,17]<stdout>:webxt6cb30000AB:39434:39968 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,17]<stdout>:
[1,17]<stdout>:webxt6cb30000AB:39434:39968 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,26]<stdout>:
[1,26]<stdout>:webxt6cb300008U:39480:39993 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,26]<stdout>:
[1,26]<stdout>:webxt6cb300008U:39480:39993 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,23]<stdout>:
[1,23]<stdout>:webxt6cb30000AB:39440:39974 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,23]<stdout>:
[1,23]<stdout>:webxt6cb30000AB:39440:39974 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,21]<stdout>:
[1,21]<stdout>:webxt6cb30000AB:39438:39985 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,21]<stdout>:
[1,21]<stdout>:webxt6cb30000AB:39438:39985 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,19]<stdout>:
[1,19]<stdout>:webxt6cb30000AB:39436:39975 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,19]<stdout>:
[1,19]<stdout>:webxt6cb30000AB:39436:39975 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,18]<stdout>:
[1,18]<stdout>:webxt6cb30000AB:39435:39977 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,18]<stdout>:
[1,18]<stdout>:webxt6cb30000AB:39435:39977 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,22]<stdout>:
[1,22]<stdout>:webxt6cb30000AB:39439:39982 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,22]<stdout>:
[1,22]<stdout>:webxt6cb30000AB:39439:39982 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,16]<stdout>:
[1,16]<stdout>:webxt6cb30000AB:39433:39969 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,16]<stdout>:
[1,16]<stdout>:webxt6cb30000AB:39433:39969 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,29]<stdout>:
[1,29]<stdout>:webxt6cb300008U:39483:39991 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,29]<stdout>:
[1,29]<stdout>:webxt6cb300008U:39483:39991 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,24]<stdout>:
[1,24]<stdout>:webxt6cb300008U:39478:39988 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,24]<stdout>:
[1,24]<stdout>:webxt6cb300008U:39478:39988 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,25]<stdout>:
[1,25]<stdout>:webxt6cb300008U:39479:39995 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,25]<stdout>:
[1,25]<stdout>:webxt6cb300008U:39479:39995 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,27]<stdout>:
[1,27]<stdout>:webxt6cb300008U:39481:40002 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,27]<stdout>:
[1,27]<stdout>:webxt6cb300008U:39481:40002 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,30]<stdout>:
[1,30]<stdout>:webxt6cb300008U:39484:39998 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,30]<stdout>:
[1,30]<stdout>:webxt6cb300008U:39484:39998 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,31]<stdout>:
[1,31]<stdout>:webxt6cb300008U:39485:40003 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,31]<stdout>:
[1,31]<stdout>:webxt6cb300008U:39485:40003 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,26]<stdout>:test: range(0, 32)
[1,28]<stdout>:test: range(0, 32)
[1,29]<stdout>:test: range(0, 32)
[1,25]<stdout>:test: range(0, 32)
[1,24]<stdout>:test: range(0, 32)
[1,0]<stdout>:test: range(0, 32)
[1,27]<stdout>:test: range(0, 32)
[1,12]<stdout>:test: range(0, 32)
[1,9]<stdout>:test: range(0, 32)
[1,30]<stdout>:test: range(0, 32)
[1,31]<stdout>:test: range(0, 32)
[1,4]<stdout>:test: range(0, 32)
[1,14]<stdout>:test: range(0, 32)
[1,3]<stdout>:test: range(0, 32)
[1,2]<stdout>:test: range(0, 32)
[1,15]<stdout>:test: range(0, 32)
[1,5]<stdout>:test: range(0, 32)
[1,7]<stdout>:test: range(0, 32)
[1,10]<stdout>:test: range(0, 32)
[1,6]<stdout>:test: range(0, 32)
[1,13]<stdout>:test: range(0, 32)
[1,1]<stdout>:test: range(0, 32)
[1,11]<stdout>:test: range(0, 32)
[1,8]<stdout>:test: range(0, 32)
[1,20]<stdout>:test: range(0, 32)
[1,23]<stdout>:test: range(0, 32)
[1,17]<stdout>:test: range(0, 32)
[1,21]<stdout>:test: range(0, 32)
[1,22]<stdout>:test: range(0, 32)
[1,18]<stdout>:test: range(0, 32)
[1,19]<stdout>:test: range(0, 32)
[1,16]<stdout>:test: range(0, 32)
[1,24]<stdout>:
[1,24]<stdout>:webxt6cb300008U:39478:40049 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,24]<stdout>:
[1,24]<stdout>:webxt6cb300008U:39478:40049 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,28]<stdout>:
[1,28]<stdout>:webxt6cb300008U:39482:40061 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,28]<stdout>:
[1,28]<stdout>:webxt6cb300008U:39482:40061 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,9]<stdout>:
[1,9]<stdout>:webxt6cb300009V:68559:69127 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,9]<stdout>:
[1,9]<stdout>:webxt6cb300009V:68559:69127 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,27]<stdout>:
[1,27]<stdout>:webxt6cb300008U:39481:40055 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,27]<stdout>:
[1,27]<stdout>:webxt6cb300008U:39481:40055 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,8]<stdout>:
[1,8]<stdout>:webxt6cb300009V:68558:69129 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,8]<stdout>:
[1,8]<stdout>:webxt6cb300009V:68558:69129 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,0]<stdout>:
[1,0]<stdout>:webxt6cb30000A2:63830:64460 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,0]<stdout>:
[1,0]<stdout>:webxt6cb30000A2:63830:64460 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,17]<stdout>:
[1,17]<stdout>:webxt6cb30000AB:39434:40029 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,17]<stdout>:
[1,17]<stdout>:webxt6cb30000AB:39434:40029 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,29]<stdout>:
[1,29]<stdout>:webxt6cb300008U:39483:40054 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,29]<stdout>:
[1,29]<stdout>:webxt6cb300008U:39483:40054 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,11]<stdout>:
[1,11]<stdout>:webxt6cb300009V:68561:69128 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,11]<stdout>:
[1,11]<stdout>:webxt6cb300009V:68561:69128 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,31]<stdout>:
[1,31]<stdout>:webxt6cb300008U:39485:40058 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,31]<stdout>:
[1,31]<stdout>:webxt6cb300008U:39485:40058 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,1]<stdout>:
[1,1]<stdout>:webxt6cb30000A2:63831:64459 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,1]<stdout>:
[1,1]<stdout>:webxt6cb30000A2:63831:64459 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,16]<stdout>:
[1,16]<stdout>:webxt6cb30000AB:39433:40032 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,16]<stdout>:
[1,16]<stdout>:webxt6cb30000AB:39433:40032 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,14]<stdout>:
[1,14]<stdout>:webxt6cb300009V:68564:69133 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,14]<stdout>:
[1,14]<stdout>:webxt6cb300009V:68564:69133 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,25]<stdout>:
[1,25]<stdout>:webxt6cb300008U:39479:40056 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,25]<stdout>:
[1,25]<stdout>:webxt6cb300008U:39479:40056 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,7]<stdout>:
[1,7]<stdout>:webxt6cb30000A2:63837:64462 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,7]<stdout>:
[1,7]<stdout>:webxt6cb30000A2:63837:64462 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,22]<stdout>:
[1,22]<stdout>:webxt6cb30000AB:39439:40030 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,22]<stdout>:
[1,22]<stdout>:webxt6cb30000AB:39439:40030 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,30]<stdout>:
[1,30]<stdout>:webxt6cb300008U:39484:40059 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,30]<stdout>:
[1,30]<stdout>:webxt6cb300008U:39484:40059 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,15]<stdout>:
[1,15]<stdout>:webxt6cb300009V:68565:69131 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,15]<stdout>:
[1,15]<stdout>:webxt6cb300009V:68565:69131 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,26]<stdout>:
[1,26]<stdout>:webxt6cb300008U:39480:40057 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,26]<stdout>:
[1,26]<stdout>:webxt6cb300008U:39480:40057 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,13]<stdout>:
[1,13]<stdout>:webxt6cb300009V:68563:69136 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,13]<stdout>:
[1,13]<stdout>:webxt6cb300009V:68563:69136 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,6]<stdout>:
[1,6]<stdout>:webxt6cb30000A2:63836:64461 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,6]<stdout>:
[1,6]<stdout>:webxt6cb30000A2:63836:64461 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,23]<stdout>:
[1,23]<stdout>:webxt6cb30000AB:39440:40031 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,23]<stdout>:
[1,23]<stdout>:webxt6cb30000AB:39440:40031 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,12]<stdout>:
[1,12]<stdout>:webxt6cb300009V:68562:69137 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,12]<stdout>:
[1,12]<stdout>:webxt6cb300009V:68562:69137 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,5]<stdout>:
[1,5]<stdout>:webxt6cb30000A2:63835:64469 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,5]<stdout>:
[1,5]<stdout>:webxt6cb30000A2:63835:64469 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,21]<stdout>:
[1,21]<stdout>:webxt6cb30000AB:39438:40038 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,21]<stdout>:
[1,21]<stdout>:webxt6cb30000AB:39438:40038 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,10]<stdout>:
[1,10]<stdout>:webxt6cb300009V:68560:69135 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,10]<stdout>:
[1,10]<stdout>:webxt6cb300009V:68560:69135 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,19]<stdout>:
[1,19]<stdout>:webxt6cb30000AB:39436:40036 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,19]<stdout>:
[1,19]<stdout>:webxt6cb30000AB:39436:40036 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,4]<stdout>:
[1,4]<stdout>:webxt6cb30000A2:63834:64473 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,4]<stdout>:
[1,4]<stdout>:webxt6cb30000A2:63834:64473 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,20]<stdout>:
[1,20]<stdout>:webxt6cb30000AB:39437:40039 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,20]<stdout>:
[1,20]<stdout>:webxt6cb30000AB:39437:40039 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,3]<stdout>:
[1,3]<stdout>:webxt6cb30000A2:63833:64471 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,3]<stdout>:
[1,3]<stdout>:webxt6cb30000A2:63833:64471 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,18]<stdout>:
[1,18]<stdout>:webxt6cb30000AB:39435:40044 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,18]<stdout>:
[1,18]<stdout>:webxt6cb30000AB:39435:40044 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,2]<stdout>:
[1,2]<stdout>:webxt6cb30000A2:63832:64474 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,2]<stdout>:
[1,2]<stdout>:webxt6cb30000A2:63832:64474 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,24]<stdout>:
[1,24]<stdout>:webxt6cb300008U:39478:40073 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,24]<stdout>:
[1,24]<stdout>:webxt6cb300008U:39478:40073 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,28]<stdout>:
[1,28]<stdout>:webxt6cb300008U:39482:40078 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,28]<stdout>:
[1,28]<stdout>:webxt6cb300008U:39482:40078 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,27]<stdout>:
[1,27]<stdout>:webxt6cb300008U:39481:40081 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,27]<stdout>:
[1,27]<stdout>:webxt6cb300008U:39481:40081 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,9]<stdout>:
[1,9]<stdout>:webxt6cb300009V:68559:69150 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,9]<stdout>:
[1,9]<stdout>:webxt6cb300009V:68559:69150 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,29]<stdout>:
[1,29]<stdout>:webxt6cb300008U:39483:40085 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,29]<stdout>:
[1,29]<stdout>:webxt6cb300008U:39483:40085 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,8]<stdout>:
[1,8]<stdout>:webxt6cb300009V:68558:69153 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,8]<stdout>:
[1,8]<stdout>:webxt6cb300009V:68558:69153 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,17]<stdout>:
[1,17]<stdout>:webxt6cb30000AB:39434:40053 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,17]<stdout>:
[1,17]<stdout>:webxt6cb30000AB:39434:40053 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,31]<stdout>:
[1,31]<stdout>:webxt6cb300008U:39485:40088 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,31]<stdout>:
[1,31]<stdout>:webxt6cb300008U:39485:40088 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,11]<stdout>:
[1,11]<stdout>:webxt6cb300009V:68561:69157 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,11]<stdout>:
[1,11]<stdout>:webxt6cb300009V:68561:69157 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,0]<stdout>:
[1,0]<stdout>:webxt6cb30000A2:63830:64483 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,0]<stdout>:
[1,0]<stdout>:webxt6cb30000A2:63830:64483 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,16]<stdout>:
[1,16]<stdout>:webxt6cb30000AB:39433:40057 [0] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,16]<stdout>:
[1,16]<stdout>:webxt6cb30000AB:39433:40057 [0] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,14]<stdout>:
[1,14]<stdout>:webxt6cb300009V:68564:69161 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,14]<stdout>:
[1,14]<stdout>:webxt6cb300009V:68564:69161 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,25]<stdout>:
[1,25]<stdout>:webxt6cb300008U:39479:40092 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,25]<stdout>:
[1,25]<stdout>:webxt6cb300008U:39479:40092 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,22]<stdout>:
[1,22]<stdout>:webxt6cb30000AB:39439:40059 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,22]<stdout>:
[1,22]<stdout>:webxt6cb30000AB:39439:40059 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,15]<stdout>:
[1,15]<stdout>:webxt6cb300009V:68565:69164 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,15]<stdout>:
[1,15]<stdout>:webxt6cb300009V:68565:69164 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,30]<stdout>:
[1,30]<stdout>:webxt6cb300008U:39484:40097 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,30]<stdout>:
[1,30]<stdout>:webxt6cb300008U:39484:40097 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,26]<stdout>:
[1,26]<stdout>:webxt6cb300008U:39480:40100 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,26]<stdout>:
[1,26]<stdout>:webxt6cb300008U:39480:40100 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,23]<stdout>:
[1,23]<stdout>:webxt6cb30000AB:39440:40064 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,23]<stdout>:
[1,23]<stdout>:webxt6cb30000AB:39440:40064 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,21]<stdout>:
[1,21]<stdout>:webxt6cb30000AB:39438:40067 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,21]<stdout>:
[1,21]<stdout>:webxt6cb30000AB:39438:40067 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,10]<stdout>:
[1,10]<stdout>:webxt6cb300009V:68560:69176 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,10]<stdout>:
[1,10]<stdout>:webxt6cb300009V:68560:69176 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,1]<stdout>:
[1,1]<stdout>:webxt6cb30000A2:63831:64486 [1] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,1]<stdout>:
[1,1]<stdout>:webxt6cb30000A2:63831:64486 [1] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,12]<stdout>:
[1,12]<stdout>:webxt6cb300009V:68562:69169 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,12]<stdout>:
[1,12]<stdout>:webxt6cb300009V:68562:69169 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,13]<stdout>:
[1,13]<stdout>:webxt6cb300009V:68563:69173 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,13]<stdout>:
[1,13]<stdout>:webxt6cb300009V:68563:69173 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,19]<stdout>:
[1,19]<stdout>:webxt6cb30000AB:39436:40076 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,19]<stdout>:
[1,19]<stdout>:webxt6cb30000AB:39436:40076 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,20]<stdout>:
[1,20]<stdout>:webxt6cb30000AB:39437:40082 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,20]<stdout>:
[1,20]<stdout>:webxt6cb30000AB:39437:40082 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,7]<stdout>:
[1,7]<stdout>:webxt6cb30000A2:63837:64490 [7] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,7]<stdout>:
[1,7]<stdout>:webxt6cb30000A2:63837:64490 [7] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,18]<stdout>:
[1,18]<stdout>:webxt6cb30000AB:39435:40085 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,18]<stdout>:
[1,18]<stdout>:webxt6cb30000AB:39435:40085 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,6]<stdout>:
[1,6]<stdout>:webxt6cb30000A2:63836:64494 [6] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,6]<stdout>:
[1,6]<stdout>:webxt6cb30000A2:63836:64494 [6] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,5]<stdout>:
[1,5]<stdout>:webxt6cb30000A2:63835:64497 [5] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,5]<stdout>:
[1,5]<stdout>:webxt6cb30000A2:63835:64497 [5] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,4]<stdout>:
[1,4]<stdout>:webxt6cb30000A2:63834:64501 [4] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,4]<stdout>:
[1,4]<stdout>:webxt6cb30000A2:63834:64501 [4] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,3]<stdout>:
[1,3]<stdout>:webxt6cb30000A2:63833:64505 [3] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,3]<stdout>:
[1,3]<stdout>:webxt6cb30000A2:63833:64505 [3] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,2]<stdout>:
[1,2]<stdout>:webxt6cb30000A2:63832:64509 [2] graph/topo.cc:675 NCCL WARN SCCL: ngpus set in the SCCL algo (32) doesn't match the communicator ngpus (1)
[1,2]<stdout>:
[1,2]<stdout>:webxt6cb30000A2:63832:64509 [2] graph/topo.cc:1036 NCCL WARN SCCL: algorithm /home/amawa/a2a-32.xml failed to initialize. Will be ignored.
[1,0]<stdout>:====== latency stats {0} ====== 
[1,0]<stdout>:	Avg Latency:  1703.45 ms
[1,0]<stdout>:	P50 Latency:  1703.26 ms
[1,0]<stdout>:	P90 Latency:  1707.76 ms[1,0]<stdout>:
[1,0]<stdout>:	P95 Latency:  1707.76 ms
[1,0]<stdout>:	P99 Latency:  1707.76 ms
[1,0]<stdout>:	999 Latency:  1707.76 ms
[1,0]<stdout>:====== latency stats {0} ====== model_latencies
[1,0]<stdout>:	Avg Latency:    50.86 ms
[1,0]<stdout>:	P50 Latency:    50.71 ms[1,0]<stdout>:
[1,0]<stdout>:	P90 Latency:    52.56 ms
[1,0]<stdout>:	P95 Latency:    52.93 ms
[1,0]<stdout>:	P99 Latency:    54.51 ms[1,0]<stdout>:
[1,0]<stdout>:	999 Latency:    56.04 ms
[1,0]<stdout>:====== latency stats {0} ====== single_token_latency
[1,0]<stdout>:	Avg Latency:    58.80 ms
[1,0]<stdout>:	P50 Latency:    58.75 ms
[1,0]<stdout>:	P90 Latency:    60.44 ms
[1,0]<stdout>:	P95 Latency:    60.82 ms
[1,0]<stdout>:	P99 Latency:    62.43 ms[1,0]<stdout>:
[1,0]<stdout>:	999 Latency:    63.99 ms
